function _mergeNamespaces(n, m) {
  for (var i = 0; i < m.length; i++) {
    const e = m[i];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k in e) {
        if (k !== "default" && !(k in n)) {
          const d = Object.getOwnPropertyDescriptor(e, k);
          if (d) {
            Object.defineProperty(
              n,
              k,
              d.get
                ? d
                : {
                    enumerable: true,
                    get: () => e[k],
                  }
            );
          }
        }
      }
    }
  }
  return Object.freeze(
    Object.defineProperty(n, Symbol.toStringTag, { value: "Module" })
  );
}

true &&
  (function polyfill() {
    const relList = document.createElement("link").relList;
    if (relList && relList.supports && relList.supports("modulepreload")) {
      return;
    }
    for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
      processPreload(link);
    }
    new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.type !== "childList") {
          continue;
        }
        for (const node of mutation.addedNodes) {
          if (node.tagName === "LINK" && node.rel === "modulepreload")
            processPreload(node);
        }
      }
    }).observe(document, { childList: true, subtree: true });
    function getFetchOpts(link) {
      const fetchOpts = {};
      if (link.integrity) fetchOpts.integrity = link.integrity;
      if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
      if (link.crossOrigin === "use-credentials")
        fetchOpts.credentials = "include";
      else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
      else fetchOpts.credentials = "same-origin";
      return fetchOpts;
    }
    function processPreload(link) {
      if (link.ep) return;
      link.ep = true;
      const fetchOpts = getFetchOpts(link);
      fetch(link.href, fetchOpts);
    }
  })();

function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default")
    ? x["default"]
    : x;
}

var jsxRuntime = { exports: {} };

var reactJsxRuntime_production_min = {};

var react = { exports: {} };

var react_production_min = {};

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_production_min;

function requireReact_production_min() {
  if (hasRequiredReact_production_min) return react_production_min;
  hasRequiredReact_production_min = 1;
  var l = Symbol.for("react.element"),
    n = Symbol.for("react.portal"),
    p = Symbol.for("react.fragment"),
    q = Symbol.for("react.strict_mode"),
    r = Symbol.for("react.profiler"),
    t = Symbol.for("react.provider"),
    u = Symbol.for("react.context"),
    v = Symbol.for("react.forward_ref"),
    w = Symbol.for("react.suspense"),
    x = Symbol.for("react.memo"),
    y = Symbol.for("react.lazy"),
    z = Symbol.iterator;
  function A(a) {
    if (null === a || "object" !== typeof a) return null;
    a = (z && a[z]) || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }
  var B = {
      isMounted: function () {
        return false;
      },
      enqueueForceUpdate: function () {},
      enqueueReplaceState: function () {},
      enqueueSetState: function () {},
    },
    C = Object.assign,
    D = {};
  function E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }
  E.prototype.isReactComponent = {};
  E.prototype.setState = function (a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a)
      throw Error(
        "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
      );
    this.updater.enqueueSetState(this, a, b, "setState");
  };
  E.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };
  function F() {}
  F.prototype = E.prototype;
  function G(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }
  var H = (G.prototype = new F());
  H.constructor = G;
  C(H, E.prototype);
  H.isPureReactComponent = true;
  var I = Array.isArray,
    J = Object.prototype.hasOwnProperty,
    K = { current: null },
    L = { key: true, ref: true, __self: true, __source: true };
  function M(a, b, e) {
    var d,
      c = {},
      k = null,
      h = null;
    if (null != b)
      for (d in (void 0 !== b.ref && (h = b.ref),
      void 0 !== b.key && (k = "" + b.key),
      b))
        J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
    var g = arguments.length - 2;
    if (1 === g) c.children = e;
    else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
      c.children = f;
    }
    if (a && a.defaultProps)
      for (d in ((g = a.defaultProps), g)) void 0 === c[d] && (c[d] = g[d]);
    return {
      $$typeof: l,
      type: a,
      key: k,
      ref: h,
      props: c,
      _owner: K.current,
    };
  }
  function N(a, b) {
    return {
      $$typeof: l,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner,
    };
  }
  function O(a) {
    return "object" === typeof a && null !== a && a.$$typeof === l;
  }
  function escape(a) {
    var b = { "=": "=0", ":": "=2" };
    return (
      "$" +
      a.replace(/[=:]/g, function (a) {
        return b[a];
      })
    );
  }
  var P = /\/+/g;
  function Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key
      ? escape("" + a.key)
      : b.toString(36);
  }
  function R(a, b, e, d, c) {
    var k = typeof a;
    if ("undefined" === k || "boolean" === k) a = null;
    var h = false;
    if (null === a) h = true;
    else
      switch (k) {
        case "string":
        case "number":
          h = true;
          break;
        case "object":
          switch (a.$$typeof) {
            case l:
            case n:
              h = true;
          }
      }
    if (h)
      return (
        (h = a),
        (c = c(h)),
        (a = "" === d ? "." + Q(h, 0) : d),
        I(c)
          ? ((e = ""),
            null != a && (e = a.replace(P, "$&/") + "/"),
            R(c, b, e, "", function (a) {
              return a;
            }))
          : null != c &&
            (O(c) &&
              (c = N(
                c,
                e +
                  (!c.key || (h && h.key === c.key)
                    ? ""
                    : ("" + c.key).replace(P, "$&/") + "/") +
                  a
              )),
            b.push(c)),
        1
      );
    h = 0;
    d = "" === d ? "." : d + ":";
    if (I(a))
      for (var g = 0; g < a.length; g++) {
        k = a[g];
        var f = d + Q(k, g);
        h += R(k, b, e, f, c);
      }
    else if (((f = A(a)), "function" === typeof f))
      for (a = f.call(a), g = 0; !(k = a.next()).done; )
        (k = k.value), (f = d + Q(k, g++)), (h += R(k, b, e, f, c));
    else if ("object" === k)
      throw (
        ((b = String(a)),
        Error(
          "Objects are not valid as a React child (found: " +
            ("[object Object]" === b
              ? "object with keys {" + Object.keys(a).join(", ") + "}"
              : b) +
            "). If you meant to render a collection of children, use an array instead."
        ))
      );
    return h;
  }
  function S(a, b, e) {
    if (null == a) return a;
    var d = [],
      c = 0;
    R(a, d, "", "", function (a) {
      return b.call(e, a, c++);
    });
    return d;
  }
  function T(a) {
    if (-1 === a._status) {
      var b = a._result;
      b = b();
      b.then(
        function (b) {
          if (0 === a._status || -1 === a._status)
            (a._status = 1), (a._result = b);
        },
        function (b) {
          if (0 === a._status || -1 === a._status)
            (a._status = 2), (a._result = b);
        }
      );
      -1 === a._status && ((a._status = 0), (a._result = b));
    }
    if (1 === a._status) return a._result.default;
    throw a._result;
  }
  var U = { current: null },
    V = { transition: null },
    W = {
      ReactCurrentDispatcher: U,
      ReactCurrentBatchConfig: V,
      ReactCurrentOwner: K,
    };
  function X() {
    throw Error("act(...) is not supported in production builds of React.");
  }
  react_production_min.Children = {
    map: S,
    forEach: function (a, b, e) {
      S(
        a,
        function () {
          b.apply(this, arguments);
        },
        e
      );
    },
    count: function (a) {
      var b = 0;
      S(a, function () {
        b++;
      });
      return b;
    },
    toArray: function (a) {
      return (
        S(a, function (a) {
          return a;
        }) || []
      );
    },
    only: function (a) {
      if (!O(a))
        throw Error(
          "React.Children.only expected to receive a single React element child."
        );
      return a;
    },
  };
  react_production_min.Component = E;
  react_production_min.Fragment = p;
  react_production_min.Profiler = r;
  react_production_min.PureComponent = G;
  react_production_min.StrictMode = q;
  react_production_min.Suspense = w;
  react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
  react_production_min.act = X;
  react_production_min.cloneElement = function (a, b, e) {
    if (null === a || void 0 === a)
      throw Error(
        "React.cloneElement(...): The argument must be a React element, but you passed " +
          a +
          "."
      );
    var d = C({}, a.props),
      c = a.key,
      k = a.ref,
      h = a._owner;
    if (null != b) {
      void 0 !== b.ref && ((k = b.ref), (h = K.current));
      void 0 !== b.key && (c = "" + b.key);
      if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
      for (f in b)
        J.call(b, f) &&
          !L.hasOwnProperty(f) &&
          (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;
    else if (1 < f) {
      g = Array(f);
      for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
      d.children = g;
    }
    return { $$typeof: l, type: a.type, key: c, ref: k, props: d, _owner: h };
  };
  react_production_min.createContext = function (a) {
    a = {
      $$typeof: u,
      _currentValue: a,
      _currentValue2: a,
      _threadCount: 0,
      Provider: null,
      Consumer: null,
      _defaultValue: null,
      _globalName: null,
    };
    a.Provider = { $$typeof: t, _context: a };
    return (a.Consumer = a);
  };
  react_production_min.createElement = M;
  react_production_min.createFactory = function (a) {
    var b = M.bind(null, a);
    b.type = a;
    return b;
  };
  react_production_min.createRef = function () {
    return { current: null };
  };
  react_production_min.forwardRef = function (a) {
    return { $$typeof: v, render: a };
  };
  react_production_min.isValidElement = O;
  react_production_min.lazy = function (a) {
    return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T };
  };
  react_production_min.memo = function (a, b) {
    return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
  };
  react_production_min.startTransition = function (a) {
    var b = V.transition;
    V.transition = {};
    try {
      a();
    } finally {
      V.transition = b;
    }
  };
  react_production_min.unstable_act = X;
  react_production_min.useCallback = function (a, b) {
    return U.current.useCallback(a, b);
  };
  react_production_min.useContext = function (a) {
    return U.current.useContext(a);
  };
  react_production_min.useDebugValue = function () {};
  react_production_min.useDeferredValue = function (a) {
    return U.current.useDeferredValue(a);
  };
  react_production_min.useEffect = function (a, b) {
    return U.current.useEffect(a, b);
  };
  react_production_min.useId = function () {
    return U.current.useId();
  };
  react_production_min.useImperativeHandle = function (a, b, e) {
    return U.current.useImperativeHandle(a, b, e);
  };
  react_production_min.useInsertionEffect = function (a, b) {
    return U.current.useInsertionEffect(a, b);
  };
  react_production_min.useLayoutEffect = function (a, b) {
    return U.current.useLayoutEffect(a, b);
  };
  react_production_min.useMemo = function (a, b) {
    return U.current.useMemo(a, b);
  };
  react_production_min.useReducer = function (a, b, e) {
    return U.current.useReducer(a, b, e);
  };
  react_production_min.useRef = function (a) {
    return U.current.useRef(a);
  };
  react_production_min.useState = function (a) {
    return U.current.useState(a);
  };
  react_production_min.useSyncExternalStore = function (a, b, e) {
    return U.current.useSyncExternalStore(a, b, e);
  };
  react_production_min.useTransition = function () {
    return U.current.useTransition();
  };
  react_production_min.version = "18.3.1";
  return react_production_min;
}

var hasRequiredReact;

function requireReact() {
  if (hasRequiredReact) return react.exports;
  hasRequiredReact = 1;
  {
    react.exports = requireReact_production_min();
  }
  return react.exports;
}

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_production_min;

function requireReactJsxRuntime_production_min() {
  if (hasRequiredReactJsxRuntime_production_min)
    return reactJsxRuntime_production_min;
  hasRequiredReactJsxRuntime_production_min = 1;
  var f = requireReact(),
    k = Symbol.for("react.element"),
    l = Symbol.for("react.fragment"),
    m = Object.prototype.hasOwnProperty,
    n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
    p = { key: true, ref: true, __self: true, __source: true };
  function q(c, a, g) {
    var b,
      d = {},
      e = null,
      h = null;
    void 0 !== g && (e = "" + g);
    void 0 !== a.key && (e = "" + a.key);
    void 0 !== a.ref && (h = a.ref);
    for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps)
      for (b in ((a = c.defaultProps), a)) void 0 === d[b] && (d[b] = a[b]);
    return {
      $$typeof: k,
      type: c,
      key: e,
      ref: h,
      props: d,
      _owner: n.current,
    };
  }
  reactJsxRuntime_production_min.Fragment = l;
  reactJsxRuntime_production_min.jsx = q;
  reactJsxRuntime_production_min.jsxs = q;
  return reactJsxRuntime_production_min;
}

var hasRequiredJsxRuntime;

function requireJsxRuntime() {
  if (hasRequiredJsxRuntime) return jsxRuntime.exports;
  hasRequiredJsxRuntime = 1;
  {
    jsxRuntime.exports = requireReactJsxRuntime_production_min();
  }
  return jsxRuntime.exports;
}

var jsxRuntimeExports = requireJsxRuntime();

var client = {};

var reactDom = { exports: {} };

var reactDom_production_min = {};

var scheduler = { exports: {} };

var scheduler_production_min = {};

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production_min;

function requireScheduler_production_min() {
  if (hasRequiredScheduler_production_min) return scheduler_production_min;
  hasRequiredScheduler_production_min = 1;
  (function (exports) {
    function f(a, b) {
      var c = a.length;
      a.push(b);
      a: for (; 0 < c; ) {
        var d = (c - 1) >>> 1,
          e = a[d];
        if (0 < g(e, b)) (a[d] = b), (a[c] = e), (c = d);
        else break a;
      }
    }
    function h(a) {
      return 0 === a.length ? null : a[0];
    }
    function k(a) {
      if (0 === a.length) return null;
      var b = a[0],
        c = a.pop();
      if (c !== b) {
        a[0] = c;
        a: for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
          var m = 2 * (d + 1) - 1,
            C = a[m],
            n = m + 1,
            x = a[n];
          if (0 > g(C, c))
            n < e && 0 > g(x, C)
              ? ((a[d] = x), (a[n] = c), (d = n))
              : ((a[d] = C), (a[m] = c), (d = m));
          else if (n < e && 0 > g(x, c)) (a[d] = x), (a[n] = c), (d = n);
          else break a;
        }
      }
      return b;
    }
    function g(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }
    if (
      "object" === typeof performance &&
      "function" === typeof performance.now
    ) {
      var l = performance;
      exports.unstable_now = function () {
        return l.now();
      };
    } else {
      var p = Date,
        q = p.now();
      exports.unstable_now = function () {
        return p.now() - q;
      };
    }
    var r = [],
      t = [],
      u = 1,
      v = null,
      y = 3,
      z = false,
      A = false,
      B = false,
      D = "function" === typeof setTimeout ? setTimeout : null,
      E = "function" === typeof clearTimeout ? clearTimeout : null,
      F = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator &&
      void 0 !== navigator.scheduling &&
      void 0 !== navigator.scheduling.isInputPending &&
      navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G(a) {
      for (var b = h(t); null !== b; ) {
        if (null === b.callback) k(t);
        else if (b.startTime <= a)
          k(t), (b.sortIndex = b.expirationTime), f(r, b);
        else break;
        b = h(t);
      }
    }
    function H(a) {
      B = false;
      G(a);
      if (!A)
        if (null !== h(r)) (A = true), I(J);
        else {
          var b = h(t);
          null !== b && K(H, b.startTime - a);
        }
    }
    function J(a, b) {
      A = false;
      B && ((B = false), E(L), (L = -1));
      z = true;
      var c = y;
      try {
        G(b);
        for (
          v = h(r);
          null !== v && (!(v.expirationTime > b) || (a && !M()));

        ) {
          var d = v.callback;
          if ("function" === typeof d) {
            v.callback = null;
            y = v.priorityLevel;
            var e = d(v.expirationTime <= b);
            b = exports.unstable_now();
            "function" === typeof e ? (v.callback = e) : v === h(r) && k(r);
            G(b);
          } else k(r);
          v = h(r);
        }
        if (null !== v) var w = !0;
        else {
          var m = h(t);
          null !== m && K(H, m.startTime - b);
          w = !1;
        }
        return w;
      } finally {
        (v = null), (y = c), (z = false);
      }
    }
    var N = false,
      O = null,
      L = -1,
      P = 5,
      Q = -1;
    function M() {
      return exports.unstable_now() - Q < P ? false : true;
    }
    function R() {
      if (null !== O) {
        var a = exports.unstable_now();
        Q = a;
        var b = true;
        try {
          b = O(!0, a);
        } finally {
          b ? S() : ((N = false), (O = null));
        }
      } else N = false;
    }
    var S;
    if ("function" === typeof F)
      S = function () {
        F(R);
      };
    else if ("undefined" !== typeof MessageChannel) {
      var T = new MessageChannel(),
        U = T.port2;
      T.port1.onmessage = R;
      S = function () {
        U.postMessage(null);
      };
    } else
      S = function () {
        D(R, 0);
      };
    function I(a) {
      O = a;
      N || ((N = true), S());
    }
    function K(a, b) {
      L = D(function () {
        a(exports.unstable_now());
      }, b);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function (a) {
      a.callback = null;
    };
    exports.unstable_continueExecution = function () {
      A || z || ((A = true), I(J));
    };
    exports.unstable_forceFrameRate = function (a) {
      0 > a || 125 < a
        ? console.error(
            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
          )
        : (P = 0 < a ? Math.floor(1e3 / a) : 5);
    };
    exports.unstable_getCurrentPriorityLevel = function () {
      return y;
    };
    exports.unstable_getFirstCallbackNode = function () {
      return h(r);
    };
    exports.unstable_next = function (a) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = y;
      }
      var c = y;
      y = b;
      try {
        return a();
      } finally {
        y = c;
      }
    };
    exports.unstable_pauseExecution = function () {};
    exports.unstable_requestPaint = function () {};
    exports.unstable_runWithPriority = function (a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = y;
      y = a;
      try {
        return b();
      } finally {
        y = c;
      }
    };
    exports.unstable_scheduleCallback = function (a, b, c) {
      var d = exports.unstable_now();
      "object" === typeof c && null !== c
        ? ((c = c.delay), (c = "number" === typeof c && 0 < c ? d + c : d))
        : (c = d);
      switch (a) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c + e;
      a = {
        id: u++,
        callback: b,
        priorityLevel: a,
        startTime: c,
        expirationTime: e,
        sortIndex: -1,
      };
      c > d
        ? ((a.sortIndex = c),
          f(t, a),
          null === h(r) &&
            a === h(t) &&
            (B ? (E(L), (L = -1)) : (B = true), K(H, c - d)))
        : ((a.sortIndex = e), f(r, a), A || z || ((A = true), I(J)));
      return a;
    };
    exports.unstable_shouldYield = M;
    exports.unstable_wrapCallback = function (a) {
      var b = y;
      return function () {
        var c = y;
        y = b;
        try {
          return a.apply(this, arguments);
        } finally {
          y = c;
        }
      };
    };
  })(scheduler_production_min);
  return scheduler_production_min;
}

var hasRequiredScheduler;

function requireScheduler() {
  if (hasRequiredScheduler) return scheduler.exports;
  hasRequiredScheduler = 1;
  {
    scheduler.exports = requireScheduler_production_min();
  }
  return scheduler.exports;
}

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_production_min;

function requireReactDom_production_min() {
  if (hasRequiredReactDom_production_min) return reactDom_production_min;
  hasRequiredReactDom_production_min = 1;
  var aa = requireReact(),
    ca = requireScheduler();
  function p(a) {
    for (
      var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a,
        c = 1;
      c < arguments.length;
      c++
    )
      b += "&args[]=" + encodeURIComponent(arguments[c]);
    return (
      "Minified React error #" +
      a +
      "; visit " +
      b +
      " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
    );
  }
  var da = new Set(),
    ea = {};
  function fa(a, b) {
    ha(a, b);
    ha(a + "Capture", b);
  }
  function ha(a, b) {
    ea[a] = b;
    for (a = 0; a < b.length; a++) da.add(b[a]);
  }
  var ia = !(
      "undefined" === typeof window ||
      "undefined" === typeof window.document ||
      "undefined" === typeof window.document.createElement
    ),
    ja = Object.prototype.hasOwnProperty,
    ka =
      /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    la = {},
    ma = {};
  function oa(a) {
    if (ja.call(ma, a)) return true;
    if (ja.call(la, a)) return false;
    if (ka.test(a)) return (ma[a] = true);
    la[a] = true;
    return false;
  }
  function pa(a, b, c, d) {
    if (null !== c && 0 === c.type) return false;
    switch (typeof b) {
      case "function":
      case "symbol":
        return true;
      case "boolean":
        if (d) return false;
        if (null !== c) return !c.acceptsBooleans;
        a = a.toLowerCase().slice(0, 5);
        return "data-" !== a && "aria-" !== a;
      default:
        return false;
    }
  }
  function qa(a, b, c, d) {
    if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return true;
    if (d) return false;
    if (null !== c)
      switch (c.type) {
        case 3:
          return !b;
        case 4:
          return false === b;
        case 5:
          return isNaN(b);
        case 6:
          return isNaN(b) || 1 > b;
      }
    return false;
  }
  function v(a, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
    this.attributeName = d;
    this.attributeNamespace = e;
    this.mustUseProperty = c;
    this.propertyName = a;
    this.type = b;
    this.sanitizeURL = f;
    this.removeEmptyString = g;
  }
  var z = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style"
    .split(" ")
    .forEach(function (a) {
      z[a] = new v(a, 0, false, a, null, false, false);
    });
  [
    ["acceptCharset", "accept-charset"],
    ["className", "class"],
    ["htmlFor", "for"],
    ["httpEquiv", "http-equiv"],
  ].forEach(function (a) {
    var b = a[0];
    z[b] = new v(b, 1, false, a[1], null, false, false);
  });
  ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
    z[a] = new v(a, 2, false, a.toLowerCase(), null, false, false);
  });
  [
    "autoReverse",
    "externalResourcesRequired",
    "focusable",
    "preserveAlpha",
  ].forEach(function (a) {
    z[a] = new v(a, 2, false, a, null, false, false);
  });
  "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope"
    .split(" ")
    .forEach(function (a) {
      z[a] = new v(a, 3, false, a.toLowerCase(), null, false, false);
    });
  ["checked", "multiple", "muted", "selected"].forEach(function (a) {
    z[a] = new v(a, 3, true, a, null, false, false);
  });
  ["capture", "download"].forEach(function (a) {
    z[a] = new v(a, 4, false, a, null, false, false);
  });
  ["cols", "rows", "size", "span"].forEach(function (a) {
    z[a] = new v(a, 6, false, a, null, false, false);
  });
  ["rowSpan", "start"].forEach(function (a) {
    z[a] = new v(a, 5, false, a.toLowerCase(), null, false, false);
  });
  var ra = /[\-:]([a-z])/g;
  function sa(a) {
    return a[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height"
    .split(" ")
    .forEach(function (a) {
      var b = a.replace(ra, sa);
      z[b] = new v(b, 1, false, a, null, false, false);
    });
  "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type"
    .split(" ")
    .forEach(function (a) {
      var b = a.replace(ra, sa);
      z[b] = new v(
        b,
        1,
        false,
        a,
        "http://www.w3.org/1999/xlink",
        false,
        false
      );
    });
  ["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
    var b = a.replace(ra, sa);
    z[b] = new v(
      b,
      1,
      false,
      a,
      "http://www.w3.org/XML/1998/namespace",
      false,
      false
    );
  });
  ["tabIndex", "crossOrigin"].forEach(function (a) {
    z[a] = new v(a, 1, false, a.toLowerCase(), null, false, false);
  });
  z.xlinkHref = new v(
    "xlinkHref",
    1,
    false,
    "xlink:href",
    "http://www.w3.org/1999/xlink",
    true,
    false
  );
  ["src", "href", "action", "formAction"].forEach(function (a) {
    z[a] = new v(a, 1, false, a.toLowerCase(), null, true, true);
  });
  function ta(a, b, c, d) {
    var e = z.hasOwnProperty(b) ? z[b] : null;
    if (
      null !== e
        ? 0 !== e.type
        : d ||
          !(2 < b.length) ||
          ("o" !== b[0] && "O" !== b[0]) ||
          ("n" !== b[1] && "N" !== b[1])
    )
      qa(b, c, e, d) && (c = null),
        d || null === e
          ? oa(b) &&
            (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c))
          : e.mustUseProperty
          ? (a[e.propertyName] = null === c ? (3 === e.type ? false : "") : c)
          : ((b = e.attributeName),
            (d = e.attributeNamespace),
            null === c
              ? a.removeAttribute(b)
              : ((e = e.type),
                (c = 3 === e || (4 === e && true === c) ? "" : "" + c),
                d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
  }
  var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    va = Symbol.for("react.element"),
    wa = Symbol.for("react.portal"),
    ya = Symbol.for("react.fragment"),
    za = Symbol.for("react.strict_mode"),
    Aa = Symbol.for("react.profiler"),
    Ba = Symbol.for("react.provider"),
    Ca = Symbol.for("react.context"),
    Da = Symbol.for("react.forward_ref"),
    Ea = Symbol.for("react.suspense"),
    Fa = Symbol.for("react.suspense_list"),
    Ga = Symbol.for("react.memo"),
    Ha = Symbol.for("react.lazy");
  var Ia = Symbol.for("react.offscreen");
  var Ja = Symbol.iterator;
  function Ka(a) {
    if (null === a || "object" !== typeof a) return null;
    a = (Ja && a[Ja]) || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }
  var A = Object.assign,
    La;
  function Ma(a) {
    if (void 0 === La)
      try {
        throw Error();
      } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        La = (b && b[1]) || "";
      }
    return "\n" + La + a;
  }
  var Na = false;
  function Oa(a, b) {
    if (!a || Na) return "";
    Na = true;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (b)
        if (
          ((b = function () {
            throw Error();
          }),
          Object.defineProperty(b.prototype, "props", {
            set: function () {
              throw Error();
            },
          }),
          "object" === typeof Reflect && Reflect.construct)
        ) {
          try {
            Reflect.construct(b, []);
          } catch (l) {
            var d = l;
          }
          Reflect.construct(a, [], b);
        } else {
          try {
            b.call();
          } catch (l) {
            d = l;
          }
          a.call(b.prototype);
        }
      else {
        try {
          throw Error();
        } catch (l) {
          d = l;
        }
        a();
      }
    } catch (l) {
      if (l && d && "string" === typeof l.stack) {
        for (
          var e = l.stack.split("\n"),
            f = d.stack.split("\n"),
            g = e.length - 1,
            h = f.length - 1;
          1 <= g && 0 <= h && e[g] !== f[h];

        )
          h--;
        for (; 1 <= g && 0 <= h; g--, h--)
          if (e[g] !== f[h]) {
            if (1 !== g || 1 !== h) {
              do
                if ((g--, h--, 0 > h || e[g] !== f[h])) {
                  var k = "\n" + e[g].replace(" at new ", " at ");
                  a.displayName &&
                    k.includes("<anonymous>") &&
                    (k = k.replace("<anonymous>", a.displayName));
                  return k;
                }
              while (1 <= g && 0 <= h);
            }
            break;
          }
      }
    } finally {
      (Na = false), (Error.prepareStackTrace = c);
    }
    return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
  }
  function Pa(a) {
    switch (a.tag) {
      case 5:
        return Ma(a.type);
      case 16:
        return Ma("Lazy");
      case 13:
        return Ma("Suspense");
      case 19:
        return Ma("SuspenseList");
      case 0:
      case 2:
      case 15:
        return (a = Oa(a.type, false)), a;
      case 11:
        return (a = Oa(a.type.render, false)), a;
      case 1:
        return (a = Oa(a.type, true)), a;
      default:
        return "";
    }
  }
  function Qa(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;
    switch (a) {
      case ya:
        return "Fragment";
      case wa:
        return "Portal";
      case Aa:
        return "Profiler";
      case za:
        return "StrictMode";
      case Ea:
        return "Suspense";
      case Fa:
        return "SuspenseList";
    }
    if ("object" === typeof a)
      switch (a.$$typeof) {
        case Ca:
          return (a.displayName || "Context") + ".Consumer";
        case Ba:
          return (a._context.displayName || "Context") + ".Provider";
        case Da:
          var b = a.render;
          a = a.displayName;
          a ||
            ((a = b.displayName || b.name || ""),
            (a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef"));
          return a;
        case Ga:
          return (
            (b = a.displayName || null), null !== b ? b : Qa(a.type) || "Memo"
          );
        case Ha:
          b = a._payload;
          a = a._init;
          try {
            return Qa(a(b));
          } catch (c) {}
      }
    return null;
  }
  function Ra(a) {
    var b = a.type;
    switch (a.tag) {
      case 24:
        return "Cache";
      case 9:
        return (b.displayName || "Context") + ".Consumer";
      case 10:
        return (b._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return (
          (a = b.render),
          (a = a.displayName || a.name || ""),
          b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef")
        );
      case 7:
        return "Fragment";
      case 5:
        return b;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return Qa(b);
      case 8:
        return b === za ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" === typeof b) return b.displayName || b.name || null;
        if ("string" === typeof b) return b;
    }
    return null;
  }
  function Sa(a) {
    switch (typeof a) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return a;
      case "object":
        return a;
      default:
        return "";
    }
  }
  function Ta(a) {
    var b = a.type;
    return (
      (a = a.nodeName) &&
      "input" === a.toLowerCase() &&
      ("checkbox" === b || "radio" === b)
    );
  }
  function Ua(a) {
    var b = Ta(a) ? "checked" : "value",
      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
      d = "" + a[b];
    if (
      !a.hasOwnProperty(b) &&
      "undefined" !== typeof c &&
      "function" === typeof c.get &&
      "function" === typeof c.set
    ) {
      var e = c.get,
        f = c.set;
      Object.defineProperty(a, b, {
        configurable: true,
        get: function () {
          return e.call(this);
        },
        set: function (a) {
          d = "" + a;
          f.call(this, a);
        },
      });
      Object.defineProperty(a, b, { enumerable: c.enumerable });
      return {
        getValue: function () {
          return d;
        },
        setValue: function (a) {
          d = "" + a;
        },
        stopTracking: function () {
          a._valueTracker = null;
          delete a[b];
        },
      };
    }
  }
  function Va(a) {
    a._valueTracker || (a._valueTracker = Ua(a));
  }
  function Wa(a) {
    if (!a) return false;
    var b = a._valueTracker;
    if (!b) return true;
    var c = b.getValue();
    var d = "";
    a && (d = Ta(a) ? (a.checked ? "true" : "false") : a.value);
    a = d;
    return a !== c ? (b.setValue(a), true) : false;
  }
  function Xa(a) {
    a = a || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a) return null;
    try {
      return a.activeElement || a.body;
    } catch (b) {
      return a.body;
    }
  }
  function Ya(a, b) {
    var c = b.checked;
    return A({}, b, {
      defaultChecked: void 0,
      defaultValue: void 0,
      value: void 0,
      checked: null != c ? c : a._wrapperState.initialChecked,
    });
  }
  function Za(a, b) {
    var c = null == b.defaultValue ? "" : b.defaultValue,
      d = null != b.checked ? b.checked : b.defaultChecked;
    c = Sa(null != b.value ? b.value : c);
    a._wrapperState = {
      initialChecked: d,
      initialValue: c,
      controlled:
        "checkbox" === b.type || "radio" === b.type
          ? null != b.checked
          : null != b.value,
    };
  }
  function ab(a, b) {
    b = b.checked;
    null != b && ta(a, "checked", b, false);
  }
  function bb(a, b) {
    ab(a, b);
    var c = Sa(b.value),
      d = b.type;
    if (null != c)
      if ("number" === d) {
        if ((0 === c && "" === a.value) || a.value != c) a.value = "" + c;
      } else a.value !== "" + c && (a.value = "" + c);
    else if ("submit" === d || "reset" === d) {
      a.removeAttribute("value");
      return;
    }
    b.hasOwnProperty("value")
      ? cb(a, b.type, c)
      : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
    null == b.checked &&
      null != b.defaultChecked &&
      (a.defaultChecked = !!b.defaultChecked);
  }
  function db(a, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
      var d = b.type;
      if (
        !(
          ("submit" !== d && "reset" !== d) ||
          (void 0 !== b.value && null !== b.value)
        )
      )
        return;
      b = "" + a._wrapperState.initialValue;
      c || b === a.value || (a.value = b);
      a.defaultValue = b;
    }
    c = a.name;
    "" !== c && (a.name = "");
    a.defaultChecked = !!a._wrapperState.initialChecked;
    "" !== c && (a.name = c);
  }
  function cb(a, b, c) {
    if ("number" !== b || Xa(a.ownerDocument) !== a)
      null == c
        ? (a.defaultValue = "" + a._wrapperState.initialValue)
        : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
  }
  var eb = Array.isArray;
  function fb(a, b, c, d) {
    a = a.options;
    if (b) {
      b = {};
      for (var e = 0; e < c.length; e++) b["$" + c[e]] = true;
      for (c = 0; c < a.length; c++)
        (e = b.hasOwnProperty("$" + a[c].value)),
          a[c].selected !== e && (a[c].selected = e),
          e && d && (a[c].defaultSelected = true);
    } else {
      c = "" + Sa(c);
      b = null;
      for (e = 0; e < a.length; e++) {
        if (a[e].value === c) {
          a[e].selected = true;
          d && (a[e].defaultSelected = true);
          return;
        }
        null !== b || a[e].disabled || (b = a[e]);
      }
      null !== b && (b.selected = true);
    }
  }
  function gb(a, b) {
    if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
    return A({}, b, {
      value: void 0,
      defaultValue: void 0,
      children: "" + a._wrapperState.initialValue,
    });
  }
  function hb(a, b) {
    var c = b.value;
    if (null == c) {
      c = b.children;
      b = b.defaultValue;
      if (null != c) {
        if (null != b) throw Error(p(92));
        if (eb(c)) {
          if (1 < c.length) throw Error(p(93));
          c = c[0];
        }
        b = c;
      }
      null == b && (b = "");
      c = b;
    }
    a._wrapperState = { initialValue: Sa(c) };
  }
  function ib(a, b) {
    var c = Sa(b.value),
      d = Sa(b.defaultValue);
    null != c &&
      ((c = "" + c),
      c !== a.value && (a.value = c),
      null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
    null != d && (a.defaultValue = "" + d);
  }
  function jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue &&
      "" !== b &&
      null !== b &&
      (a.value = b);
  }
  function kb(a) {
    switch (a) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function lb(a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a
      ? kb(b)
      : "http://www.w3.org/2000/svg" === a && "foreignObject" === b
      ? "http://www.w3.org/1999/xhtml"
      : a;
  }
  var mb,
    nb = (function (a) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction
        ? function (b, c, d, e) {
            MSApp.execUnsafeLocalFunction(function () {
              return a(b, c, d, e);
            });
          }
        : a;
    })(function (a, b) {
      if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a)
        a.innerHTML = b;
      else {
        mb = mb || document.createElement("div");
        mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for (b = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
        for (; b.firstChild; ) a.appendChild(b.firstChild);
      }
    });
  function ob(a, b) {
    if (b) {
      var c = a.firstChild;
      if (c && c === a.lastChild && 3 === c.nodeType) {
        c.nodeValue = b;
        return;
      }
    }
    a.textContent = b;
  }
  var pb = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true,
    },
    qb = ["Webkit", "ms", "Moz", "O"];
  Object.keys(pb).forEach(function (a) {
    qb.forEach(function (b) {
      b = b + a.charAt(0).toUpperCase() + a.substring(1);
      pb[b] = pb[a];
    });
  });
  function rb(a, b, c) {
    return null == b || "boolean" === typeof b || "" === b
      ? ""
      : c || "number" !== typeof b || 0 === b || (pb.hasOwnProperty(a) && pb[a])
      ? ("" + b).trim()
      : b + "px";
  }
  function sb(a, b) {
    a = a.style;
    for (var c in b)
      if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"),
          e = rb(c, b[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : (a[c] = e);
      }
  }
  var tb = A(
    { menuitem: true },
    {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true,
    }
  );
  function ub(a, b) {
    if (b) {
      if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML))
        throw Error(p(137, a));
      if (null != b.dangerouslySetInnerHTML) {
        if (null != b.children) throw Error(p(60));
        if (
          "object" !== typeof b.dangerouslySetInnerHTML ||
          !("__html" in b.dangerouslySetInnerHTML)
        )
          throw Error(p(61));
      }
      if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
    }
  }
  function vb(a, b) {
    if (-1 === a.indexOf("-")) return "string" === typeof b.is;
    switch (a) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  var wb = null;
  function xb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
  }
  var yb = null,
    zb = null,
    Ab = null;
  function Bb(a) {
    if ((a = Cb(a))) {
      if ("function" !== typeof yb) throw Error(p(280));
      var b = a.stateNode;
      b && ((b = Db(b)), yb(a.stateNode, a.type, b));
    }
  }
  function Eb(a) {
    zb ? (Ab ? Ab.push(a) : (Ab = [a])) : (zb = a);
  }
  function Fb() {
    if (zb) {
      var a = zb,
        b = Ab;
      Ab = zb = null;
      Bb(a);
      if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
    }
  }
  function Gb(a, b) {
    return a(b);
  }
  function Hb() {}
  var Ib = false;
  function Jb(a, b, c) {
    if (Ib) return a(b, c);
    Ib = true;
    try {
      return Gb(a, b, c);
    } finally {
      if (((Ib = false), null !== zb || null !== Ab)) Hb(), Fb();
    }
  }
  function Kb(a, b) {
    var c = a.stateNode;
    if (null === c) return null;
    var d = Db(c);
    if (null === d) return null;
    c = d[b];
    a: switch (b) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d = !d.disabled) ||
          ((a = a.type),
          (d = !(
            "button" === a ||
            "input" === a ||
            "select" === a ||
            "textarea" === a
          )));
        a = !d;
        break a;
      default:
        a = false;
    }
    if (a) return null;
    if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
    return c;
  }
  var Lb = false;
  if (ia)
    try {
      var Mb = {};
      Object.defineProperty(Mb, "passive", {
        get: function () {
          Lb = !0;
        },
      });
      window.addEventListener("test", Mb, Mb);
      window.removeEventListener("test", Mb, Mb);
    } catch (a) {
      Lb = false;
    }
  function Nb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
      b.apply(c, l);
    } catch (m) {
      this.onError(m);
    }
  }
  var Ob = false,
    Pb = null,
    Qb = false,
    Rb = null,
    Sb = {
      onError: function (a) {
        Ob = true;
        Pb = a;
      },
    };
  function Tb(a, b, c, d, e, f, g, h, k) {
    Ob = false;
    Pb = null;
    Nb.apply(Sb, arguments);
  }
  function Ub(a, b, c, d, e, f, g, h, k) {
    Tb.apply(this, arguments);
    if (Ob) {
      if (Ob) {
        var l = Pb;
        Ob = false;
        Pb = null;
      } else throw Error(p(198));
      Qb || ((Qb = true), (Rb = l));
    }
  }
  function Vb(a) {
    var b = a,
      c = a;
    if (a.alternate) for (; b.return; ) b = b.return;
    else {
      a = b;
      do (b = a), 0 !== (b.flags & 4098) && (c = b.return), (a = b.return);
      while (a);
    }
    return 3 === b.tag ? c : null;
  }
  function Wb(a) {
    if (13 === a.tag) {
      var b = a.memoizedState;
      null === b && ((a = a.alternate), null !== a && (b = a.memoizedState));
      if (null !== b) return b.dehydrated;
    }
    return null;
  }
  function Xb(a) {
    if (Vb(a) !== a) throw Error(p(188));
  }
  function Yb(a) {
    var b = a.alternate;
    if (!b) {
      b = Vb(a);
      if (null === b) throw Error(p(188));
      return b !== a ? null : a;
    }
    for (var c = a, d = b; ; ) {
      var e = c.return;
      if (null === e) break;
      var f = e.alternate;
      if (null === f) {
        d = e.return;
        if (null !== d) {
          c = d;
          continue;
        }
        break;
      }
      if (e.child === f.child) {
        for (f = e.child; f; ) {
          if (f === c) return Xb(e), a;
          if (f === d) return Xb(e), b;
          f = f.sibling;
        }
        throw Error(p(188));
      }
      if (c.return !== d.return) (c = e), (d = f);
      else {
        for (var g = false, h = e.child; h; ) {
          if (h === c) {
            g = true;
            c = e;
            d = f;
            break;
          }
          if (h === d) {
            g = true;
            d = e;
            c = f;
            break;
          }
          h = h.sibling;
        }
        if (!g) {
          for (h = f.child; h; ) {
            if (h === c) {
              g = true;
              c = f;
              d = e;
              break;
            }
            if (h === d) {
              g = true;
              d = f;
              c = e;
              break;
            }
            h = h.sibling;
          }
          if (!g) throw Error(p(189));
        }
      }
      if (c.alternate !== d) throw Error(p(190));
    }
    if (3 !== c.tag) throw Error(p(188));
    return c.stateNode.current === c ? a : b;
  }
  function Zb(a) {
    a = Yb(a);
    return null !== a ? $b(a) : null;
  }
  function $b(a) {
    if (5 === a.tag || 6 === a.tag) return a;
    for (a = a.child; null !== a; ) {
      var b = $b(a);
      if (null !== b) return b;
      a = a.sibling;
    }
    return null;
  }
  var ac = ca.unstable_scheduleCallback,
    bc = ca.unstable_cancelCallback,
    cc = ca.unstable_shouldYield,
    dc = ca.unstable_requestPaint,
    B = ca.unstable_now,
    ec = ca.unstable_getCurrentPriorityLevel,
    fc = ca.unstable_ImmediatePriority,
    gc = ca.unstable_UserBlockingPriority,
    hc = ca.unstable_NormalPriority,
    ic = ca.unstable_LowPriority,
    jc = ca.unstable_IdlePriority,
    kc = null,
    lc = null;
  function mc(a) {
    if (lc && "function" === typeof lc.onCommitFiberRoot)
      try {
        lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
      } catch (b) {}
  }
  var oc = Math.clz32 ? Math.clz32 : nc,
    pc = Math.log,
    qc = Math.LN2;
  function nc(a) {
    a >>>= 0;
    return 0 === a ? 32 : (31 - ((pc(a) / qc) | 0)) | 0;
  }
  var rc = 64,
    sc = 4194304;
  function tc(a) {
    switch (a & -a) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return a & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return a & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return a;
    }
  }
  function uc(a, b) {
    var c = a.pendingLanes;
    if (0 === c) return 0;
    var d = 0,
      e = a.suspendedLanes,
      f = a.pingedLanes,
      g = c & 268435455;
    if (0 !== g) {
      var h = g & ~e;
      0 !== h ? (d = tc(h)) : ((f &= g), 0 !== f && (d = tc(f)));
    } else (g = c & ~e), 0 !== g ? (d = tc(g)) : 0 !== f && (d = tc(f));
    if (0 === d) return 0;
    if (
      0 !== b &&
      b !== d &&
      0 === (b & e) &&
      ((e = d & -d), (f = b & -b), e >= f || (16 === e && 0 !== (f & 4194240)))
    )
      return b;
    0 !== (d & 4) && (d |= c & 16);
    b = a.entangledLanes;
    if (0 !== b)
      for (a = a.entanglements, b &= d; 0 < b; )
        (c = 31 - oc(b)), (e = 1 << c), (d |= a[c]), (b &= ~e);
    return d;
  }
  function vc(a, b) {
    switch (a) {
      case 1:
      case 2:
      case 4:
        return b + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return b + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function wc(a, b) {
    for (
      var c = a.suspendedLanes,
        d = a.pingedLanes,
        e = a.expirationTimes,
        f = a.pendingLanes;
      0 < f;

    ) {
      var g = 31 - oc(f),
        h = 1 << g,
        k = e[g];
      if (-1 === k) {
        if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
      } else k <= b && (a.expiredLanes |= h);
      f &= ~h;
    }
  }
  function xc(a) {
    a = a.pendingLanes & -1073741825;
    return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
  }
  function yc() {
    var a = rc;
    rc <<= 1;
    0 === (rc & 4194240) && (rc = 64);
    return a;
  }
  function zc(a) {
    for (var b = [], c = 0; 31 > c; c++) b.push(a);
    return b;
  }
  function Ac(a, b, c) {
    a.pendingLanes |= b;
    536870912 !== b && ((a.suspendedLanes = 0), (a.pingedLanes = 0));
    a = a.eventTimes;
    b = 31 - oc(b);
    a[b] = c;
  }
  function Bc(a, b) {
    var c = a.pendingLanes & ~b;
    a.pendingLanes = b;
    a.suspendedLanes = 0;
    a.pingedLanes = 0;
    a.expiredLanes &= b;
    a.mutableReadLanes &= b;
    a.entangledLanes &= b;
    b = a.entanglements;
    var d = a.eventTimes;
    for (a = a.expirationTimes; 0 < c; ) {
      var e = 31 - oc(c),
        f = 1 << e;
      b[e] = 0;
      d[e] = -1;
      a[e] = -1;
      c &= ~f;
    }
  }
  function Cc(a, b) {
    var c = (a.entangledLanes |= b);
    for (a = a.entanglements; c; ) {
      var d = 31 - oc(c),
        e = 1 << d;
      (e & b) | (a[d] & b) && (a[d] |= b);
      c &= ~e;
    }
  }
  var C = 0;
  function Dc(a) {
    a &= -a;
    return 1 < a ? (4 < a ? (0 !== (a & 268435455) ? 16 : 536870912) : 4) : 1;
  }
  var Ec,
    Fc,
    Gc,
    Hc,
    Ic,
    Jc = false,
    Kc = [],
    Lc = null,
    Mc = null,
    Nc = null,
    Oc = new Map(),
    Pc = new Map(),
    Qc = [],
    Rc =
      "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(
        " "
      );
  function Sc(a, b) {
    switch (a) {
      case "focusin":
      case "focusout":
        Lc = null;
        break;
      case "dragenter":
      case "dragleave":
        Mc = null;
        break;
      case "mouseover":
      case "mouseout":
        Nc = null;
        break;
      case "pointerover":
      case "pointerout":
        Oc.delete(b.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        Pc.delete(b.pointerId);
    }
  }
  function Tc(a, b, c, d, e, f) {
    if (null === a || a.nativeEvent !== f)
      return (
        (a = {
          blockedOn: b,
          domEventName: c,
          eventSystemFlags: d,
          nativeEvent: f,
          targetContainers: [e],
        }),
        null !== b && ((b = Cb(b)), null !== b && Fc(b)),
        a
      );
    a.eventSystemFlags |= d;
    b = a.targetContainers;
    null !== e && -1 === b.indexOf(e) && b.push(e);
    return a;
  }
  function Uc(a, b, c, d, e) {
    switch (b) {
      case "focusin":
        return (Lc = Tc(Lc, a, b, c, d, e)), true;
      case "dragenter":
        return (Mc = Tc(Mc, a, b, c, d, e)), true;
      case "mouseover":
        return (Nc = Tc(Nc, a, b, c, d, e)), true;
      case "pointerover":
        var f = e.pointerId;
        Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
        return true;
      case "gotpointercapture":
        return (
          (f = e.pointerId),
          Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)),
          true
        );
    }
    return false;
  }
  function Vc(a) {
    var b = Wc(a.target);
    if (null !== b) {
      var c = Vb(b);
      if (null !== c)
        if (((b = c.tag), 13 === b)) {
          if (((b = Wb(c)), null !== b)) {
            a.blockedOn = b;
            Ic(a.priority, function () {
              Gc(c);
            });
            return;
          }
        } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
          a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
          return;
        }
    }
    a.blockedOn = null;
  }
  function Xc(a) {
    if (null !== a.blockedOn) return false;
    for (var b = a.targetContainers; 0 < b.length; ) {
      var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
      if (null === c) {
        c = a.nativeEvent;
        var d = new c.constructor(c.type, c);
        wb = d;
        c.target.dispatchEvent(d);
        wb = null;
      } else return (b = Cb(c)), null !== b && Fc(b), (a.blockedOn = c), false;
      b.shift();
    }
    return true;
  }
  function Zc(a, b, c) {
    Xc(a) && c.delete(b);
  }
  function $c() {
    Jc = false;
    null !== Lc && Xc(Lc) && (Lc = null);
    null !== Mc && Xc(Mc) && (Mc = null);
    null !== Nc && Xc(Nc) && (Nc = null);
    Oc.forEach(Zc);
    Pc.forEach(Zc);
  }
  function ad(a, b) {
    a.blockedOn === b &&
      ((a.blockedOn = null),
      Jc ||
        ((Jc = true),
        ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
  }
  function bd(a) {
    function b(b) {
      return ad(b, a);
    }
    if (0 < Kc.length) {
      ad(Kc[0], a);
      for (var c = 1; c < Kc.length; c++) {
        var d = Kc[c];
        d.blockedOn === a && (d.blockedOn = null);
      }
    }
    null !== Lc && ad(Lc, a);
    null !== Mc && ad(Mc, a);
    null !== Nc && ad(Nc, a);
    Oc.forEach(b);
    Pc.forEach(b);
    for (c = 0; c < Qc.length; c++)
      (d = Qc[c]), d.blockedOn === a && (d.blockedOn = null);
    for (; 0 < Qc.length && ((c = Qc[0]), null === c.blockedOn); )
      Vc(c), null === c.blockedOn && Qc.shift();
  }
  var cd = ua.ReactCurrentBatchConfig,
    dd = true;
  function ed(a, b, c, d) {
    var e = C,
      f = cd.transition;
    cd.transition = null;
    try {
      (C = 1), fd(a, b, c, d);
    } finally {
      (C = e), (cd.transition = f);
    }
  }
  function gd(a, b, c, d) {
    var e = C,
      f = cd.transition;
    cd.transition = null;
    try {
      (C = 4), fd(a, b, c, d);
    } finally {
      (C = e), (cd.transition = f);
    }
  }
  function fd(a, b, c, d) {
    if (dd) {
      var e = Yc(a, b, c, d);
      if (null === e) hd(a, b, d, id, c), Sc(a, d);
      else if (Uc(e, a, b, c, d)) d.stopPropagation();
      else if ((Sc(a, d), b & 4 && -1 < Rc.indexOf(a))) {
        for (; null !== e; ) {
          var f = Cb(e);
          null !== f && Ec(f);
          f = Yc(a, b, c, d);
          null === f && hd(a, b, d, id, c);
          if (f === e) break;
          e = f;
        }
        null !== e && d.stopPropagation();
      } else hd(a, b, d, null, c);
    }
  }
  var id = null;
  function Yc(a, b, c, d) {
    id = null;
    a = xb(d);
    a = Wc(a);
    if (null !== a)
      if (((b = Vb(a)), null === b)) a = null;
      else if (((c = b.tag), 13 === c)) {
        a = Wb(b);
        if (null !== a) return a;
        a = null;
      } else if (3 === c) {
        if (b.stateNode.current.memoizedState.isDehydrated)
          return 3 === b.tag ? b.stateNode.containerInfo : null;
        a = null;
      } else b !== a && (a = null);
    id = a;
    return null;
  }
  function jd(a) {
    switch (a) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
        switch (ec()) {
          case fc:
            return 1;
          case gc:
            return 4;
          case hc:
          case ic:
            return 16;
          case jc:
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  var kd = null,
    ld = null,
    md = null;
  function nd() {
    if (md) return md;
    var a,
      b = ld,
      c = b.length,
      d,
      e = "value" in kd ? kd.value : kd.textContent,
      f = e.length;
    for (a = 0; a < c && b[a] === e[a]; a++);
    var g = c - a;
    for (d = 1; d <= g && b[c - d] === e[f - d]; d++);
    return (md = e.slice(a, 1 < d ? 1 - d : void 0));
  }
  function od(a) {
    var b = a.keyCode;
    "charCode" in a
      ? ((a = a.charCode), 0 === a && 13 === b && (a = 13))
      : (a = b);
    10 === a && (a = 13);
    return 32 <= a || 13 === a ? a : 0;
  }
  function pd() {
    return true;
  }
  function qd() {
    return false;
  }
  function rd(a) {
    function b(b, d, e, f, g) {
      this._reactName = b;
      this._targetInst = e;
      this.type = d;
      this.nativeEvent = f;
      this.target = g;
      this.currentTarget = null;
      for (var c in a)
        a.hasOwnProperty(c) && ((b = a[c]), (this[c] = b ? b(f) : f[c]));
      this.isDefaultPrevented = (
        null != f.defaultPrevented
          ? f.defaultPrevented
          : false === f.returnValue
      )
        ? pd
        : qd;
      this.isPropagationStopped = qd;
      return this;
    }
    A(b.prototype, {
      preventDefault: function () {
        this.defaultPrevented = true;
        var a = this.nativeEvent;
        a &&
          (a.preventDefault
            ? a.preventDefault()
            : "unknown" !== typeof a.returnValue && (a.returnValue = false),
          (this.isDefaultPrevented = pd));
      },
      stopPropagation: function () {
        var a = this.nativeEvent;
        a &&
          (a.stopPropagation
            ? a.stopPropagation()
            : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = true),
          (this.isPropagationStopped = pd));
      },
      persist: function () {},
      isPersistent: pd,
    });
    return b;
  }
  var sd = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function (a) {
        return a.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0,
    },
    td = rd(sd),
    ud = A({}, sd, { view: 0, detail: 0 }),
    vd = rd(ud),
    wd,
    xd,
    yd,
    Ad = A({}, ud, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: zd,
      button: 0,
      buttons: 0,
      relatedTarget: function (a) {
        return void 0 === a.relatedTarget
          ? a.fromElement === a.srcElement
            ? a.toElement
            : a.fromElement
          : a.relatedTarget;
      },
      movementX: function (a) {
        if ("movementX" in a) return a.movementX;
        a !== yd &&
          (yd && "mousemove" === a.type
            ? ((wd = a.screenX - yd.screenX), (xd = a.screenY - yd.screenY))
            : (xd = wd = 0),
          (yd = a));
        return wd;
      },
      movementY: function (a) {
        return "movementY" in a ? a.movementY : xd;
      },
    }),
    Bd = rd(Ad),
    Cd = A({}, Ad, { dataTransfer: 0 }),
    Dd = rd(Cd),
    Ed = A({}, ud, { relatedTarget: 0 }),
    Fd = rd(Ed),
    Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }),
    Hd = rd(Gd),
    Id = A({}, sd, {
      clipboardData: function (a) {
        return "clipboardData" in a ? a.clipboardData : window.clipboardData;
      },
    }),
    Jd = rd(Id),
    Kd = A({}, sd, { data: 0 }),
    Ld = rd(Kd),
    Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified",
    },
    Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta",
    },
    Od = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey",
    };
  function Pd(a) {
    var b = this.nativeEvent;
    return b.getModifierState
      ? b.getModifierState(a)
      : (a = Od[a])
      ? !!b[a]
      : false;
  }
  function zd() {
    return Pd;
  }
  var Qd = A({}, ud, {
      key: function (a) {
        if (a.key) {
          var b = Md[a.key] || a.key;
          if ("Unidentified" !== b) return b;
        }
        return "keypress" === a.type
          ? ((a = od(a)), 13 === a ? "Enter" : String.fromCharCode(a))
          : "keydown" === a.type || "keyup" === a.type
          ? Nd[a.keyCode] || "Unidentified"
          : "";
      },
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: zd,
      charCode: function (a) {
        return "keypress" === a.type ? od(a) : 0;
      },
      keyCode: function (a) {
        return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
      },
      which: function (a) {
        return "keypress" === a.type
          ? od(a)
          : "keydown" === a.type || "keyup" === a.type
          ? a.keyCode
          : 0;
      },
    }),
    Rd = rd(Qd),
    Sd = A({}, Ad, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0,
    }),
    Td = rd(Sd),
    Ud = A({}, ud, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: zd,
    }),
    Vd = rd(Ud),
    Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }),
    Xd = rd(Wd),
    Yd = A({}, Ad, {
      deltaX: function (a) {
        return "deltaX" in a
          ? a.deltaX
          : "wheelDeltaX" in a
          ? -a.wheelDeltaX
          : 0;
      },
      deltaY: function (a) {
        return "deltaY" in a
          ? a.deltaY
          : "wheelDeltaY" in a
          ? -a.wheelDeltaY
          : "wheelDelta" in a
          ? -a.wheelDelta
          : 0;
      },
      deltaZ: 0,
      deltaMode: 0,
    }),
    Zd = rd(Yd),
    $d = [9, 13, 27, 32],
    ae = ia && "CompositionEvent" in window,
    be = null;
  ia && "documentMode" in document && (be = document.documentMode);
  var ce = ia && "TextEvent" in window && !be,
    de = ia && (!ae || (be && 8 < be && 11 >= be)),
    ee = String.fromCharCode(32),
    fe = false;
  function ge(a, b) {
    switch (a) {
      case "keyup":
        return -1 !== $d.indexOf(b.keyCode);
      case "keydown":
        return 229 !== b.keyCode;
      case "keypress":
      case "mousedown":
      case "focusout":
        return true;
      default:
        return false;
    }
  }
  function he(a) {
    a = a.detail;
    return "object" === typeof a && "data" in a ? a.data : null;
  }
  var ie = false;
  function je(a, b) {
    switch (a) {
      case "compositionend":
        return he(b);
      case "keypress":
        if (32 !== b.which) return null;
        fe = true;
        return ee;
      case "textInput":
        return (a = b.data), a === ee && fe ? null : a;
      default:
        return null;
    }
  }
  function ke(a, b) {
    if (ie)
      return "compositionend" === a || (!ae && ge(a, b))
        ? ((a = nd()), (md = ld = kd = null), (ie = false), a)
        : null;
    switch (a) {
      case "paste":
        return null;
      case "keypress":
        if (!(b.ctrlKey || b.altKey || b.metaKey) || (b.ctrlKey && b.altKey)) {
          if (b.char && 1 < b.char.length) return b.char;
          if (b.which) return String.fromCharCode(b.which);
        }
        return null;
      case "compositionend":
        return de && "ko" !== b.locale ? null : b.data;
      default:
        return null;
    }
  }
  var le = {
    color: true,
    date: true,
    datetime: true,
    "datetime-local": true,
    email: true,
    month: true,
    number: true,
    password: true,
    range: true,
    search: true,
    tel: true,
    text: true,
    time: true,
    url: true,
    week: true,
  };
  function me(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return "input" === b ? !!le[a.type] : "textarea" === b ? true : false;
  }
  function ne(a, b, c, d) {
    Eb(d);
    b = oe(b, "onChange");
    0 < b.length &&
      ((c = new td("onChange", "change", null, c, d)),
      a.push({ event: c, listeners: b }));
  }
  var pe = null,
    qe = null;
  function re(a) {
    se(a, 0);
  }
  function te(a) {
    var b = ue(a);
    if (Wa(b)) return a;
  }
  function ve(a, b) {
    if ("change" === a) return b;
  }
  var we = false;
  if (ia) {
    var xe;
    if (ia) {
      var ye = "oninput" in document;
      if (!ye) {
        var ze = document.createElement("div");
        ze.setAttribute("oninput", "return;");
        ye = "function" === typeof ze.oninput;
      }
      xe = ye;
    } else xe = false;
    we = xe && (!document.documentMode || 9 < document.documentMode);
  }
  function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be), (qe = pe = null));
  }
  function Be(a) {
    if ("value" === a.propertyName && te(qe)) {
      var b = [];
      ne(b, qe, a, xb(a));
      Jb(re, b);
    }
  }
  function Ce(a, b, c) {
    "focusin" === a
      ? (Ae(), (pe = b), (qe = c), pe.attachEvent("onpropertychange", Be))
      : "focusout" === a && Ae();
  }
  function De(a) {
    if ("selectionchange" === a || "keyup" === a || "keydown" === a)
      return te(qe);
  }
  function Ee(a, b) {
    if ("click" === a) return te(b);
  }
  function Fe(a, b) {
    if ("input" === a || "change" === a) return te(b);
  }
  function Ge(a, b) {
    return (a === b && (0 !== a || 1 / a === 1 / b)) || (a !== a && b !== b);
  }
  var He = "function" === typeof Object.is ? Object.is : Ge;
  function Ie(a, b) {
    if (He(a, b)) return true;
    if (
      "object" !== typeof a ||
      null === a ||
      "object" !== typeof b ||
      null === b
    )
      return false;
    var c = Object.keys(a),
      d = Object.keys(b);
    if (c.length !== d.length) return false;
    for (d = 0; d < c.length; d++) {
      var e = c[d];
      if (!ja.call(b, e) || !He(a[e], b[e])) return false;
    }
    return true;
  }
  function Je(a) {
    for (; a && a.firstChild; ) a = a.firstChild;
    return a;
  }
  function Ke(a, b) {
    var c = Je(a);
    a = 0;
    for (var d; c; ) {
      if (3 === c.nodeType) {
        d = a + c.textContent.length;
        if (a <= b && d >= b) return { node: c, offset: b - a };
        a = d;
      }
      a: {
        for (; c; ) {
          if (c.nextSibling) {
            c = c.nextSibling;
            break a;
          }
          c = c.parentNode;
        }
        c = void 0;
      }
      c = Je(c);
    }
  }
  function Le(a, b) {
    return a && b
      ? a === b
        ? true
        : a && 3 === a.nodeType
        ? false
        : b && 3 === b.nodeType
        ? Le(a, b.parentNode)
        : "contains" in a
        ? a.contains(b)
        : a.compareDocumentPosition
        ? !!(a.compareDocumentPosition(b) & 16)
        : false
      : false;
  }
  function Me() {
    for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
      try {
        var c = "string" === typeof b.contentWindow.location.href;
      } catch (d) {
        c = false;
      }
      if (c) a = b.contentWindow;
      else break;
      b = Xa(a.document);
    }
    return b;
  }
  function Ne(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return (
      b &&
      (("input" === b &&
        ("text" === a.type ||
          "search" === a.type ||
          "tel" === a.type ||
          "url" === a.type ||
          "password" === a.type)) ||
        "textarea" === b ||
        "true" === a.contentEditable)
    );
  }
  function Oe(a) {
    var b = Me(),
      c = a.focusedElem,
      d = a.selectionRange;
    if (
      b !== c &&
      c &&
      c.ownerDocument &&
      Le(c.ownerDocument.documentElement, c)
    ) {
      if (null !== d && Ne(c))
        if (
          ((b = d.start),
          (a = d.end),
          void 0 === a && (a = b),
          "selectionStart" in c)
        )
          (c.selectionStart = b),
            (c.selectionEnd = Math.min(a, c.value.length));
        else if (
          ((a = ((b = c.ownerDocument || document) && b.defaultView) || window),
          a.getSelection)
        ) {
          a = a.getSelection();
          var e = c.textContent.length,
            f = Math.min(d.start, e);
          d = void 0 === d.end ? f : Math.min(d.end, e);
          !a.extend && f > d && ((e = d), (d = f), (f = e));
          e = Ke(c, f);
          var g = Ke(c, d);
          e &&
            g &&
            (1 !== a.rangeCount ||
              a.anchorNode !== e.node ||
              a.anchorOffset !== e.offset ||
              a.focusNode !== g.node ||
              a.focusOffset !== g.offset) &&
            ((b = b.createRange()),
            b.setStart(e.node, e.offset),
            a.removeAllRanges(),
            f > d
              ? (a.addRange(b), a.extend(g.node, g.offset))
              : (b.setEnd(g.node, g.offset), a.addRange(b)));
        }
      b = [];
      for (a = c; (a = a.parentNode); )
        1 === a.nodeType &&
          b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
      "function" === typeof c.focus && c.focus();
      for (c = 0; c < b.length; c++)
        (a = b[c]),
          (a.element.scrollLeft = a.left),
          (a.element.scrollTop = a.top);
    }
  }
  var Pe = ia && "documentMode" in document && 11 >= document.documentMode,
    Qe = null,
    Re = null,
    Se = null,
    Te = false;
  function Ue(a, b, c) {
    var d =
      c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    Te ||
      null == Qe ||
      Qe !== Xa(d) ||
      ((d = Qe),
      "selectionStart" in d && Ne(d)
        ? (d = { start: d.selectionStart, end: d.selectionEnd })
        : ((d = (
            (d.ownerDocument && d.ownerDocument.defaultView) ||
            window
          ).getSelection()),
          (d = {
            anchorNode: d.anchorNode,
            anchorOffset: d.anchorOffset,
            focusNode: d.focusNode,
            focusOffset: d.focusOffset,
          })),
      (Se && Ie(Se, d)) ||
        ((Se = d),
        (d = oe(Re, "onSelect")),
        0 < d.length &&
          ((b = new td("onSelect", "select", null, b, c)),
          a.push({ event: b, listeners: d }),
          (b.target = Qe))));
  }
  function Ve(a, b) {
    var c = {};
    c[a.toLowerCase()] = b.toLowerCase();
    c["Webkit" + a] = "webkit" + b;
    c["Moz" + a] = "moz" + b;
    return c;
  }
  var We = {
      animationend: Ve("Animation", "AnimationEnd"),
      animationiteration: Ve("Animation", "AnimationIteration"),
      animationstart: Ve("Animation", "AnimationStart"),
      transitionend: Ve("Transition", "TransitionEnd"),
    },
    Xe = {},
    Ye = {};
  ia &&
    ((Ye = document.createElement("div").style),
    "AnimationEvent" in window ||
      (delete We.animationend.animation,
      delete We.animationiteration.animation,
      delete We.animationstart.animation),
    "TransitionEvent" in window || delete We.transitionend.transition);
  function Ze(a) {
    if (Xe[a]) return Xe[a];
    if (!We[a]) return a;
    var b = We[a],
      c;
    for (c in b) if (b.hasOwnProperty(c) && c in Ye) return (Xe[a] = b[c]);
    return a;
  }
  var $e = Ze("animationend"),
    af = Ze("animationiteration"),
    bf = Ze("animationstart"),
    cf = Ze("transitionend"),
    df = new Map(),
    ef =
      "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
        " "
      );
  function ff(a, b) {
    df.set(a, b);
    fa(b, [a]);
  }
  for (var gf = 0; gf < ef.length; gf++) {
    var hf = ef[gf],
      jf = hf.toLowerCase(),
      kf = hf[0].toUpperCase() + hf.slice(1);
    ff(jf, "on" + kf);
  }
  ff($e, "onAnimationEnd");
  ff(af, "onAnimationIteration");
  ff(bf, "onAnimationStart");
  ff("dblclick", "onDoubleClick");
  ff("focusin", "onFocus");
  ff("focusout", "onBlur");
  ff(cf, "onTransitionEnd");
  ha("onMouseEnter", ["mouseout", "mouseover"]);
  ha("onMouseLeave", ["mouseout", "mouseover"]);
  ha("onPointerEnter", ["pointerout", "pointerover"]);
  ha("onPointerLeave", ["pointerout", "pointerover"]);
  fa(
    "onChange",
    "change click focusin focusout input keydown keyup selectionchange".split(
      " "
    )
  );
  fa(
    "onSelect",
    "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
      " "
    )
  );
  fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
  fa(
    "onCompositionEnd",
    "compositionend focusout keydown keypress keyup mousedown".split(" ")
  );
  fa(
    "onCompositionStart",
    "compositionstart focusout keydown keypress keyup mousedown".split(" ")
  );
  fa(
    "onCompositionUpdate",
    "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
  );
  var lf =
      "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
        " "
      ),
    mf = new Set(
      "cancel close invalid load scroll toggle".split(" ").concat(lf)
    );
  function nf(a, b, c) {
    var d = a.type || "unknown-event";
    a.currentTarget = c;
    Ub(d, b, void 0, a);
    a.currentTarget = null;
  }
  function se(a, b) {
    b = 0 !== (b & 4);
    for (var c = 0; c < a.length; c++) {
      var d = a[c],
        e = d.event;
      d = d.listeners;
      a: {
        var f = void 0;
        if (b)
          for (var g = d.length - 1; 0 <= g; g--) {
            var h = d[g],
              k = h.instance,
              l = h.currentTarget;
            h = h.listener;
            if (k !== f && e.isPropagationStopped()) break a;
            nf(e, h, l);
            f = k;
          }
        else
          for (g = 0; g < d.length; g++) {
            h = d[g];
            k = h.instance;
            l = h.currentTarget;
            h = h.listener;
            if (k !== f && e.isPropagationStopped()) break a;
            nf(e, h, l);
            f = k;
          }
      }
    }
    if (Qb) throw ((a = Rb), (Qb = false), (Rb = null), a);
  }
  function D(a, b) {
    var c = b[of];
    void 0 === c && (c = b[of] = new Set());
    var d = a + "__bubble";
    c.has(d) || (pf(b, a, 2, false), c.add(d));
  }
  function qf(a, b, c) {
    var d = 0;
    b && (d |= 4);
    pf(c, a, d, b);
  }
  var rf = "_reactListening" + Math.random().toString(36).slice(2);
  function sf(a) {
    if (!a[rf]) {
      a[rf] = true;
      da.forEach(function (b) {
        "selectionchange" !== b &&
          (mf.has(b) || qf(b, false, a), qf(b, true, a));
      });
      var b = 9 === a.nodeType ? a : a.ownerDocument;
      null === b || b[rf] || ((b[rf] = true), qf("selectionchange", false, b));
    }
  }
  function pf(a, b, c, d) {
    switch (jd(b)) {
      case 1:
        var e = ed;
        break;
      case 4:
        e = gd;
        break;
      default:
        e = fd;
    }
    c = e.bind(null, b, c, a);
    e = void 0;
    !Lb ||
      ("touchstart" !== b && "touchmove" !== b && "wheel" !== b) ||
      (e = true);
    d
      ? void 0 !== e
        ? a.addEventListener(b, c, { capture: true, passive: e })
        : a.addEventListener(b, c, true)
      : void 0 !== e
      ? a.addEventListener(b, c, { passive: e })
      : a.addEventListener(b, c, false);
  }
  function hd(a, b, c, d, e) {
    var f = d;
    if (0 === (b & 1) && 0 === (b & 2) && null !== d)
      a: for (;;) {
        if (null === d) return;
        var g = d.tag;
        if (3 === g || 4 === g) {
          var h = d.stateNode.containerInfo;
          if (h === e || (8 === h.nodeType && h.parentNode === e)) break;
          if (4 === g)
            for (g = d.return; null !== g; ) {
              var k = g.tag;
              if (3 === k || 4 === k)
                if (
                  ((k = g.stateNode.containerInfo),
                  k === e || (8 === k.nodeType && k.parentNode === e))
                )
                  return;
              g = g.return;
            }
          for (; null !== h; ) {
            g = Wc(h);
            if (null === g) return;
            k = g.tag;
            if (5 === k || 6 === k) {
              d = f = g;
              continue a;
            }
            h = h.parentNode;
          }
        }
        d = d.return;
      }
    Jb(function () {
      var d = f,
        e = xb(c),
        g = [];
      a: {
        var h = df.get(a);
        if (void 0 !== h) {
          var k = td,
            n = a;
          switch (a) {
            case "keypress":
              if (0 === od(c)) break a;
            case "keydown":
            case "keyup":
              k = Rd;
              break;
            case "focusin":
              n = "focus";
              k = Fd;
              break;
            case "focusout":
              n = "blur";
              k = Fd;
              break;
            case "beforeblur":
            case "afterblur":
              k = Fd;
              break;
            case "click":
              if (2 === c.button) break a;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              k = Bd;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              k = Dd;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              k = Vd;
              break;
            case $e:
            case af:
            case bf:
              k = Hd;
              break;
            case cf:
              k = Xd;
              break;
            case "scroll":
              k = vd;
              break;
            case "wheel":
              k = Zd;
              break;
            case "copy":
            case "cut":
            case "paste":
              k = Jd;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              k = Td;
          }
          var t = 0 !== (b & 4),
            J = !t && "scroll" === a,
            x = t ? (null !== h ? h + "Capture" : null) : h;
          t = [];
          for (var w = d, u; null !== w; ) {
            u = w;
            var F = u.stateNode;
            5 === u.tag &&
              null !== F &&
              ((u = F),
              null !== x && ((F = Kb(w, x)), null != F && t.push(tf(w, F, u))));
            if (J) break;
            w = w.return;
          }
          0 < t.length &&
            ((h = new k(h, n, null, c, e)), g.push({ event: h, listeners: t }));
        }
      }
      if (0 === (b & 7)) {
        a: {
          h = "mouseover" === a || "pointerover" === a;
          k = "mouseout" === a || "pointerout" === a;
          if (
            h &&
            c !== wb &&
            (n = c.relatedTarget || c.fromElement) &&
            (Wc(n) || n[uf])
          )
            break a;
          if (k || h) {
            h =
              e.window === e
                ? e
                : (h = e.ownerDocument)
                ? h.defaultView || h.parentWindow
                : window;
            if (k) {
              if (
                ((n = c.relatedTarget || c.toElement),
                (k = d),
                (n = n ? Wc(n) : null),
                null !== n &&
                  ((J = Vb(n)), n !== J || (5 !== n.tag && 6 !== n.tag)))
              )
                n = null;
            } else (k = null), (n = d);
            if (k !== n) {
              t = Bd;
              F = "onMouseLeave";
              x = "onMouseEnter";
              w = "mouse";
              if ("pointerout" === a || "pointerover" === a)
                (t = Td),
                  (F = "onPointerLeave"),
                  (x = "onPointerEnter"),
                  (w = "pointer");
              J = null == k ? h : ue(k);
              u = null == n ? h : ue(n);
              h = new t(F, w + "leave", k, c, e);
              h.target = J;
              h.relatedTarget = u;
              F = null;
              Wc(e) === d &&
                ((t = new t(x, w + "enter", n, c, e)),
                (t.target = u),
                (t.relatedTarget = J),
                (F = t));
              J = F;
              if (k && n)
                b: {
                  t = k;
                  x = n;
                  w = 0;
                  for (u = t; u; u = vf(u)) w++;
                  u = 0;
                  for (F = x; F; F = vf(F)) u++;
                  for (; 0 < w - u; ) (t = vf(t)), w--;
                  for (; 0 < u - w; ) (x = vf(x)), u--;
                  for (; w--; ) {
                    if (t === x || (null !== x && t === x.alternate)) break b;
                    t = vf(t);
                    x = vf(x);
                  }
                  t = null;
                }
              else t = null;
              null !== k && wf(g, h, k, t, false);
              null !== n && null !== J && wf(g, J, n, t, true);
            }
          }
        }
        a: {
          h = d ? ue(d) : window;
          k = h.nodeName && h.nodeName.toLowerCase();
          if ("select" === k || ("input" === k && "file" === h.type))
            var na = ve;
          else if (me(h))
            if (we) na = Fe;
            else {
              na = De;
              var xa = Ce;
            }
          else
            (k = h.nodeName) &&
              "input" === k.toLowerCase() &&
              ("checkbox" === h.type || "radio" === h.type) &&
              (na = Ee);
          if (na && (na = na(a, d))) {
            ne(g, na, c, e);
            break a;
          }
          xa && xa(a, h, d);
          "focusout" === a &&
            (xa = h._wrapperState) &&
            xa.controlled &&
            "number" === h.type &&
            cb(h, "number", h.value);
        }
        xa = d ? ue(d) : window;
        switch (a) {
          case "focusin":
            if (me(xa) || "true" === xa.contentEditable)
              (Qe = xa), (Re = d), (Se = null);
            break;
          case "focusout":
            Se = Re = Qe = null;
            break;
          case "mousedown":
            Te = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            Te = false;
            Ue(g, c, e);
            break;
          case "selectionchange":
            if (Pe) break;
          case "keydown":
          case "keyup":
            Ue(g, c, e);
        }
        var $a;
        if (ae)
          b: {
            switch (a) {
              case "compositionstart":
                var ba = "onCompositionStart";
                break b;
              case "compositionend":
                ba = "onCompositionEnd";
                break b;
              case "compositionupdate":
                ba = "onCompositionUpdate";
                break b;
            }
            ba = void 0;
          }
        else
          ie
            ? ge(a, c) && (ba = "onCompositionEnd")
            : "keydown" === a &&
              229 === c.keyCode &&
              (ba = "onCompositionStart");
        ba &&
          (de &&
            "ko" !== c.locale &&
            (ie || "onCompositionStart" !== ba
              ? "onCompositionEnd" === ba && ie && ($a = nd())
              : ((kd = e),
                (ld = "value" in kd ? kd.value : kd.textContent),
                (ie = true))),
          (xa = oe(d, ba)),
          0 < xa.length &&
            ((ba = new Ld(ba, a, null, c, e)),
            g.push({ event: ba, listeners: xa }),
            $a
              ? (ba.data = $a)
              : (($a = he(c)), null !== $a && (ba.data = $a))));
        if (($a = ce ? je(a, c) : ke(a, c)))
          (d = oe(d, "onBeforeInput")),
            0 < d.length &&
              ((e = new Ld("onBeforeInput", "beforeinput", null, c, e)),
              g.push({ event: e, listeners: d }),
              (e.data = $a));
      }
      se(g, b);
    });
  }
  function tf(a, b, c) {
    return { instance: a, listener: b, currentTarget: c };
  }
  function oe(a, b) {
    for (var c = b + "Capture", d = []; null !== a; ) {
      var e = a,
        f = e.stateNode;
      5 === e.tag &&
        null !== f &&
        ((e = f),
        (f = Kb(a, c)),
        null != f && d.unshift(tf(a, f, e)),
        (f = Kb(a, b)),
        null != f && d.push(tf(a, f, e)));
      a = a.return;
    }
    return d;
  }
  function vf(a) {
    if (null === a) return null;
    do a = a.return;
    while (a && 5 !== a.tag);
    return a ? a : null;
  }
  function wf(a, b, c, d, e) {
    for (var f = b._reactName, g = []; null !== c && c !== d; ) {
      var h = c,
        k = h.alternate,
        l = h.stateNode;
      if (null !== k && k === d) break;
      5 === h.tag &&
        null !== l &&
        ((h = l),
        e
          ? ((k = Kb(c, f)), null != k && g.unshift(tf(c, k, h)))
          : e || ((k = Kb(c, f)), null != k && g.push(tf(c, k, h))));
      c = c.return;
    }
    0 !== g.length && a.push({ event: b, listeners: g });
  }
  var xf = /\r\n?/g,
    yf = /\u0000|\uFFFD/g;
  function zf(a) {
    return ("string" === typeof a ? a : "" + a)
      .replace(xf, "\n")
      .replace(yf, "");
  }
  function Af(a, b, c) {
    b = zf(b);
    if (zf(a) !== b && c) throw Error(p(425));
  }
  function Bf() {}
  var Cf = null,
    Df = null;
  function Ef(a, b) {
    return (
      "textarea" === a ||
      "noscript" === a ||
      "string" === typeof b.children ||
      "number" === typeof b.children ||
      ("object" === typeof b.dangerouslySetInnerHTML &&
        null !== b.dangerouslySetInnerHTML &&
        null != b.dangerouslySetInnerHTML.__html)
    );
  }
  var Ff = "function" === typeof setTimeout ? setTimeout : void 0,
    Gf = "function" === typeof clearTimeout ? clearTimeout : void 0,
    Hf = "function" === typeof Promise ? Promise : void 0,
    Jf =
      "function" === typeof queueMicrotask
        ? queueMicrotask
        : "undefined" !== typeof Hf
        ? function (a) {
            return Hf.resolve(null).then(a).catch(If);
          }
        : Ff;
  function If(a) {
    setTimeout(function () {
      throw a;
    });
  }
  function Kf(a, b) {
    var c = b,
      d = 0;
    do {
      var e = c.nextSibling;
      a.removeChild(c);
      if (e && 8 === e.nodeType)
        if (((c = e.data), "/$" === c)) {
          if (0 === d) {
            a.removeChild(e);
            bd(b);
            return;
          }
          d--;
        } else ("$" !== c && "$?" !== c && "$!" !== c) || d++;
      c = e;
    } while (c);
    bd(b);
  }
  function Lf(a) {
    for (; null != a; a = a.nextSibling) {
      var b = a.nodeType;
      if (1 === b || 3 === b) break;
      if (8 === b) {
        b = a.data;
        if ("$" === b || "$!" === b || "$?" === b) break;
        if ("/$" === b) return null;
      }
    }
    return a;
  }
  function Mf(a) {
    a = a.previousSibling;
    for (var b = 0; a; ) {
      if (8 === a.nodeType) {
        var c = a.data;
        if ("$" === c || "$!" === c || "$?" === c) {
          if (0 === b) return a;
          b--;
        } else "/$" === c && b++;
      }
      a = a.previousSibling;
    }
    return null;
  }
  var Nf = Math.random().toString(36).slice(2),
    Of = "__reactFiber$" + Nf,
    Pf = "__reactProps$" + Nf,
    uf = "__reactContainer$" + Nf,
    of = "__reactEvents$" + Nf,
    Qf = "__reactListeners$" + Nf,
    Rf = "__reactHandles$" + Nf;
  function Wc(a) {
    var b = a[Of];
    if (b) return b;
    for (var c = a.parentNode; c; ) {
      if ((b = c[uf] || c[Of])) {
        c = b.alternate;
        if (null !== b.child || (null !== c && null !== c.child))
          for (a = Mf(a); null !== a; ) {
            if ((c = a[Of])) return c;
            a = Mf(a);
          }
        return b;
      }
      a = c;
      c = a.parentNode;
    }
    return null;
  }
  function Cb(a) {
    a = a[Of] || a[uf];
    return !a || (5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag)
      ? null
      : a;
  }
  function ue(a) {
    if (5 === a.tag || 6 === a.tag) return a.stateNode;
    throw Error(p(33));
  }
  function Db(a) {
    return a[Pf] || null;
  }
  var Sf = [],
    Tf = -1;
  function Uf(a) {
    return { current: a };
  }
  function E(a) {
    0 > Tf || ((a.current = Sf[Tf]), (Sf[Tf] = null), Tf--);
  }
  function G(a, b) {
    Tf++;
    Sf[Tf] = a.current;
    a.current = b;
  }
  var Vf = {},
    H = Uf(Vf),
    Wf = Uf(false),
    Xf = Vf;
  function Yf(a, b) {
    var c = a.type.contextTypes;
    if (!c) return Vf;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
      return d.__reactInternalMemoizedMaskedChildContext;
    var e = {},
      f;
    for (f in c) e[f] = b[f];
    d &&
      ((a = a.stateNode),
      (a.__reactInternalMemoizedUnmaskedChildContext = b),
      (a.__reactInternalMemoizedMaskedChildContext = e));
    return e;
  }
  function Zf(a) {
    a = a.childContextTypes;
    return null !== a && void 0 !== a;
  }
  function $f() {
    E(Wf);
    E(H);
  }
  function ag(a, b, c) {
    if (H.current !== Vf) throw Error(p(168));
    G(H, b);
    G(Wf, c);
  }
  function bg(a, b, c) {
    var d = a.stateNode;
    b = b.childContextTypes;
    if ("function" !== typeof d.getChildContext) return c;
    d = d.getChildContext();
    for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
    return A({}, c, d);
  }
  function cg(a) {
    a =
      ((a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext) || Vf;
    Xf = H.current;
    G(H, a);
    G(Wf, Wf.current);
    return true;
  }
  function dg(a, b, c) {
    var d = a.stateNode;
    if (!d) throw Error(p(169));
    c
      ? ((a = bg(a, b, Xf)),
        (d.__reactInternalMemoizedMergedChildContext = a),
        E(Wf),
        E(H),
        G(H, a))
      : E(Wf);
    G(Wf, c);
  }
  var eg = null,
    fg = false,
    gg = false;
  function hg(a) {
    null === eg ? (eg = [a]) : eg.push(a);
  }
  function ig(a) {
    fg = true;
    hg(a);
  }
  function jg() {
    if (!gg && null !== eg) {
      gg = true;
      var a = 0,
        b = C;
      try {
        var c = eg;
        for (C = 1; a < c.length; a++) {
          var d = c[a];
          do d = d(!0);
          while (null !== d);
        }
        eg = null;
        fg = !1;
      } catch (e) {
        throw (null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e);
      } finally {
        (C = b), (gg = false);
      }
    }
    return null;
  }
  var kg = [],
    lg = 0,
    mg = null,
    ng = 0,
    og = [],
    pg = 0,
    qg = null,
    rg = 1,
    sg = "";
  function tg(a, b) {
    kg[lg++] = ng;
    kg[lg++] = mg;
    mg = a;
    ng = b;
  }
  function ug(a, b, c) {
    og[pg++] = rg;
    og[pg++] = sg;
    og[pg++] = qg;
    qg = a;
    var d = rg;
    a = sg;
    var e = 32 - oc(d) - 1;
    d &= ~(1 << e);
    c += 1;
    var f = 32 - oc(b) + e;
    if (30 < f) {
      var g = e - (e % 5);
      f = (d & ((1 << g) - 1)).toString(32);
      d >>= g;
      e -= g;
      rg = (1 << (32 - oc(b) + e)) | (c << e) | d;
      sg = f + a;
    } else (rg = (1 << f) | (c << e) | d), (sg = a);
  }
  function vg(a) {
    null !== a.return && (tg(a, 1), ug(a, 1, 0));
  }
  function wg(a) {
    for (; a === mg; )
      (mg = kg[--lg]), (kg[lg] = null), (ng = kg[--lg]), (kg[lg] = null);
    for (; a === qg; )
      (qg = og[--pg]),
        (og[pg] = null),
        (sg = og[--pg]),
        (og[pg] = null),
        (rg = og[--pg]),
        (og[pg] = null);
  }
  var xg = null,
    yg = null,
    I = false,
    zg = null;
  function Ag(a, b) {
    var c = Bg(5, null, null, 0);
    c.elementType = "DELETED";
    c.stateNode = b;
    c.return = a;
    b = a.deletions;
    null === b ? ((a.deletions = [c]), (a.flags |= 16)) : b.push(c);
  }
  function Cg(a, b) {
    switch (a.tag) {
      case 5:
        var c = a.type;
        b =
          1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase()
            ? null
            : b;
        return null !== b
          ? ((a.stateNode = b), (xg = a), (yg = Lf(b.firstChild)), true)
          : false;
      case 6:
        return (
          (b = "" === a.pendingProps || 3 !== b.nodeType ? null : b),
          null !== b ? ((a.stateNode = b), (xg = a), (yg = null), true) : false
        );
      case 13:
        return (
          (b = 8 !== b.nodeType ? null : b),
          null !== b
            ? ((c = null !== qg ? { id: rg, overflow: sg } : null),
              (a.memoizedState = {
                dehydrated: b,
                treeContext: c,
                retryLane: 1073741824,
              }),
              (c = Bg(18, null, null, 0)),
              (c.stateNode = b),
              (c.return = a),
              (a.child = c),
              (xg = a),
              (yg = null),
              true)
            : false
        );
      default:
        return false;
    }
  }
  function Dg(a) {
    return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
  }
  function Eg(a) {
    if (I) {
      var b = yg;
      if (b) {
        var c = b;
        if (!Cg(a, b)) {
          if (Dg(a)) throw Error(p(418));
          b = Lf(c.nextSibling);
          var d = xg;
          b && Cg(a, b)
            ? Ag(d, c)
            : ((a.flags = (a.flags & -4097) | 2), (I = false), (xg = a));
        }
      } else {
        if (Dg(a)) throw Error(p(418));
        a.flags = (a.flags & -4097) | 2;
        I = false;
        xg = a;
      }
    }
  }
  function Fg(a) {
    for (
      a = a.return;
      null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;

    )
      a = a.return;
    xg = a;
  }
  function Gg(a) {
    if (a !== xg) return false;
    if (!I) return Fg(a), (I = true), false;
    var b;
    (b = 3 !== a.tag) &&
      !(b = 5 !== a.tag) &&
      ((b = a.type),
      (b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps)));
    if (b && (b = yg)) {
      if (Dg(a)) throw (Hg(), Error(p(418)));
      for (; b; ) Ag(a, b), (b = Lf(b.nextSibling));
    }
    Fg(a);
    if (13 === a.tag) {
      a = a.memoizedState;
      a = null !== a ? a.dehydrated : null;
      if (!a) throw Error(p(317));
      a: {
        a = a.nextSibling;
        for (b = 0; a; ) {
          if (8 === a.nodeType) {
            var c = a.data;
            if ("/$" === c) {
              if (0 === b) {
                yg = Lf(a.nextSibling);
                break a;
              }
              b--;
            } else ("$" !== c && "$!" !== c && "$?" !== c) || b++;
          }
          a = a.nextSibling;
        }
        yg = null;
      }
    } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
    return true;
  }
  function Hg() {
    for (var a = yg; a; ) a = Lf(a.nextSibling);
  }
  function Ig() {
    yg = xg = null;
    I = false;
  }
  function Jg(a) {
    null === zg ? (zg = [a]) : zg.push(a);
  }
  var Kg = ua.ReactCurrentBatchConfig;
  function Lg(a, b, c) {
    a = c.ref;
    if (null !== a && "function" !== typeof a && "object" !== typeof a) {
      if (c._owner) {
        c = c._owner;
        if (c) {
          if (1 !== c.tag) throw Error(p(309));
          var d = c.stateNode;
        }
        if (!d) throw Error(p(147, a));
        var e = d,
          f = "" + a;
        if (
          null !== b &&
          null !== b.ref &&
          "function" === typeof b.ref &&
          b.ref._stringRef === f
        )
          return b.ref;
        b = function (a) {
          var b = e.refs;
          null === a ? delete b[f] : (b[f] = a);
        };
        b._stringRef = f;
        return b;
      }
      if ("string" !== typeof a) throw Error(p(284));
      if (!c._owner) throw Error(p(290, a));
    }
    return a;
  }
  function Mg(a, b) {
    a = Object.prototype.toString.call(b);
    throw Error(
      p(
        31,
        "[object Object]" === a
          ? "object with keys {" + Object.keys(b).join(", ") + "}"
          : a
      )
    );
  }
  function Ng(a) {
    var b = a._init;
    return b(a._payload);
  }
  function Og(a) {
    function b(b, c) {
      if (a) {
        var d = b.deletions;
        null === d ? ((b.deletions = [c]), (b.flags |= 16)) : d.push(c);
      }
    }
    function c(c, d) {
      if (!a) return null;
      for (; null !== d; ) b(c, d), (d = d.sibling);
      return null;
    }
    function d(a, b) {
      for (a = new Map(); null !== b; )
        null !== b.key ? a.set(b.key, b) : a.set(b.index, b), (b = b.sibling);
      return a;
    }
    function e(a, b) {
      a = Pg(a, b);
      a.index = 0;
      a.sibling = null;
      return a;
    }
    function f(b, c, d) {
      b.index = d;
      if (!a) return (b.flags |= 1048576), c;
      d = b.alternate;
      if (null !== d) return (d = d.index), d < c ? ((b.flags |= 2), c) : d;
      b.flags |= 2;
      return c;
    }
    function g(b) {
      a && null === b.alternate && (b.flags |= 2);
      return b;
    }
    function h(a, b, c, d) {
      if (null === b || 6 !== b.tag)
        return (b = Qg(c, a.mode, d)), (b.return = a), b;
      b = e(b, c);
      b.return = a;
      return b;
    }
    function k(a, b, c, d) {
      var f = c.type;
      if (f === ya) return m(a, b, c.props.children, d, c.key);
      if (
        null !== b &&
        (b.elementType === f ||
          ("object" === typeof f &&
            null !== f &&
            f.$$typeof === Ha &&
            Ng(f) === b.type))
      )
        return (d = e(b, c.props)), (d.ref = Lg(a, b, c)), (d.return = a), d;
      d = Rg(c.type, c.key, c.props, null, a.mode, d);
      d.ref = Lg(a, b, c);
      d.return = a;
      return d;
    }
    function l(a, b, c, d) {
      if (
        null === b ||
        4 !== b.tag ||
        b.stateNode.containerInfo !== c.containerInfo ||
        b.stateNode.implementation !== c.implementation
      )
        return (b = Sg(c, a.mode, d)), (b.return = a), b;
      b = e(b, c.children || []);
      b.return = a;
      return b;
    }
    function m(a, b, c, d, f) {
      if (null === b || 7 !== b.tag)
        return (b = Tg(c, a.mode, d, f)), (b.return = a), b;
      b = e(b, c);
      b.return = a;
      return b;
    }
    function q(a, b, c) {
      if (("string" === typeof b && "" !== b) || "number" === typeof b)
        return (b = Qg("" + b, a.mode, c)), (b.return = a), b;
      if ("object" === typeof b && null !== b) {
        switch (b.$$typeof) {
          case va:
            return (
              (c = Rg(b.type, b.key, b.props, null, a.mode, c)),
              (c.ref = Lg(a, null, b)),
              (c.return = a),
              c
            );
          case wa:
            return (b = Sg(b, a.mode, c)), (b.return = a), b;
          case Ha:
            var d = b._init;
            return q(a, d(b._payload), c);
        }
        if (eb(b) || Ka(b))
          return (b = Tg(b, a.mode, c, null)), (b.return = a), b;
        Mg(a, b);
      }
      return null;
    }
    function r(a, b, c, d) {
      var e = null !== b ? b.key : null;
      if (("string" === typeof c && "" !== c) || "number" === typeof c)
        return null !== e ? null : h(a, b, "" + c, d);
      if ("object" === typeof c && null !== c) {
        switch (c.$$typeof) {
          case va:
            return c.key === e ? k(a, b, c, d) : null;
          case wa:
            return c.key === e ? l(a, b, c, d) : null;
          case Ha:
            return (e = c._init), r(a, b, e(c._payload), d);
        }
        if (eb(c) || Ka(c)) return null !== e ? null : m(a, b, c, d, null);
        Mg(a, c);
      }
      return null;
    }
    function y(a, b, c, d, e) {
      if (("string" === typeof d && "" !== d) || "number" === typeof d)
        return (a = a.get(c) || null), h(b, a, "" + d, e);
      if ("object" === typeof d && null !== d) {
        switch (d.$$typeof) {
          case va:
            return (
              (a = a.get(null === d.key ? c : d.key) || null), k(b, a, d, e)
            );
          case wa:
            return (
              (a = a.get(null === d.key ? c : d.key) || null), l(b, a, d, e)
            );
          case Ha:
            var f = d._init;
            return y(a, b, c, f(d._payload), e);
        }
        if (eb(d) || Ka(d)) return (a = a.get(c) || null), m(b, a, d, e, null);
        Mg(b, d);
      }
      return null;
    }
    function n(e, g, h, k) {
      for (
        var l = null, m = null, u = g, w = (g = 0), x = null;
        null !== u && w < h.length;
        w++
      ) {
        u.index > w ? ((x = u), (u = null)) : (x = u.sibling);
        var n = r(e, u, h[w], k);
        if (null === n) {
          null === u && (u = x);
          break;
        }
        a && u && null === n.alternate && b(e, u);
        g = f(n, g, w);
        null === m ? (l = n) : (m.sibling = n);
        m = n;
        u = x;
      }
      if (w === h.length) return c(e, u), I && tg(e, w), l;
      if (null === u) {
        for (; w < h.length; w++)
          (u = q(e, h[w], k)),
            null !== u &&
              ((g = f(u, g, w)),
              null === m ? (l = u) : (m.sibling = u),
              (m = u));
        I && tg(e, w);
        return l;
      }
      for (u = d(e, u); w < h.length; w++)
        (x = y(u, e, w, h[w], k)),
          null !== x &&
            (a && null !== x.alternate && u.delete(null === x.key ? w : x.key),
            (g = f(x, g, w)),
            null === m ? (l = x) : (m.sibling = x),
            (m = x));
      a &&
        u.forEach(function (a) {
          return b(e, a);
        });
      I && tg(e, w);
      return l;
    }
    function t(e, g, h, k) {
      var l = Ka(h);
      if ("function" !== typeof l) throw Error(p(150));
      h = l.call(h);
      if (null == h) throw Error(p(151));
      for (
        var u = (l = null), m = g, w = (g = 0), x = null, n = h.next();
        null !== m && !n.done;
        w++, n = h.next()
      ) {
        m.index > w ? ((x = m), (m = null)) : (x = m.sibling);
        var t = r(e, m, n.value, k);
        if (null === t) {
          null === m && (m = x);
          break;
        }
        a && m && null === t.alternate && b(e, m);
        g = f(t, g, w);
        null === u ? (l = t) : (u.sibling = t);
        u = t;
        m = x;
      }
      if (n.done) return c(e, m), I && tg(e, w), l;
      if (null === m) {
        for (; !n.done; w++, n = h.next())
          (n = q(e, n.value, k)),
            null !== n &&
              ((g = f(n, g, w)),
              null === u ? (l = n) : (u.sibling = n),
              (u = n));
        I && tg(e, w);
        return l;
      }
      for (m = d(e, m); !n.done; w++, n = h.next())
        (n = y(m, e, w, n.value, k)),
          null !== n &&
            (a && null !== n.alternate && m.delete(null === n.key ? w : n.key),
            (g = f(n, g, w)),
            null === u ? (l = n) : (u.sibling = n),
            (u = n));
      a &&
        m.forEach(function (a) {
          return b(e, a);
        });
      I && tg(e, w);
      return l;
    }
    function J(a, d, f, h) {
      "object" === typeof f &&
        null !== f &&
        f.type === ya &&
        null === f.key &&
        (f = f.props.children);
      if ("object" === typeof f && null !== f) {
        switch (f.$$typeof) {
          case va:
            a: {
              for (var k = f.key, l = d; null !== l; ) {
                if (l.key === k) {
                  k = f.type;
                  if (k === ya) {
                    if (7 === l.tag) {
                      c(a, l.sibling);
                      d = e(l, f.props.children);
                      d.return = a;
                      a = d;
                      break a;
                    }
                  } else if (
                    l.elementType === k ||
                    ("object" === typeof k &&
                      null !== k &&
                      k.$$typeof === Ha &&
                      Ng(k) === l.type)
                  ) {
                    c(a, l.sibling);
                    d = e(l, f.props);
                    d.ref = Lg(a, l, f);
                    d.return = a;
                    a = d;
                    break a;
                  }
                  c(a, l);
                  break;
                } else b(a, l);
                l = l.sibling;
              }
              f.type === ya
                ? ((d = Tg(f.props.children, a.mode, h, f.key)),
                  (d.return = a),
                  (a = d))
                : ((h = Rg(f.type, f.key, f.props, null, a.mode, h)),
                  (h.ref = Lg(a, d, f)),
                  (h.return = a),
                  (a = h));
            }
            return g(a);
          case wa:
            a: {
              for (l = f.key; null !== d; ) {
                if (d.key === l)
                  if (
                    4 === d.tag &&
                    d.stateNode.containerInfo === f.containerInfo &&
                    d.stateNode.implementation === f.implementation
                  ) {
                    c(a, d.sibling);
                    d = e(d, f.children || []);
                    d.return = a;
                    a = d;
                    break a;
                  } else {
                    c(a, d);
                    break;
                  }
                else b(a, d);
                d = d.sibling;
              }
              d = Sg(f, a.mode, h);
              d.return = a;
              a = d;
            }
            return g(a);
          case Ha:
            return (l = f._init), J(a, d, l(f._payload), h);
        }
        if (eb(f)) return n(a, d, f, h);
        if (Ka(f)) return t(a, d, f, h);
        Mg(a, f);
      }
      return ("string" === typeof f && "" !== f) || "number" === typeof f
        ? ((f = "" + f),
          null !== d && 6 === d.tag
            ? (c(a, d.sibling), (d = e(d, f)), (d.return = a), (a = d))
            : (c(a, d), (d = Qg(f, a.mode, h)), (d.return = a), (a = d)),
          g(a))
        : c(a, d);
    }
    return J;
  }
  var Ug = Og(true),
    Vg = Og(false),
    Wg = Uf(null),
    Xg = null,
    Yg = null,
    Zg = null;
  function $g() {
    Zg = Yg = Xg = null;
  }
  function ah(a) {
    var b = Wg.current;
    E(Wg);
    a._currentValue = b;
  }
  function bh(a, b, c) {
    for (; null !== a; ) {
      var d = a.alternate;
      (a.childLanes & b) !== b
        ? ((a.childLanes |= b), null !== d && (d.childLanes |= b))
        : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
      if (a === c) break;
      a = a.return;
    }
  }
  function ch(a, b) {
    Xg = a;
    Zg = Yg = null;
    a = a.dependencies;
    null !== a &&
      null !== a.firstContext &&
      (0 !== (a.lanes & b) && (dh = true), (a.firstContext = null));
  }
  function eh(a) {
    var b = a._currentValue;
    if (Zg !== a)
      if (((a = { context: a, memoizedValue: b, next: null }), null === Yg)) {
        if (null === Xg) throw Error(p(308));
        Yg = a;
        Xg.dependencies = { lanes: 0, firstContext: a };
      } else Yg = Yg.next = a;
    return b;
  }
  var fh = null;
  function gh(a) {
    null === fh ? (fh = [a]) : fh.push(a);
  }
  function hh(a, b, c, d) {
    var e = b.interleaved;
    null === e ? ((c.next = c), gh(b)) : ((c.next = e.next), (e.next = c));
    b.interleaved = c;
    return ih(a, d);
  }
  function ih(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    c = a;
    for (a = a.return; null !== a; )
      (a.childLanes |= b),
        (c = a.alternate),
        null !== c && (c.childLanes |= b),
        (c = a),
        (a = a.return);
    return 3 === c.tag ? c.stateNode : null;
  }
  var jh = false;
  function kh(a) {
    a.updateQueue = {
      baseState: a.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: { pending: null, interleaved: null, lanes: 0 },
      effects: null,
    };
  }
  function lh(a, b) {
    a = a.updateQueue;
    b.updateQueue === a &&
      (b.updateQueue = {
        baseState: a.baseState,
        firstBaseUpdate: a.firstBaseUpdate,
        lastBaseUpdate: a.lastBaseUpdate,
        shared: a.shared,
        effects: a.effects,
      });
  }
  function mh(a, b) {
    return {
      eventTime: a,
      lane: b,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
    };
  }
  function nh(a, b, c) {
    var d = a.updateQueue;
    if (null === d) return null;
    d = d.shared;
    if (0 !== (K & 2)) {
      var e = d.pending;
      null === e ? (b.next = b) : ((b.next = e.next), (e.next = b));
      d.pending = b;
      return ih(a, c);
    }
    e = d.interleaved;
    null === e ? ((b.next = b), gh(d)) : ((b.next = e.next), (e.next = b));
    d.interleaved = b;
    return ih(a, c);
  }
  function oh(a, b, c) {
    b = b.updateQueue;
    if (null !== b && ((b = b.shared), 0 !== (c & 4194240))) {
      var d = b.lanes;
      d &= a.pendingLanes;
      c |= d;
      b.lanes = c;
      Cc(a, c);
    }
  }
  function ph(a, b) {
    var c = a.updateQueue,
      d = a.alternate;
    if (null !== d && ((d = d.updateQueue), c === d)) {
      var e = null,
        f = null;
      c = c.firstBaseUpdate;
      if (null !== c) {
        do {
          var g = {
            eventTime: c.eventTime,
            lane: c.lane,
            tag: c.tag,
            payload: c.payload,
            callback: c.callback,
            next: null,
          };
          null === f ? (e = f = g) : (f = f.next = g);
          c = c.next;
        } while (null !== c);
        null === f ? (e = f = b) : (f = f.next = b);
      } else e = f = b;
      c = {
        baseState: d.baseState,
        firstBaseUpdate: e,
        lastBaseUpdate: f,
        shared: d.shared,
        effects: d.effects,
      };
      a.updateQueue = c;
      return;
    }
    a = c.lastBaseUpdate;
    null === a ? (c.firstBaseUpdate = b) : (a.next = b);
    c.lastBaseUpdate = b;
  }
  function qh(a, b, c, d) {
    var e = a.updateQueue;
    jh = false;
    var f = e.firstBaseUpdate,
      g = e.lastBaseUpdate,
      h = e.shared.pending;
    if (null !== h) {
      e.shared.pending = null;
      var k = h,
        l = k.next;
      k.next = null;
      null === g ? (f = l) : (g.next = l);
      g = k;
      var m = a.alternate;
      null !== m &&
        ((m = m.updateQueue),
        (h = m.lastBaseUpdate),
        h !== g &&
          (null === h ? (m.firstBaseUpdate = l) : (h.next = l),
          (m.lastBaseUpdate = k)));
    }
    if (null !== f) {
      var q = e.baseState;
      g = 0;
      m = l = k = null;
      h = f;
      do {
        var r = h.lane,
          y = h.eventTime;
        if ((d & r) === r) {
          null !== m &&
            (m = m.next =
              {
                eventTime: y,
                lane: 0,
                tag: h.tag,
                payload: h.payload,
                callback: h.callback,
                next: null,
              });
          a: {
            var n = a,
              t = h;
            r = b;
            y = c;
            switch (t.tag) {
              case 1:
                n = t.payload;
                if ("function" === typeof n) {
                  q = n.call(y, q, r);
                  break a;
                }
                q = n;
                break a;
              case 3:
                n.flags = (n.flags & -65537) | 128;
              case 0:
                n = t.payload;
                r = "function" === typeof n ? n.call(y, q, r) : n;
                if (null === r || void 0 === r) break a;
                q = A({}, q, r);
                break a;
              case 2:
                jh = true;
            }
          }
          null !== h.callback &&
            0 !== h.lane &&
            ((a.flags |= 64),
            (r = e.effects),
            null === r ? (e.effects = [h]) : r.push(h));
        } else
          (y = {
            eventTime: y,
            lane: r,
            tag: h.tag,
            payload: h.payload,
            callback: h.callback,
            next: null,
          }),
            null === m ? ((l = m = y), (k = q)) : (m = m.next = y),
            (g |= r);
        h = h.next;
        if (null === h)
          if (((h = e.shared.pending), null === h)) break;
          else
            (r = h),
              (h = r.next),
              (r.next = null),
              (e.lastBaseUpdate = r),
              (e.shared.pending = null);
      } while (1);
      null === m && (k = q);
      e.baseState = k;
      e.firstBaseUpdate = l;
      e.lastBaseUpdate = m;
      b = e.shared.interleaved;
      if (null !== b) {
        e = b;
        do (g |= e.lane), (e = e.next);
        while (e !== b);
      } else null === f && (e.shared.lanes = 0);
      rh |= g;
      a.lanes = g;
      a.memoizedState = q;
    }
  }
  function sh(a, b, c) {
    a = b.effects;
    b.effects = null;
    if (null !== a)
      for (b = 0; b < a.length; b++) {
        var d = a[b],
          e = d.callback;
        if (null !== e) {
          d.callback = null;
          d = c;
          if ("function" !== typeof e) throw Error(p(191, e));
          e.call(d);
        }
      }
  }
  var th = {},
    uh = Uf(th),
    vh = Uf(th),
    wh = Uf(th);
  function xh(a) {
    if (a === th) throw Error(p(174));
    return a;
  }
  function yh(a, b) {
    G(wh, b);
    G(vh, a);
    G(uh, th);
    a = b.nodeType;
    switch (a) {
      case 9:
      case 11:
        b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
        break;
      default:
        (a = 8 === a ? b.parentNode : b),
          (b = a.namespaceURI || null),
          (a = a.tagName),
          (b = lb(b, a));
    }
    E(uh);
    G(uh, b);
  }
  function zh() {
    E(uh);
    E(vh);
    E(wh);
  }
  function Ah(a) {
    xh(wh.current);
    var b = xh(uh.current);
    var c = lb(b, a.type);
    b !== c && (G(vh, a), G(uh, c));
  }
  function Bh(a) {
    vh.current === a && (E(uh), E(vh));
  }
  var L = Uf(0);
  function Ch(a) {
    for (var b = a; null !== b; ) {
      if (13 === b.tag) {
        var c = b.memoizedState;
        if (
          null !== c &&
          ((c = c.dehydrated), null === c || "$?" === c.data || "$!" === c.data)
        )
          return b;
      } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
        if (0 !== (b.flags & 128)) return b;
      } else if (null !== b.child) {
        b.child.return = b;
        b = b.child;
        continue;
      }
      if (b === a) break;
      for (; null === b.sibling; ) {
        if (null === b.return || b.return === a) return null;
        b = b.return;
      }
      b.sibling.return = b.return;
      b = b.sibling;
    }
    return null;
  }
  var Dh = [];
  function Eh() {
    for (var a = 0; a < Dh.length; a++)
      Dh[a]._workInProgressVersionPrimary = null;
    Dh.length = 0;
  }
  var Fh = ua.ReactCurrentDispatcher,
    Gh = ua.ReactCurrentBatchConfig,
    Hh = 0,
    M = null,
    N = null,
    O = null,
    Ih = false,
    Jh = false,
    Kh = 0,
    Lh = 0;
  function P() {
    throw Error(p(321));
  }
  function Mh(a, b) {
    if (null === b) return false;
    for (var c = 0; c < b.length && c < a.length; c++)
      if (!He(a[c], b[c])) return false;
    return true;
  }
  function Nh(a, b, c, d, e, f) {
    Hh = f;
    M = b;
    b.memoizedState = null;
    b.updateQueue = null;
    b.lanes = 0;
    Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
    a = c(d, e);
    if (Jh) {
      f = 0;
      do {
        Jh = false;
        Kh = 0;
        if (25 <= f) throw Error(p(301));
        f += 1;
        O = N = null;
        b.updateQueue = null;
        Fh.current = Qh;
        a = c(d, e);
      } while (Jh);
    }
    Fh.current = Rh;
    b = null !== N && null !== N.next;
    Hh = 0;
    O = N = M = null;
    Ih = false;
    if (b) throw Error(p(300));
    return a;
  }
  function Sh() {
    var a = 0 !== Kh;
    Kh = 0;
    return a;
  }
  function Th() {
    var a = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null,
    };
    null === O ? (M.memoizedState = O = a) : (O = O.next = a);
    return O;
  }
  function Uh() {
    if (null === N) {
      var a = M.alternate;
      a = null !== a ? a.memoizedState : null;
    } else a = N.next;
    var b = null === O ? M.memoizedState : O.next;
    if (null !== b) (O = b), (N = a);
    else {
      if (null === a) throw Error(p(310));
      N = a;
      a = {
        memoizedState: N.memoizedState,
        baseState: N.baseState,
        baseQueue: N.baseQueue,
        queue: N.queue,
        next: null,
      };
      null === O ? (M.memoizedState = O = a) : (O = O.next = a);
    }
    return O;
  }
  function Vh(a, b) {
    return "function" === typeof b ? b(a) : b;
  }
  function Wh(a) {
    var b = Uh(),
      c = b.queue;
    if (null === c) throw Error(p(311));
    c.lastRenderedReducer = a;
    var d = N,
      e = d.baseQueue,
      f = c.pending;
    if (null !== f) {
      if (null !== e) {
        var g = e.next;
        e.next = f.next;
        f.next = g;
      }
      d.baseQueue = e = f;
      c.pending = null;
    }
    if (null !== e) {
      f = e.next;
      d = d.baseState;
      var h = (g = null),
        k = null,
        l = f;
      do {
        var m = l.lane;
        if ((Hh & m) === m)
          null !== k &&
            (k = k.next =
              {
                lane: 0,
                action: l.action,
                hasEagerState: l.hasEagerState,
                eagerState: l.eagerState,
                next: null,
              }),
            (d = l.hasEagerState ? l.eagerState : a(d, l.action));
        else {
          var q = {
            lane: m,
            action: l.action,
            hasEagerState: l.hasEagerState,
            eagerState: l.eagerState,
            next: null,
          };
          null === k ? ((h = k = q), (g = d)) : (k = k.next = q);
          M.lanes |= m;
          rh |= m;
        }
        l = l.next;
      } while (null !== l && l !== f);
      null === k ? (g = d) : (k.next = h);
      He(d, b.memoizedState) || (dh = true);
      b.memoizedState = d;
      b.baseState = g;
      b.baseQueue = k;
      c.lastRenderedState = d;
    }
    a = c.interleaved;
    if (null !== a) {
      e = a;
      do (f = e.lane), (M.lanes |= f), (rh |= f), (e = e.next);
      while (e !== a);
    } else null === e && (c.lanes = 0);
    return [b.memoizedState, c.dispatch];
  }
  function Xh(a) {
    var b = Uh(),
      c = b.queue;
    if (null === c) throw Error(p(311));
    c.lastRenderedReducer = a;
    var d = c.dispatch,
      e = c.pending,
      f = b.memoizedState;
    if (null !== e) {
      c.pending = null;
      var g = (e = e.next);
      do (f = a(f, g.action)), (g = g.next);
      while (g !== e);
      He(f, b.memoizedState) || (dh = true);
      b.memoizedState = f;
      null === b.baseQueue && (b.baseState = f);
      c.lastRenderedState = f;
    }
    return [f, d];
  }
  function Yh() {}
  function Zh(a, b) {
    var c = M,
      d = Uh(),
      e = b(),
      f = !He(d.memoizedState, e);
    f && ((d.memoizedState = e), (dh = true));
    d = d.queue;
    $h(ai.bind(null, c, d, a), [a]);
    if (d.getSnapshot !== b || f || (null !== O && O.memoizedState.tag & 1)) {
      c.flags |= 2048;
      bi(9, ci.bind(null, c, d, e, b), void 0, null);
      if (null === Q) throw Error(p(349));
      0 !== (Hh & 30) || di(c, b, e);
    }
    return e;
  }
  function di(a, b, c) {
    a.flags |= 16384;
    a = { getSnapshot: b, value: c };
    b = M.updateQueue;
    null === b
      ? ((b = { lastEffect: null, stores: null }),
        (M.updateQueue = b),
        (b.stores = [a]))
      : ((c = b.stores), null === c ? (b.stores = [a]) : c.push(a));
  }
  function ci(a, b, c, d) {
    b.value = c;
    b.getSnapshot = d;
    ei(b) && fi(a);
  }
  function ai(a, b, c) {
    return c(function () {
      ei(b) && fi(a);
    });
  }
  function ei(a) {
    var b = a.getSnapshot;
    a = a.value;
    try {
      var c = b();
      return !He(a, c);
    } catch (d) {
      return true;
    }
  }
  function fi(a) {
    var b = ih(a, 1);
    null !== b && gi(b, a, 1, -1);
  }
  function hi(a) {
    var b = Th();
    "function" === typeof a && (a = a());
    b.memoizedState = b.baseState = a;
    a = {
      pending: null,
      interleaved: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: Vh,
      lastRenderedState: a,
    };
    b.queue = a;
    a = a.dispatch = ii.bind(null, M, a);
    return [b.memoizedState, a];
  }
  function bi(a, b, c, d) {
    a = { tag: a, create: b, destroy: c, deps: d, next: null };
    b = M.updateQueue;
    null === b
      ? ((b = { lastEffect: null, stores: null }),
        (M.updateQueue = b),
        (b.lastEffect = a.next = a))
      : ((c = b.lastEffect),
        null === c
          ? (b.lastEffect = a.next = a)
          : ((d = c.next), (c.next = a), (a.next = d), (b.lastEffect = a)));
    return a;
  }
  function ji() {
    return Uh().memoizedState;
  }
  function ki(a, b, c, d) {
    var e = Th();
    M.flags |= a;
    e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
  }
  function li(a, b, c, d) {
    var e = Uh();
    d = void 0 === d ? null : d;
    var f = void 0;
    if (null !== N) {
      var g = N.memoizedState;
      f = g.destroy;
      if (null !== d && Mh(d, g.deps)) {
        e.memoizedState = bi(b, c, f, d);
        return;
      }
    }
    M.flags |= a;
    e.memoizedState = bi(1 | b, c, f, d);
  }
  function mi(a, b) {
    return ki(8390656, 8, a, b);
  }
  function $h(a, b) {
    return li(2048, 8, a, b);
  }
  function ni(a, b) {
    return li(4, 2, a, b);
  }
  function oi(a, b) {
    return li(4, 4, a, b);
  }
  function pi(a, b) {
    if ("function" === typeof b)
      return (
        (a = a()),
        b(a),
        function () {
          b(null);
        }
      );
    if (null !== b && void 0 !== b)
      return (
        (a = a()),
        (b.current = a),
        function () {
          b.current = null;
        }
      );
  }
  function qi(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return li(4, 4, pi.bind(null, b, a), c);
  }
  function ri() {}
  function si(a, b) {
    var c = Uh();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Mh(b, d[1])) return d[0];
    c.memoizedState = [a, b];
    return a;
  }
  function ti(a, b) {
    var c = Uh();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Mh(b, d[1])) return d[0];
    a = a();
    c.memoizedState = [a, b];
    return a;
  }
  function ui(a, b, c) {
    if (0 === (Hh & 21))
      return (
        a.baseState && ((a.baseState = false), (dh = true)),
        (a.memoizedState = c)
      );
    He(c, b) || ((c = yc()), (M.lanes |= c), (rh |= c), (a.baseState = true));
    return b;
  }
  function vi(a, b) {
    var c = C;
    C = 0 !== c && 4 > c ? c : 4;
    a(true);
    var d = Gh.transition;
    Gh.transition = {};
    try {
      a(!1), b();
    } finally {
      (C = c), (Gh.transition = d);
    }
  }
  function wi() {
    return Uh().memoizedState;
  }
  function xi(a, b, c) {
    var d = yi(a);
    c = {
      lane: d,
      action: c,
      hasEagerState: false,
      eagerState: null,
      next: null,
    };
    if (zi(a)) Ai(b, c);
    else if (((c = hh(a, b, c, d)), null !== c)) {
      var e = R();
      gi(c, a, d, e);
      Bi(c, b, d);
    }
  }
  function ii(a, b, c) {
    var d = yi(a),
      e = {
        lane: d,
        action: c,
        hasEagerState: false,
        eagerState: null,
        next: null,
      };
    if (zi(a)) Ai(b, e);
    else {
      var f = a.alternate;
      if (
        0 === a.lanes &&
        (null === f || 0 === f.lanes) &&
        ((f = b.lastRenderedReducer), null !== f)
      )
        try {
          var g = b.lastRenderedState,
            h = f(g, c);
          e.hasEagerState = !0;
          e.eagerState = h;
          if (He(h, g)) {
            var k = b.interleaved;
            null === k
              ? ((e.next = e), gh(b))
              : ((e.next = k.next), (k.next = e));
            b.interleaved = e;
            return;
          }
        } catch (l) {
        } finally {
        }
      c = hh(a, b, e, d);
      null !== c && ((e = R()), gi(c, a, d, e), Bi(c, b, d));
    }
  }
  function zi(a) {
    var b = a.alternate;
    return a === M || (null !== b && b === M);
  }
  function Ai(a, b) {
    Jh = Ih = true;
    var c = a.pending;
    null === c ? (b.next = b) : ((b.next = c.next), (c.next = b));
    a.pending = b;
  }
  function Bi(a, b, c) {
    if (0 !== (c & 4194240)) {
      var d = b.lanes;
      d &= a.pendingLanes;
      c |= d;
      b.lanes = c;
      Cc(a, c);
    }
  }
  var Rh = {
      readContext: eh,
      useCallback: P,
      useContext: P,
      useEffect: P,
      useImperativeHandle: P,
      useInsertionEffect: P,
      useLayoutEffect: P,
      useMemo: P,
      useReducer: P,
      useRef: P,
      useState: P,
      useDebugValue: P,
      useDeferredValue: P,
      useTransition: P,
      useMutableSource: P,
      useSyncExternalStore: P,
      useId: P,
      unstable_isNewReconciler: false,
    },
    Oh = {
      readContext: eh,
      useCallback: function (a, b) {
        Th().memoizedState = [a, void 0 === b ? null : b];
        return a;
      },
      useContext: eh,
      useEffect: mi,
      useImperativeHandle: function (a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return ki(4194308, 4, pi.bind(null, b, a), c);
      },
      useLayoutEffect: function (a, b) {
        return ki(4194308, 4, a, b);
      },
      useInsertionEffect: function (a, b) {
        return ki(4, 2, a, b);
      },
      useMemo: function (a, b) {
        var c = Th();
        b = void 0 === b ? null : b;
        a = a();
        c.memoizedState = [a, b];
        return a;
      },
      useReducer: function (a, b, c) {
        var d = Th();
        b = void 0 !== c ? c(b) : b;
        d.memoizedState = d.baseState = b;
        a = {
          pending: null,
          interleaved: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: a,
          lastRenderedState: b,
        };
        d.queue = a;
        a = a.dispatch = xi.bind(null, M, a);
        return [d.memoizedState, a];
      },
      useRef: function (a) {
        var b = Th();
        a = { current: a };
        return (b.memoizedState = a);
      },
      useState: hi,
      useDebugValue: ri,
      useDeferredValue: function (a) {
        return (Th().memoizedState = a);
      },
      useTransition: function () {
        var a = hi(false),
          b = a[0];
        a = vi.bind(null, a[1]);
        Th().memoizedState = a;
        return [b, a];
      },
      useMutableSource: function () {},
      useSyncExternalStore: function (a, b, c) {
        var d = M,
          e = Th();
        if (I) {
          if (void 0 === c) throw Error(p(407));
          c = c();
        } else {
          c = b();
          if (null === Q) throw Error(p(349));
          0 !== (Hh & 30) || di(d, b, c);
        }
        e.memoizedState = c;
        var f = { value: c, getSnapshot: b };
        e.queue = f;
        mi(ai.bind(null, d, f, a), [a]);
        d.flags |= 2048;
        bi(9, ci.bind(null, d, f, c, b), void 0, null);
        return c;
      },
      useId: function () {
        var a = Th(),
          b = Q.identifierPrefix;
        if (I) {
          var c = sg;
          var d = rg;
          c = (d & ~(1 << (32 - oc(d) - 1))).toString(32) + c;
          b = ":" + b + "R" + c;
          c = Kh++;
          0 < c && (b += "H" + c.toString(32));
          b += ":";
        } else (c = Lh++), (b = ":" + b + "r" + c.toString(32) + ":");
        return (a.memoizedState = b);
      },
      unstable_isNewReconciler: false,
    },
    Ph = {
      readContext: eh,
      useCallback: si,
      useContext: eh,
      useEffect: $h,
      useImperativeHandle: qi,
      useInsertionEffect: ni,
      useLayoutEffect: oi,
      useMemo: ti,
      useReducer: Wh,
      useRef: ji,
      useState: function () {
        return Wh(Vh);
      },
      useDebugValue: ri,
      useDeferredValue: function (a) {
        var b = Uh();
        return ui(b, N.memoizedState, a);
      },
      useTransition: function () {
        var a = Wh(Vh)[0],
          b = Uh().memoizedState;
        return [a, b];
      },
      useMutableSource: Yh,
      useSyncExternalStore: Zh,
      useId: wi,
      unstable_isNewReconciler: false,
    },
    Qh = {
      readContext: eh,
      useCallback: si,
      useContext: eh,
      useEffect: $h,
      useImperativeHandle: qi,
      useInsertionEffect: ni,
      useLayoutEffect: oi,
      useMemo: ti,
      useReducer: Xh,
      useRef: ji,
      useState: function () {
        return Xh(Vh);
      },
      useDebugValue: ri,
      useDeferredValue: function (a) {
        var b = Uh();
        return null === N ? (b.memoizedState = a) : ui(b, N.memoizedState, a);
      },
      useTransition: function () {
        var a = Xh(Vh)[0],
          b = Uh().memoizedState;
        return [a, b];
      },
      useMutableSource: Yh,
      useSyncExternalStore: Zh,
      useId: wi,
      unstable_isNewReconciler: false,
    };
  function Ci(a, b) {
    if (a && a.defaultProps) {
      b = A({}, b);
      a = a.defaultProps;
      for (var c in a) void 0 === b[c] && (b[c] = a[c]);
      return b;
    }
    return b;
  }
  function Di(a, b, c, d) {
    b = a.memoizedState;
    c = c(d, b);
    c = null === c || void 0 === c ? b : A({}, b, c);
    a.memoizedState = c;
    0 === a.lanes && (a.updateQueue.baseState = c);
  }
  var Ei = {
    isMounted: function (a) {
      return (a = a._reactInternals) ? Vb(a) === a : false;
    },
    enqueueSetState: function (a, b, c) {
      a = a._reactInternals;
      var d = R(),
        e = yi(a),
        f = mh(d, e);
      f.payload = b;
      void 0 !== c && null !== c && (f.callback = c);
      b = nh(a, f, e);
      null !== b && (gi(b, a, e, d), oh(b, a, e));
    },
    enqueueReplaceState: function (a, b, c) {
      a = a._reactInternals;
      var d = R(),
        e = yi(a),
        f = mh(d, e);
      f.tag = 1;
      f.payload = b;
      void 0 !== c && null !== c && (f.callback = c);
      b = nh(a, f, e);
      null !== b && (gi(b, a, e, d), oh(b, a, e));
    },
    enqueueForceUpdate: function (a, b) {
      a = a._reactInternals;
      var c = R(),
        d = yi(a),
        e = mh(c, d);
      e.tag = 2;
      void 0 !== b && null !== b && (e.callback = b);
      b = nh(a, e, d);
      null !== b && (gi(b, a, d, c), oh(b, a, d));
    },
  };
  function Fi(a, b, c, d, e, f, g) {
    a = a.stateNode;
    return "function" === typeof a.shouldComponentUpdate
      ? a.shouldComponentUpdate(d, f, g)
      : b.prototype && b.prototype.isPureReactComponent
      ? !Ie(c, d) || !Ie(e, f)
      : true;
  }
  function Gi(a, b, c) {
    var d = false,
      e = Vf;
    var f = b.contextType;
    "object" === typeof f && null !== f
      ? (f = eh(f))
      : ((e = Zf(b) ? Xf : H.current),
        (d = b.contextTypes),
        (f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf));
    b = new b(c, f);
    a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
    b.updater = Ei;
    a.stateNode = b;
    b._reactInternals = a;
    d &&
      ((a = a.stateNode),
      (a.__reactInternalMemoizedUnmaskedChildContext = e),
      (a.__reactInternalMemoizedMaskedChildContext = f));
    return b;
  }
  function Hi(a, b, c, d) {
    a = b.state;
    "function" === typeof b.componentWillReceiveProps &&
      b.componentWillReceiveProps(c, d);
    "function" === typeof b.UNSAFE_componentWillReceiveProps &&
      b.UNSAFE_componentWillReceiveProps(c, d);
    b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
  }
  function Ii(a, b, c, d) {
    var e = a.stateNode;
    e.props = c;
    e.state = a.memoizedState;
    e.refs = {};
    kh(a);
    var f = b.contextType;
    "object" === typeof f && null !== f
      ? (e.context = eh(f))
      : ((f = Zf(b) ? Xf : H.current), (e.context = Yf(a, f)));
    e.state = a.memoizedState;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && (Di(a, b, f, c), (e.state = a.memoizedState));
    "function" === typeof b.getDerivedStateFromProps ||
      "function" === typeof e.getSnapshotBeforeUpdate ||
      ("function" !== typeof e.UNSAFE_componentWillMount &&
        "function" !== typeof e.componentWillMount) ||
      ((b = e.state),
      "function" === typeof e.componentWillMount && e.componentWillMount(),
      "function" === typeof e.UNSAFE_componentWillMount &&
        e.UNSAFE_componentWillMount(),
      b !== e.state && Ei.enqueueReplaceState(e, e.state, null),
      qh(a, c, e, d),
      (e.state = a.memoizedState));
    "function" === typeof e.componentDidMount && (a.flags |= 4194308);
  }
  function Ji(a, b) {
    try {
      var c = "",
        d = b;
      do (c += Pa(d)), (d = d.return);
      while (d);
      var e = c;
    } catch (f) {
      e = "\nError generating stack: " + f.message + "\n" + f.stack;
    }
    return { value: a, source: b, stack: e, digest: null };
  }
  function Ki(a, b, c) {
    return {
      value: a,
      source: null,
      stack: null != c ? c : null,
      digest: null != b ? b : null,
    };
  }
  function Li(a, b) {
    try {
      console.error(b.value);
    } catch (c) {
      setTimeout(function () {
        throw c;
      });
    }
  }
  var Mi = "function" === typeof WeakMap ? WeakMap : Map;
  function Ni(a, b, c) {
    c = mh(-1, c);
    c.tag = 3;
    c.payload = { element: null };
    var d = b.value;
    c.callback = function () {
      Oi || ((Oi = true), (Pi = d));
      Li(a, b);
    };
    return c;
  }
  function Qi(a, b, c) {
    c = mh(-1, c);
    c.tag = 3;
    var d = a.type.getDerivedStateFromError;
    if ("function" === typeof d) {
      var e = b.value;
      c.payload = function () {
        return d(e);
      };
      c.callback = function () {
        Li(a, b);
      };
    }
    var f = a.stateNode;
    null !== f &&
      "function" === typeof f.componentDidCatch &&
      (c.callback = function () {
        Li(a, b);
        "function" !== typeof d &&
          (null === Ri ? (Ri = new Set([this])) : Ri.add(this));
        var c = b.stack;
        this.componentDidCatch(b.value, {
          componentStack: null !== c ? c : "",
        });
      });
    return c;
  }
  function Si(a, b, c) {
    var d = a.pingCache;
    if (null === d) {
      d = a.pingCache = new Mi();
      var e = new Set();
      d.set(b, e);
    } else (e = d.get(b)), void 0 === e && ((e = new Set()), d.set(b, e));
    e.has(c) || (e.add(c), (a = Ti.bind(null, a, b, c)), b.then(a, a));
  }
  function Ui(a) {
    do {
      var b;
      if ((b = 13 === a.tag))
        (b = a.memoizedState),
          (b = null !== b ? (null !== b.dehydrated ? true : false) : true);
      if (b) return a;
      a = a.return;
    } while (null !== a);
    return null;
  }
  function Vi(a, b, c, d, e) {
    if (0 === (a.mode & 1))
      return (
        a === b
          ? (a.flags |= 65536)
          : ((a.flags |= 128),
            (c.flags |= 131072),
            (c.flags &= -52805),
            1 === c.tag &&
              (null === c.alternate
                ? (c.tag = 17)
                : ((b = mh(-1, 1)), (b.tag = 2), nh(c, b, 1))),
            (c.lanes |= 1)),
        a
      );
    a.flags |= 65536;
    a.lanes = e;
    return a;
  }
  var Wi = ua.ReactCurrentOwner,
    dh = false;
  function Xi(a, b, c, d) {
    b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
  }
  function Yi(a, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    ch(b, e);
    d = Nh(a, b, c, d, f, e);
    c = Sh();
    if (null !== a && !dh)
      return (
        (b.updateQueue = a.updateQueue),
        (b.flags &= -2053),
        (a.lanes &= ~e),
        Zi(a, b, e)
      );
    I && c && vg(b);
    b.flags |= 1;
    Xi(a, b, d, e);
    return b.child;
  }
  function $i(a, b, c, d, e) {
    if (null === a) {
      var f = c.type;
      if (
        "function" === typeof f &&
        !aj(f) &&
        void 0 === f.defaultProps &&
        null === c.compare &&
        void 0 === c.defaultProps
      )
        return (b.tag = 15), (b.type = f), bj(a, b, f, d, e);
      a = Rg(c.type, null, d, b, b.mode, e);
      a.ref = b.ref;
      a.return = b;
      return (b.child = a);
    }
    f = a.child;
    if (0 === (a.lanes & e)) {
      var g = f.memoizedProps;
      c = c.compare;
      c = null !== c ? c : Ie;
      if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
    }
    b.flags |= 1;
    a = Pg(f, d);
    a.ref = b.ref;
    a.return = b;
    return (b.child = a);
  }
  function bj(a, b, c, d, e) {
    if (null !== a) {
      var f = a.memoizedProps;
      if (Ie(f, d) && a.ref === b.ref)
        if (((dh = false), (b.pendingProps = d = f), 0 !== (a.lanes & e)))
          0 !== (a.flags & 131072) && (dh = true);
        else return (b.lanes = a.lanes), Zi(a, b, e);
    }
    return cj(a, b, c, d, e);
  }
  function dj(a, b, c) {
    var d = b.pendingProps,
      e = d.children,
      f = null !== a ? a.memoizedState : null;
    if ("hidden" === d.mode)
      if (0 === (b.mode & 1))
        (b.memoizedState = {
          baseLanes: 0,
          cachePool: null,
          transitions: null,
        }),
          G(ej, fj),
          (fj |= c);
      else {
        if (0 === (c & 1073741824))
          return (
            (a = null !== f ? f.baseLanes | c : c),
            (b.lanes = b.childLanes = 1073741824),
            (b.memoizedState = {
              baseLanes: a,
              cachePool: null,
              transitions: null,
            }),
            (b.updateQueue = null),
            G(ej, fj),
            (fj |= a),
            null
          );
        b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
        d = null !== f ? f.baseLanes : c;
        G(ej, fj);
        fj |= d;
      }
    else
      null !== f ? ((d = f.baseLanes | c), (b.memoizedState = null)) : (d = c),
        G(ej, fj),
        (fj |= d);
    Xi(a, b, e, c);
    return b.child;
  }
  function gj(a, b) {
    var c = b.ref;
    if ((null === a && null !== c) || (null !== a && a.ref !== c))
      (b.flags |= 512), (b.flags |= 2097152);
  }
  function cj(a, b, c, d, e) {
    var f = Zf(c) ? Xf : H.current;
    f = Yf(b, f);
    ch(b, e);
    c = Nh(a, b, c, d, f, e);
    d = Sh();
    if (null !== a && !dh)
      return (
        (b.updateQueue = a.updateQueue),
        (b.flags &= -2053),
        (a.lanes &= ~e),
        Zi(a, b, e)
      );
    I && d && vg(b);
    b.flags |= 1;
    Xi(a, b, c, e);
    return b.child;
  }
  function hj(a, b, c, d, e) {
    if (Zf(c)) {
      var f = true;
      cg(b);
    } else f = false;
    ch(b, e);
    if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), (d = true);
    else if (null === a) {
      var g = b.stateNode,
        h = b.memoizedProps;
      g.props = h;
      var k = g.context,
        l = c.contextType;
      "object" === typeof l && null !== l
        ? (l = eh(l))
        : ((l = Zf(c) ? Xf : H.current), (l = Yf(b, l)));
      var m = c.getDerivedStateFromProps,
        q =
          "function" === typeof m ||
          "function" === typeof g.getSnapshotBeforeUpdate;
      q ||
        ("function" !== typeof g.UNSAFE_componentWillReceiveProps &&
          "function" !== typeof g.componentWillReceiveProps) ||
        ((h !== d || k !== l) && Hi(b, g, d, l));
      jh = false;
      var r = b.memoizedState;
      g.state = r;
      qh(b, d, g, e);
      k = b.memoizedState;
      h !== d || r !== k || Wf.current || jh
        ? ("function" === typeof m && (Di(b, c, m, d), (k = b.memoizedState)),
          (h = jh || Fi(b, c, h, d, r, k, l))
            ? (q ||
                ("function" !== typeof g.UNSAFE_componentWillMount &&
                  "function" !== typeof g.componentWillMount) ||
                ("function" === typeof g.componentWillMount &&
                  g.componentWillMount(),
                "function" === typeof g.UNSAFE_componentWillMount &&
                  g.UNSAFE_componentWillMount()),
              "function" === typeof g.componentDidMount && (b.flags |= 4194308))
            : ("function" === typeof g.componentDidMount &&
                (b.flags |= 4194308),
              (b.memoizedProps = d),
              (b.memoizedState = k)),
          (g.props = d),
          (g.state = k),
          (g.context = l),
          (d = h))
        : ("function" === typeof g.componentDidMount && (b.flags |= 4194308),
          (d = false));
    } else {
      g = b.stateNode;
      lh(a, b);
      h = b.memoizedProps;
      l = b.type === b.elementType ? h : Ci(b.type, h);
      g.props = l;
      q = b.pendingProps;
      r = g.context;
      k = c.contextType;
      "object" === typeof k && null !== k
        ? (k = eh(k))
        : ((k = Zf(c) ? Xf : H.current), (k = Yf(b, k)));
      var y = c.getDerivedStateFromProps;
      (m =
        "function" === typeof y ||
        "function" === typeof g.getSnapshotBeforeUpdate) ||
        ("function" !== typeof g.UNSAFE_componentWillReceiveProps &&
          "function" !== typeof g.componentWillReceiveProps) ||
        ((h !== q || r !== k) && Hi(b, g, d, k));
      jh = false;
      r = b.memoizedState;
      g.state = r;
      qh(b, d, g, e);
      var n = b.memoizedState;
      h !== q || r !== n || Wf.current || jh
        ? ("function" === typeof y && (Di(b, c, y, d), (n = b.memoizedState)),
          (l = jh || Fi(b, c, l, d, r, n, k) || false)
            ? (m ||
                ("function" !== typeof g.UNSAFE_componentWillUpdate &&
                  "function" !== typeof g.componentWillUpdate) ||
                ("function" === typeof g.componentWillUpdate &&
                  g.componentWillUpdate(d, n, k),
                "function" === typeof g.UNSAFE_componentWillUpdate &&
                  g.UNSAFE_componentWillUpdate(d, n, k)),
              "function" === typeof g.componentDidUpdate && (b.flags |= 4),
              "function" === typeof g.getSnapshotBeforeUpdate &&
                (b.flags |= 1024))
            : ("function" !== typeof g.componentDidUpdate ||
                (h === a.memoizedProps && r === a.memoizedState) ||
                (b.flags |= 4),
              "function" !== typeof g.getSnapshotBeforeUpdate ||
                (h === a.memoizedProps && r === a.memoizedState) ||
                (b.flags |= 1024),
              (b.memoizedProps = d),
              (b.memoizedState = n)),
          (g.props = d),
          (g.state = n),
          (g.context = k),
          (d = l))
        : ("function" !== typeof g.componentDidUpdate ||
            (h === a.memoizedProps && r === a.memoizedState) ||
            (b.flags |= 4),
          "function" !== typeof g.getSnapshotBeforeUpdate ||
            (h === a.memoizedProps && r === a.memoizedState) ||
            (b.flags |= 1024),
          (d = false));
    }
    return jj(a, b, c, d, f, e);
  }
  function jj(a, b, c, d, e, f) {
    gj(a, b);
    var g = 0 !== (b.flags & 128);
    if (!d && !g) return e && dg(b, c, false), Zi(a, b, f);
    d = b.stateNode;
    Wi.current = b;
    var h =
      g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
    b.flags |= 1;
    null !== a && g
      ? ((b.child = Ug(b, a.child, null, f)), (b.child = Ug(b, null, h, f)))
      : Xi(a, b, h, f);
    b.memoizedState = d.state;
    e && dg(b, c, true);
    return b.child;
  }
  function kj(a) {
    var b = a.stateNode;
    b.pendingContext
      ? ag(a, b.pendingContext, b.pendingContext !== b.context)
      : b.context && ag(a, b.context, false);
    yh(a, b.containerInfo);
  }
  function lj(a, b, c, d, e) {
    Ig();
    Jg(e);
    b.flags |= 256;
    Xi(a, b, c, d);
    return b.child;
  }
  var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
  function nj(a) {
    return { baseLanes: a, cachePool: null, transitions: null };
  }
  function oj(a, b, c) {
    var d = b.pendingProps,
      e = L.current,
      f = false,
      g = 0 !== (b.flags & 128),
      h;
    (h = g) ||
      (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
    if (h) (f = true), (b.flags &= -129);
    else if (null === a || null !== a.memoizedState) e |= 1;
    G(L, e & 1);
    if (null === a) {
      Eg(b);
      a = b.memoizedState;
      if (null !== a && ((a = a.dehydrated), null !== a))
        return (
          0 === (b.mode & 1)
            ? (b.lanes = 1)
            : "$!" === a.data
            ? (b.lanes = 8)
            : (b.lanes = 1073741824),
          null
        );
      g = d.children;
      a = d.fallback;
      return f
        ? ((d = b.mode),
          (f = b.child),
          (g = { mode: "hidden", children: g }),
          0 === (d & 1) && null !== f
            ? ((f.childLanes = 0), (f.pendingProps = g))
            : (f = pj(g, d, 0, null)),
          (a = Tg(a, d, c, null)),
          (f.return = b),
          (a.return = b),
          (f.sibling = a),
          (b.child = f),
          (b.child.memoizedState = nj(c)),
          (b.memoizedState = mj),
          a)
        : qj(b, g);
    }
    e = a.memoizedState;
    if (null !== e && ((h = e.dehydrated), null !== h))
      return rj(a, b, g, d, h, e, c);
    if (f) {
      f = d.fallback;
      g = b.mode;
      e = a.child;
      h = e.sibling;
      var k = { mode: "hidden", children: d.children };
      0 === (g & 1) && b.child !== e
        ? ((d = b.child),
          (d.childLanes = 0),
          (d.pendingProps = k),
          (b.deletions = null))
        : ((d = Pg(e, k)), (d.subtreeFlags = e.subtreeFlags & 14680064));
      null !== h ? (f = Pg(h, f)) : ((f = Tg(f, g, c, null)), (f.flags |= 2));
      f.return = b;
      d.return = b;
      d.sibling = f;
      b.child = d;
      d = f;
      f = b.child;
      g = a.child.memoizedState;
      g =
        null === g
          ? nj(c)
          : {
              baseLanes: g.baseLanes | c,
              cachePool: null,
              transitions: g.transitions,
            };
      f.memoizedState = g;
      f.childLanes = a.childLanes & ~c;
      b.memoizedState = mj;
      return d;
    }
    f = a.child;
    a = f.sibling;
    d = Pg(f, { mode: "visible", children: d.children });
    0 === (b.mode & 1) && (d.lanes = c);
    d.return = b;
    d.sibling = null;
    null !== a &&
      ((c = b.deletions),
      null === c ? ((b.deletions = [a]), (b.flags |= 16)) : c.push(a));
    b.child = d;
    b.memoizedState = null;
    return d;
  }
  function qj(a, b) {
    b = pj({ mode: "visible", children: b }, a.mode, 0, null);
    b.return = a;
    return (a.child = b);
  }
  function sj(a, b, c, d) {
    null !== d && Jg(d);
    Ug(b, a.child, null, c);
    a = qj(b, b.pendingProps.children);
    a.flags |= 2;
    b.memoizedState = null;
    return a;
  }
  function rj(a, b, c, d, e, f, g) {
    if (c) {
      if (b.flags & 256)
        return (b.flags &= -257), (d = Ki(Error(p(422)))), sj(a, b, g, d);
      if (null !== b.memoizedState)
        return (b.child = a.child), (b.flags |= 128), null;
      f = d.fallback;
      e = b.mode;
      d = pj({ mode: "visible", children: d.children }, e, 0, null);
      f = Tg(f, e, g, null);
      f.flags |= 2;
      d.return = b;
      f.return = b;
      d.sibling = f;
      b.child = d;
      0 !== (b.mode & 1) && Ug(b, a.child, null, g);
      b.child.memoizedState = nj(g);
      b.memoizedState = mj;
      return f;
    }
    if (0 === (b.mode & 1)) return sj(a, b, g, null);
    if ("$!" === e.data) {
      d = e.nextSibling && e.nextSibling.dataset;
      if (d) var h = d.dgst;
      d = h;
      f = Error(p(419));
      d = Ki(f, d, void 0);
      return sj(a, b, g, d);
    }
    h = 0 !== (g & a.childLanes);
    if (dh || h) {
      d = Q;
      if (null !== d) {
        switch (g & -g) {
          case 4:
            e = 2;
            break;
          case 16:
            e = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            e = 32;
            break;
          case 536870912:
            e = 268435456;
            break;
          default:
            e = 0;
        }
        e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
        0 !== e &&
          e !== f.retryLane &&
          ((f.retryLane = e), ih(a, e), gi(d, a, e, -1));
      }
      tj();
      d = Ki(Error(p(421)));
      return sj(a, b, g, d);
    }
    if ("$?" === e.data)
      return (
        (b.flags |= 128),
        (b.child = a.child),
        (b = uj.bind(null, a)),
        (e._reactRetry = b),
        null
      );
    a = f.treeContext;
    yg = Lf(e.nextSibling);
    xg = b;
    I = true;
    zg = null;
    null !== a &&
      ((og[pg++] = rg),
      (og[pg++] = sg),
      (og[pg++] = qg),
      (rg = a.id),
      (sg = a.overflow),
      (qg = b));
    b = qj(b, d.children);
    b.flags |= 4096;
    return b;
  }
  function vj(a, b, c) {
    a.lanes |= b;
    var d = a.alternate;
    null !== d && (d.lanes |= b);
    bh(a.return, b, c);
  }
  function wj(a, b, c, d, e) {
    var f = a.memoizedState;
    null === f
      ? (a.memoizedState = {
          isBackwards: b,
          rendering: null,
          renderingStartTime: 0,
          last: d,
          tail: c,
          tailMode: e,
        })
      : ((f.isBackwards = b),
        (f.rendering = null),
        (f.renderingStartTime = 0),
        (f.last = d),
        (f.tail = c),
        (f.tailMode = e));
  }
  function xj(a, b, c) {
    var d = b.pendingProps,
      e = d.revealOrder,
      f = d.tail;
    Xi(a, b, d.children, c);
    d = L.current;
    if (0 !== (d & 2)) (d = (d & 1) | 2), (b.flags |= 128);
    else {
      if (null !== a && 0 !== (a.flags & 128))
        a: for (a = b.child; null !== a; ) {
          if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);
          else if (19 === a.tag) vj(a, c, b);
          else if (null !== a.child) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b) break a;
          for (; null === a.sibling; ) {
            if (null === a.return || a.return === b) break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
      d &= 1;
    }
    G(L, d);
    if (0 === (b.mode & 1)) b.memoizedState = null;
    else
      switch (e) {
        case "forwards":
          c = b.child;
          for (e = null; null !== c; )
            (a = c.alternate),
              null !== a && null === Ch(a) && (e = c),
              (c = c.sibling);
          c = e;
          null === c
            ? ((e = b.child), (b.child = null))
            : ((e = c.sibling), (c.sibling = null));
          wj(b, false, e, c, f);
          break;
        case "backwards":
          c = null;
          e = b.child;
          for (b.child = null; null !== e; ) {
            a = e.alternate;
            if (null !== a && null === Ch(a)) {
              b.child = e;
              break;
            }
            a = e.sibling;
            e.sibling = c;
            c = e;
            e = a;
          }
          wj(b, true, c, null, f);
          break;
        case "together":
          wj(b, false, null, null, void 0);
          break;
        default:
          b.memoizedState = null;
      }
    return b.child;
  }
  function ij(a, b) {
    0 === (b.mode & 1) &&
      null !== a &&
      ((a.alternate = null), (b.alternate = null), (b.flags |= 2));
  }
  function Zi(a, b, c) {
    null !== a && (b.dependencies = a.dependencies);
    rh |= b.lanes;
    if (0 === (c & b.childLanes)) return null;
    if (null !== a && b.child !== a.child) throw Error(p(153));
    if (null !== b.child) {
      a = b.child;
      c = Pg(a, a.pendingProps);
      b.child = c;
      for (c.return = b; null !== a.sibling; )
        (a = a.sibling),
          (c = c.sibling = Pg(a, a.pendingProps)),
          (c.return = b);
      c.sibling = null;
    }
    return b.child;
  }
  function yj(a, b, c) {
    switch (b.tag) {
      case 3:
        kj(b);
        Ig();
        break;
      case 5:
        Ah(b);
        break;
      case 1:
        Zf(b.type) && cg(b);
        break;
      case 4:
        yh(b, b.stateNode.containerInfo);
        break;
      case 10:
        var d = b.type._context,
          e = b.memoizedProps.value;
        G(Wg, d._currentValue);
        d._currentValue = e;
        break;
      case 13:
        d = b.memoizedState;
        if (null !== d) {
          if (null !== d.dehydrated)
            return G(L, L.current & 1), (b.flags |= 128), null;
          if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
          G(L, L.current & 1);
          a = Zi(a, b, c);
          return null !== a ? a.sibling : null;
        }
        G(L, L.current & 1);
        break;
      case 19:
        d = 0 !== (c & b.childLanes);
        if (0 !== (a.flags & 128)) {
          if (d) return xj(a, b, c);
          b.flags |= 128;
        }
        e = b.memoizedState;
        null !== e &&
          ((e.rendering = null), (e.tail = null), (e.lastEffect = null));
        G(L, L.current);
        if (d) break;
        else return null;
      case 22:
      case 23:
        return (b.lanes = 0), dj(a, b, c);
    }
    return Zi(a, b, c);
  }
  var zj, Aj, Bj, Cj;
  zj = function (a, b) {
    for (var c = b.child; null !== c; ) {
      if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
      else if (4 !== c.tag && null !== c.child) {
        c.child.return = c;
        c = c.child;
        continue;
      }
      if (c === b) break;
      for (; null === c.sibling; ) {
        if (null === c.return || c.return === b) return;
        c = c.return;
      }
      c.sibling.return = c.return;
      c = c.sibling;
    }
  };
  Aj = function () {};
  Bj = function (a, b, c, d) {
    var e = a.memoizedProps;
    if (e !== d) {
      a = b.stateNode;
      xh(uh.current);
      var f = null;
      switch (c) {
        case "input":
          e = Ya(a, e);
          d = Ya(a, d);
          f = [];
          break;
        case "select":
          e = A({}, e, { value: void 0 });
          d = A({}, d, { value: void 0 });
          f = [];
          break;
        case "textarea":
          e = gb(a, e);
          d = gb(a, d);
          f = [];
          break;
        default:
          "function" !== typeof e.onClick &&
            "function" === typeof d.onClick &&
            (a.onclick = Bf);
      }
      ub(c, d);
      var g;
      c = null;
      for (l in e)
        if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l])
          if ("style" === l) {
            var h = e[l];
            for (g in h) h.hasOwnProperty(g) && (c || (c = {}), (c[g] = ""));
          } else
            "dangerouslySetInnerHTML" !== l &&
              "children" !== l &&
              "suppressContentEditableWarning" !== l &&
              "suppressHydrationWarning" !== l &&
              "autoFocus" !== l &&
              (ea.hasOwnProperty(l)
                ? f || (f = [])
                : (f = f || []).push(l, null));
      for (l in d) {
        var k = d[l];
        h = null != e ? e[l] : void 0;
        if (d.hasOwnProperty(l) && k !== h && (null != k || null != h))
          if ("style" === l)
            if (h) {
              for (g in h)
                !h.hasOwnProperty(g) ||
                  (k && k.hasOwnProperty(g)) ||
                  (c || (c = {}), (c[g] = ""));
              for (g in k)
                k.hasOwnProperty(g) &&
                  h[g] !== k[g] &&
                  (c || (c = {}), (c[g] = k[g]));
            } else c || (f || (f = []), f.push(l, c)), (c = k);
          else
            "dangerouslySetInnerHTML" === l
              ? ((k = k ? k.__html : void 0),
                (h = h ? h.__html : void 0),
                null != k && h !== k && (f = f || []).push(l, k))
              : "children" === l
              ? ("string" !== typeof k && "number" !== typeof k) ||
                (f = f || []).push(l, "" + k)
              : "suppressContentEditableWarning" !== l &&
                "suppressHydrationWarning" !== l &&
                (ea.hasOwnProperty(l)
                  ? (null != k && "onScroll" === l && D("scroll", a),
                    f || h === k || (f = []))
                  : (f = f || []).push(l, k));
      }
      c && (f = f || []).push("style", c);
      var l = f;
      if ((b.updateQueue = l)) b.flags |= 4;
    }
  };
  Cj = function (a, b, c, d) {
    c !== d && (b.flags |= 4);
  };
  function Dj(a, b) {
    if (!I)
      switch (a.tailMode) {
        case "hidden":
          b = a.tail;
          for (var c = null; null !== b; )
            null !== b.alternate && (c = b), (b = b.sibling);
          null === c ? (a.tail = null) : (c.sibling = null);
          break;
        case "collapsed":
          c = a.tail;
          for (var d = null; null !== c; )
            null !== c.alternate && (d = c), (c = c.sibling);
          null === d
            ? b || null === a.tail
              ? (a.tail = null)
              : (a.tail.sibling = null)
            : (d.sibling = null);
      }
  }
  function S(a) {
    var b = null !== a.alternate && a.alternate.child === a.child,
      c = 0,
      d = 0;
    if (b)
      for (var e = a.child; null !== e; )
        (c |= e.lanes | e.childLanes),
          (d |= e.subtreeFlags & 14680064),
          (d |= e.flags & 14680064),
          (e.return = a),
          (e = e.sibling);
    else
      for (e = a.child; null !== e; )
        (c |= e.lanes | e.childLanes),
          (d |= e.subtreeFlags),
          (d |= e.flags),
          (e.return = a),
          (e = e.sibling);
    a.subtreeFlags |= d;
    a.childLanes = c;
    return b;
  }
  function Ej(a, b, c) {
    var d = b.pendingProps;
    wg(b);
    switch (b.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return S(b), null;
      case 1:
        return Zf(b.type) && $f(), S(b), null;
      case 3:
        d = b.stateNode;
        zh();
        E(Wf);
        E(H);
        Eh();
        d.pendingContext &&
          ((d.context = d.pendingContext), (d.pendingContext = null));
        if (null === a || null === a.child)
          Gg(b)
            ? (b.flags |= 4)
            : null === a ||
              (a.memoizedState.isDehydrated && 0 === (b.flags & 256)) ||
              ((b.flags |= 1024), null !== zg && (Fj(zg), (zg = null)));
        Aj(a, b);
        S(b);
        return null;
      case 5:
        Bh(b);
        var e = xh(wh.current);
        c = b.type;
        if (null !== a && null != b.stateNode)
          Bj(a, b, c, d, e),
            a.ref !== b.ref && ((b.flags |= 512), (b.flags |= 2097152));
        else {
          if (!d) {
            if (null === b.stateNode) throw Error(p(166));
            S(b);
            return null;
          }
          a = xh(uh.current);
          if (Gg(b)) {
            d = b.stateNode;
            c = b.type;
            var f = b.memoizedProps;
            d[Of] = b;
            d[Pf] = f;
            a = 0 !== (b.mode & 1);
            switch (c) {
              case "dialog":
                D("cancel", d);
                D("close", d);
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", d);
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++) D(lf[e], d);
                break;
              case "source":
                D("error", d);
                break;
              case "img":
              case "image":
              case "link":
                D("error", d);
                D("load", d);
                break;
              case "details":
                D("toggle", d);
                break;
              case "input":
                Za(d, f);
                D("invalid", d);
                break;
              case "select":
                d._wrapperState = { wasMultiple: !!f.multiple };
                D("invalid", d);
                break;
              case "textarea":
                hb(d, f), D("invalid", d);
            }
            ub(c, f);
            e = null;
            for (var g in f)
              if (f.hasOwnProperty(g)) {
                var h = f[g];
                "children" === g
                  ? "string" === typeof h
                    ? d.textContent !== h &&
                      (true !== f.suppressHydrationWarning &&
                        Af(d.textContent, h, a),
                      (e = ["children", h]))
                    : "number" === typeof h &&
                      d.textContent !== "" + h &&
                      (true !== f.suppressHydrationWarning &&
                        Af(d.textContent, h, a),
                      (e = ["children", "" + h]))
                  : ea.hasOwnProperty(g) &&
                    null != h &&
                    "onScroll" === g &&
                    D("scroll", d);
              }
            switch (c) {
              case "input":
                Va(d);
                db(d, f, true);
                break;
              case "textarea":
                Va(d);
                jb(d);
                break;
              case "select":
              case "option":
                break;
              default:
                "function" === typeof f.onClick && (d.onclick = Bf);
            }
            d = e;
            b.updateQueue = d;
            null !== d && (b.flags |= 4);
          } else {
            g = 9 === e.nodeType ? e : e.ownerDocument;
            "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
            "http://www.w3.org/1999/xhtml" === a
              ? "script" === c
                ? ((a = g.createElement("div")),
                  (a.innerHTML = "<script>\x3c/script>"),
                  (a = a.removeChild(a.firstChild)))
                : "string" === typeof d.is
                ? (a = g.createElement(c, { is: d.is }))
                : ((a = g.createElement(c)),
                  "select" === c &&
                    ((g = a),
                    d.multiple
                      ? (g.multiple = true)
                      : d.size && (g.size = d.size)))
              : (a = g.createElementNS(a, c));
            a[Of] = b;
            a[Pf] = d;
            zj(a, b, false, false);
            b.stateNode = a;
            a: {
              g = vb(c, d);
              switch (c) {
                case "dialog":
                  D("cancel", a);
                  D("close", a);
                  e = d;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D("load", a);
                  e = d;
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < lf.length; e++) D(lf[e], a);
                  e = d;
                  break;
                case "source":
                  D("error", a);
                  e = d;
                  break;
                case "img":
                case "image":
                case "link":
                  D("error", a);
                  D("load", a);
                  e = d;
                  break;
                case "details":
                  D("toggle", a);
                  e = d;
                  break;
                case "input":
                  Za(a, d);
                  e = Ya(a, d);
                  D("invalid", a);
                  break;
                case "option":
                  e = d;
                  break;
                case "select":
                  a._wrapperState = { wasMultiple: !!d.multiple };
                  e = A({}, d, { value: void 0 });
                  D("invalid", a);
                  break;
                case "textarea":
                  hb(a, d);
                  e = gb(a, d);
                  D("invalid", a);
                  break;
                default:
                  e = d;
              }
              ub(c, e);
              h = e;
              for (f in h)
                if (h.hasOwnProperty(f)) {
                  var k = h[f];
                  "style" === f
                    ? sb(a, k)
                    : "dangerouslySetInnerHTML" === f
                    ? ((k = k ? k.__html : void 0), null != k && nb(a, k))
                    : "children" === f
                    ? "string" === typeof k
                      ? ("textarea" !== c || "" !== k) && ob(a, k)
                      : "number" === typeof k && ob(a, "" + k)
                    : "suppressContentEditableWarning" !== f &&
                      "suppressHydrationWarning" !== f &&
                      "autoFocus" !== f &&
                      (ea.hasOwnProperty(f)
                        ? null != k && "onScroll" === f && D("scroll", a)
                        : null != k && ta(a, f, k, g));
                }
              switch (c) {
                case "input":
                  Va(a);
                  db(a, d, false);
                  break;
                case "textarea":
                  Va(a);
                  jb(a);
                  break;
                case "option":
                  null != d.value && a.setAttribute("value", "" + Sa(d.value));
                  break;
                case "select":
                  a.multiple = !!d.multiple;
                  f = d.value;
                  null != f
                    ? fb(a, !!d.multiple, f, false)
                    : null != d.defaultValue &&
                      fb(a, !!d.multiple, d.defaultValue, true);
                  break;
                default:
                  "function" === typeof e.onClick && (a.onclick = Bf);
              }
              switch (c) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  d = !!d.autoFocus;
                  break a;
                case "img":
                  d = true;
                  break a;
                default:
                  d = false;
              }
            }
            d && (b.flags |= 4);
          }
          null !== b.ref && ((b.flags |= 512), (b.flags |= 2097152));
        }
        S(b);
        return null;
      case 6:
        if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);
        else {
          if ("string" !== typeof d && null === b.stateNode)
            throw Error(p(166));
          c = xh(wh.current);
          xh(uh.current);
          if (Gg(b)) {
            d = b.stateNode;
            c = b.memoizedProps;
            d[Of] = b;
            if ((f = d.nodeValue !== c))
              if (((a = xg), null !== a))
                switch (a.tag) {
                  case 3:
                    Af(d.nodeValue, c, 0 !== (a.mode & 1));
                    break;
                  case 5:
                    true !== a.memoizedProps.suppressHydrationWarning &&
                      Af(d.nodeValue, c, 0 !== (a.mode & 1));
                }
            f && (b.flags |= 4);
          } else
            (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d)),
              (d[Of] = b),
              (b.stateNode = d);
        }
        S(b);
        return null;
      case 13:
        E(L);
        d = b.memoizedState;
        if (
          null === a ||
          (null !== a.memoizedState && null !== a.memoizedState.dehydrated)
        ) {
          if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128))
            Hg(), Ig(), (b.flags |= 98560), (f = false);
          else if (((f = Gg(b)), null !== d && null !== d.dehydrated)) {
            if (null === a) {
              if (!f) throw Error(p(318));
              f = b.memoizedState;
              f = null !== f ? f.dehydrated : null;
              if (!f) throw Error(p(317));
              f[Of] = b;
            } else
              Ig(),
                0 === (b.flags & 128) && (b.memoizedState = null),
                (b.flags |= 4);
            S(b);
            f = false;
          } else null !== zg && (Fj(zg), (zg = null)), (f = true);
          if (!f) return b.flags & 65536 ? b : null;
        }
        if (0 !== (b.flags & 128)) return (b.lanes = c), b;
        d = null !== d;
        d !== (null !== a && null !== a.memoizedState) &&
          d &&
          ((b.child.flags |= 8192),
          0 !== (b.mode & 1) &&
            (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
        null !== b.updateQueue && (b.flags |= 4);
        S(b);
        return null;
      case 4:
        return (
          zh(),
          Aj(a, b),
          null === a && sf(b.stateNode.containerInfo),
          S(b),
          null
        );
      case 10:
        return ah(b.type._context), S(b), null;
      case 17:
        return Zf(b.type) && $f(), S(b), null;
      case 19:
        E(L);
        f = b.memoizedState;
        if (null === f) return S(b), null;
        d = 0 !== (b.flags & 128);
        g = f.rendering;
        if (null === g)
          if (d) Dj(f, false);
          else {
            if (0 !== T || (null !== a && 0 !== (a.flags & 128)))
              for (a = b.child; null !== a; ) {
                g = Ch(a);
                if (null !== g) {
                  b.flags |= 128;
                  Dj(f, false);
                  d = g.updateQueue;
                  null !== d && ((b.updateQueue = d), (b.flags |= 4));
                  b.subtreeFlags = 0;
                  d = c;
                  for (c = b.child; null !== c; )
                    (f = c),
                      (a = d),
                      (f.flags &= 14680066),
                      (g = f.alternate),
                      null === g
                        ? ((f.childLanes = 0),
                          (f.lanes = a),
                          (f.child = null),
                          (f.subtreeFlags = 0),
                          (f.memoizedProps = null),
                          (f.memoizedState = null),
                          (f.updateQueue = null),
                          (f.dependencies = null),
                          (f.stateNode = null))
                        : ((f.childLanes = g.childLanes),
                          (f.lanes = g.lanes),
                          (f.child = g.child),
                          (f.subtreeFlags = 0),
                          (f.deletions = null),
                          (f.memoizedProps = g.memoizedProps),
                          (f.memoizedState = g.memoizedState),
                          (f.updateQueue = g.updateQueue),
                          (f.type = g.type),
                          (a = g.dependencies),
                          (f.dependencies =
                            null === a
                              ? null
                              : {
                                  lanes: a.lanes,
                                  firstContext: a.firstContext,
                                })),
                      (c = c.sibling);
                  G(L, (L.current & 1) | 2);
                  return b.child;
                }
                a = a.sibling;
              }
            null !== f.tail &&
              B() > Gj &&
              ((b.flags |= 128), (d = true), Dj(f, false), (b.lanes = 4194304));
          }
        else {
          if (!d)
            if (((a = Ch(g)), null !== a)) {
              if (
                ((b.flags |= 128),
                (d = true),
                (c = a.updateQueue),
                null !== c && ((b.updateQueue = c), (b.flags |= 4)),
                Dj(f, true),
                null === f.tail &&
                  "hidden" === f.tailMode &&
                  !g.alternate &&
                  !I)
              )
                return S(b), null;
            } else
              2 * B() - f.renderingStartTime > Gj &&
                1073741824 !== c &&
                ((b.flags |= 128),
                (d = true),
                Dj(f, false),
                (b.lanes = 4194304));
          f.isBackwards
            ? ((g.sibling = b.child), (b.child = g))
            : ((c = f.last),
              null !== c ? (c.sibling = g) : (b.child = g),
              (f.last = g));
        }
        if (null !== f.tail)
          return (
            (b = f.tail),
            (f.rendering = b),
            (f.tail = b.sibling),
            (f.renderingStartTime = B()),
            (b.sibling = null),
            (c = L.current),
            G(L, d ? (c & 1) | 2 : c & 1),
            b
          );
        S(b);
        return null;
      case 22:
      case 23:
        return (
          Hj(),
          (d = null !== b.memoizedState),
          null !== a && (null !== a.memoizedState) !== d && (b.flags |= 8192),
          d && 0 !== (b.mode & 1)
            ? 0 !== (fj & 1073741824) &&
              (S(b), b.subtreeFlags & 6 && (b.flags |= 8192))
            : S(b),
          null
        );
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(p(156, b.tag));
  }
  function Ij(a, b) {
    wg(b);
    switch (b.tag) {
      case 1:
        return (
          Zf(b.type) && $f(),
          (a = b.flags),
          a & 65536 ? ((b.flags = (a & -65537) | 128), b) : null
        );
      case 3:
        return (
          zh(),
          E(Wf),
          E(H),
          Eh(),
          (a = b.flags),
          0 !== (a & 65536) && 0 === (a & 128)
            ? ((b.flags = (a & -65537) | 128), b)
            : null
        );
      case 5:
        return Bh(b), null;
      case 13:
        E(L);
        a = b.memoizedState;
        if (null !== a && null !== a.dehydrated) {
          if (null === b.alternate) throw Error(p(340));
          Ig();
        }
        a = b.flags;
        return a & 65536 ? ((b.flags = (a & -65537) | 128), b) : null;
      case 19:
        return E(L), null;
      case 4:
        return zh(), null;
      case 10:
        return ah(b.type._context), null;
      case 22:
      case 23:
        return Hj(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var Jj = false,
    U = false,
    Kj = "function" === typeof WeakSet ? WeakSet : Set,
    V = null;
  function Lj(a, b) {
    var c = a.ref;
    if (null !== c)
      if ("function" === typeof c)
        try {
          c(null);
        } catch (d) {
          W(a, b, d);
        }
      else c.current = null;
  }
  function Mj(a, b, c) {
    try {
      c();
    } catch (d) {
      W(a, b, d);
    }
  }
  var Nj = false;
  function Oj(a, b) {
    Cf = dd;
    a = Me();
    if (Ne(a)) {
      if ("selectionStart" in a)
        var c = { start: a.selectionStart, end: a.selectionEnd };
      else
        a: {
          c = ((c = a.ownerDocument) && c.defaultView) || window;
          var d = c.getSelection && c.getSelection();
          if (d && 0 !== d.rangeCount) {
            c = d.anchorNode;
            var e = d.anchorOffset,
              f = d.focusNode;
            d = d.focusOffset;
            try {
              c.nodeType, f.nodeType;
            } catch (F) {
              c = null;
              break a;
            }
            var g = 0,
              h = -1,
              k = -1,
              l = 0,
              m = 0,
              q = a,
              r = null;
            b: for (;;) {
              for (var y; ; ) {
                q !== c || (0 !== e && 3 !== q.nodeType) || (h = g + e);
                q !== f || (0 !== d && 3 !== q.nodeType) || (k = g + d);
                3 === q.nodeType && (g += q.nodeValue.length);
                if (null === (y = q.firstChild)) break;
                r = q;
                q = y;
              }
              for (;;) {
                if (q === a) break b;
                r === c && ++l === e && (h = g);
                r === f && ++m === d && (k = g);
                if (null !== (y = q.nextSibling)) break;
                q = r;
                r = q.parentNode;
              }
              q = y;
            }
            c = -1 === h || -1 === k ? null : { start: h, end: k };
          } else c = null;
        }
      c = c || { start: 0, end: 0 };
    } else c = null;
    Df = { focusedElem: a, selectionRange: c };
    dd = false;
    for (V = b; null !== V; )
      if (((b = V), (a = b.child), 0 !== (b.subtreeFlags & 1028) && null !== a))
        (a.return = b), (V = a);
      else
        for (; null !== V; ) {
          b = V;
          try {
            var n = b.alternate;
            if (0 !== (b.flags & 1024))
              switch (b.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (null !== n) {
                    var t = n.memoizedProps,
                      J = n.memoizedState,
                      x = b.stateNode,
                      w = x.getSnapshotBeforeUpdate(
                        b.elementType === b.type ? t : Ci(b.type, t),
                        J
                      );
                    x.__reactInternalSnapshotBeforeUpdate = w;
                  }
                  break;
                case 3:
                  var u = b.stateNode.containerInfo;
                  1 === u.nodeType
                    ? (u.textContent = "")
                    : 9 === u.nodeType &&
                      u.documentElement &&
                      u.removeChild(u.documentElement);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(p(163));
              }
          } catch (F) {
            W(b, b.return, F);
          }
          a = b.sibling;
          if (null !== a) {
            a.return = b.return;
            V = a;
            break;
          }
          V = b.return;
        }
    n = Nj;
    Nj = false;
    return n;
  }
  function Pj(a, b, c) {
    var d = b.updateQueue;
    d = null !== d ? d.lastEffect : null;
    if (null !== d) {
      var e = (d = d.next);
      do {
        if ((e.tag & a) === a) {
          var f = e.destroy;
          e.destroy = void 0;
          void 0 !== f && Mj(b, c, f);
        }
        e = e.next;
      } while (e !== d);
    }
  }
  function Qj(a, b) {
    b = b.updateQueue;
    b = null !== b ? b.lastEffect : null;
    if (null !== b) {
      var c = (b = b.next);
      do {
        if ((c.tag & a) === a) {
          var d = c.create;
          c.destroy = d();
        }
        c = c.next;
      } while (c !== b);
    }
  }
  function Rj(a) {
    var b = a.ref;
    if (null !== b) {
      var c = a.stateNode;
      switch (a.tag) {
        case 5:
          a = c;
          break;
        default:
          a = c;
      }
      "function" === typeof b ? b(a) : (b.current = a);
    }
  }
  function Sj(a) {
    var b = a.alternate;
    null !== b && ((a.alternate = null), Sj(b));
    a.child = null;
    a.deletions = null;
    a.sibling = null;
    5 === a.tag &&
      ((b = a.stateNode),
      null !== b &&
        (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
    a.stateNode = null;
    a.return = null;
    a.dependencies = null;
    a.memoizedProps = null;
    a.memoizedState = null;
    a.pendingProps = null;
    a.stateNode = null;
    a.updateQueue = null;
  }
  function Tj(a) {
    return 5 === a.tag || 3 === a.tag || 4 === a.tag;
  }
  function Uj(a) {
    a: for (;;) {
      for (; null === a.sibling; ) {
        if (null === a.return || Tj(a.return)) return null;
        a = a.return;
      }
      a.sibling.return = a.return;
      for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
        if (a.flags & 2) continue a;
        if (null === a.child || 4 === a.tag) continue a;
        else (a.child.return = a), (a = a.child);
      }
      if (!(a.flags & 2)) return a.stateNode;
    }
  }
  function Vj(a, b, c) {
    var d = a.tag;
    if (5 === d || 6 === d)
      (a = a.stateNode),
        b
          ? 8 === c.nodeType
            ? c.parentNode.insertBefore(a, b)
            : c.insertBefore(a, b)
          : (8 === c.nodeType
              ? ((b = c.parentNode), b.insertBefore(a, c))
              : ((b = c), b.appendChild(a)),
            (c = c._reactRootContainer),
            (null !== c && void 0 !== c) ||
              null !== b.onclick ||
              (b.onclick = Bf));
    else if (4 !== d && ((a = a.child), null !== a))
      for (Vj(a, b, c), a = a.sibling; null !== a; )
        Vj(a, b, c), (a = a.sibling);
  }
  function Wj(a, b, c) {
    var d = a.tag;
    if (5 === d || 6 === d)
      (a = a.stateNode), b ? c.insertBefore(a, b) : c.appendChild(a);
    else if (4 !== d && ((a = a.child), null !== a))
      for (Wj(a, b, c), a = a.sibling; null !== a; )
        Wj(a, b, c), (a = a.sibling);
  }
  var X = null,
    Xj = false;
  function Yj(a, b, c) {
    for (c = c.child; null !== c; ) Zj(a, b, c), (c = c.sibling);
  }
  function Zj(a, b, c) {
    if (lc && "function" === typeof lc.onCommitFiberUnmount)
      try {
        lc.onCommitFiberUnmount(kc, c);
      } catch (h) {}
    switch (c.tag) {
      case 5:
        U || Lj(c, b);
      case 6:
        var d = X,
          e = Xj;
        X = null;
        Yj(a, b, c);
        X = d;
        Xj = e;
        null !== X &&
          (Xj
            ? ((a = X),
              (c = c.stateNode),
              8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c))
            : X.removeChild(c.stateNode));
        break;
      case 18:
        null !== X &&
          (Xj
            ? ((a = X),
              (c = c.stateNode),
              8 === a.nodeType
                ? Kf(a.parentNode, c)
                : 1 === a.nodeType && Kf(a, c),
              bd(a))
            : Kf(X, c.stateNode));
        break;
      case 4:
        d = X;
        e = Xj;
        X = c.stateNode.containerInfo;
        Xj = true;
        Yj(a, b, c);
        X = d;
        Xj = e;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        if (
          !U &&
          ((d = c.updateQueue), null !== d && ((d = d.lastEffect), null !== d))
        ) {
          e = d = d.next;
          do {
            var f = e,
              g = f.destroy;
            f = f.tag;
            void 0 !== g &&
              (0 !== (f & 2) ? Mj(c, b, g) : 0 !== (f & 4) && Mj(c, b, g));
            e = e.next;
          } while (e !== d);
        }
        Yj(a, b, c);
        break;
      case 1:
        if (
          !U &&
          (Lj(c, b),
          (d = c.stateNode),
          "function" === typeof d.componentWillUnmount)
        )
          try {
            (d.props = c.memoizedProps),
              (d.state = c.memoizedState),
              d.componentWillUnmount();
          } catch (h) {
            W(c, b, h);
          }
        Yj(a, b, c);
        break;
      case 21:
        Yj(a, b, c);
        break;
      case 22:
        c.mode & 1
          ? ((U = (d = U) || null !== c.memoizedState), Yj(a, b, c), (U = d))
          : Yj(a, b, c);
        break;
      default:
        Yj(a, b, c);
    }
  }
  function ak(a) {
    var b = a.updateQueue;
    if (null !== b) {
      a.updateQueue = null;
      var c = a.stateNode;
      null === c && (c = a.stateNode = new Kj());
      b.forEach(function (b) {
        var d = bk.bind(null, a, b);
        c.has(b) || (c.add(b), b.then(d, d));
      });
    }
  }
  function ck(a, b) {
    var c = b.deletions;
    if (null !== c)
      for (var d = 0; d < c.length; d++) {
        var e = c[d];
        try {
          var f = a,
            g = b,
            h = g;
          a: for (; null !== h; ) {
            switch (h.tag) {
              case 5:
                X = h.stateNode;
                Xj = !1;
                break a;
              case 3:
                X = h.stateNode.containerInfo;
                Xj = !0;
                break a;
              case 4:
                X = h.stateNode.containerInfo;
                Xj = !0;
                break a;
            }
            h = h.return;
          }
          if (null === X) throw Error(p(160));
          Zj(f, g, e);
          X = null;
          Xj = !1;
          var k = e.alternate;
          null !== k && (k.return = null);
          e.return = null;
        } catch (l) {
          W(e, b, l);
        }
      }
    if (b.subtreeFlags & 12854)
      for (b = b.child; null !== b; ) dk(b, a), (b = b.sibling);
  }
  function dk(a, b) {
    var c = a.alternate,
      d = a.flags;
    switch (a.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        ck(b, a);
        ek(a);
        if (d & 4) {
          try {
            Pj(3, a, a.return), Qj(3, a);
          } catch (t) {
            W(a, a.return, t);
          }
          try {
            Pj(5, a, a.return);
          } catch (t) {
            W(a, a.return, t);
          }
        }
        break;
      case 1:
        ck(b, a);
        ek(a);
        d & 512 && null !== c && Lj(c, c.return);
        break;
      case 5:
        ck(b, a);
        ek(a);
        d & 512 && null !== c && Lj(c, c.return);
        if (a.flags & 32) {
          var e = a.stateNode;
          try {
            ob(e, "");
          } catch (t) {
            W(a, a.return, t);
          }
        }
        if (d & 4 && ((e = a.stateNode), null != e)) {
          var f = a.memoizedProps,
            g = null !== c ? c.memoizedProps : f,
            h = a.type,
            k = a.updateQueue;
          a.updateQueue = null;
          if (null !== k)
            try {
              "input" === h && "radio" === f.type && null != f.name && ab(e, f);
              vb(h, g);
              var l = vb(h, f);
              for (g = 0; g < k.length; g += 2) {
                var m = k[g],
                  q = k[g + 1];
                "style" === m
                  ? sb(e, q)
                  : "dangerouslySetInnerHTML" === m
                  ? nb(e, q)
                  : "children" === m
                  ? ob(e, q)
                  : ta(e, m, q, l);
              }
              switch (h) {
                case "input":
                  bb(e, f);
                  break;
                case "textarea":
                  ib(e, f);
                  break;
                case "select":
                  var r = e._wrapperState.wasMultiple;
                  e._wrapperState.wasMultiple = !!f.multiple;
                  var y = f.value;
                  null != y
                    ? fb(e, !!f.multiple, y, !1)
                    : r !== !!f.multiple &&
                      (null != f.defaultValue
                        ? fb(e, !!f.multiple, f.defaultValue, !0)
                        : fb(e, !!f.multiple, f.multiple ? [] : "", !1));
              }
              e[Pf] = f;
            } catch (t) {
              W(a, a.return, t);
            }
        }
        break;
      case 6:
        ck(b, a);
        ek(a);
        if (d & 4) {
          if (null === a.stateNode) throw Error(p(162));
          e = a.stateNode;
          f = a.memoizedProps;
          try {
            e.nodeValue = f;
          } catch (t) {
            W(a, a.return, t);
          }
        }
        break;
      case 3:
        ck(b, a);
        ek(a);
        if (d & 4 && null !== c && c.memoizedState.isDehydrated)
          try {
            bd(b.containerInfo);
          } catch (t) {
            W(a, a.return, t);
          }
        break;
      case 4:
        ck(b, a);
        ek(a);
        break;
      case 13:
        ck(b, a);
        ek(a);
        e = a.child;
        e.flags & 8192 &&
          ((f = null !== e.memoizedState),
          (e.stateNode.isHidden = f),
          !f ||
            (null !== e.alternate && null !== e.alternate.memoizedState) ||
            (fk = B()));
        d & 4 && ak(a);
        break;
      case 22:
        m = null !== c && null !== c.memoizedState;
        a.mode & 1 ? ((U = (l = U) || m), ck(b, a), (U = l)) : ck(b, a);
        ek(a);
        if (d & 8192) {
          l = null !== a.memoizedState;
          if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1))
            for (V = a, m = a.child; null !== m; ) {
              for (q = V = m; null !== V; ) {
                r = V;
                y = r.child;
                switch (r.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Pj(4, r, r.return);
                    break;
                  case 1:
                    Lj(r, r.return);
                    var n = r.stateNode;
                    if ("function" === typeof n.componentWillUnmount) {
                      d = r;
                      c = r.return;
                      try {
                        (b = d),
                          (n.props = b.memoizedProps),
                          (n.state = b.memoizedState),
                          n.componentWillUnmount();
                      } catch (t) {
                        W(d, c, t);
                      }
                    }
                    break;
                  case 5:
                    Lj(r, r.return);
                    break;
                  case 22:
                    if (null !== r.memoizedState) {
                      gk(q);
                      continue;
                    }
                }
                null !== y ? ((y.return = r), (V = y)) : gk(q);
              }
              m = m.sibling;
            }
          a: for (m = null, q = a; ; ) {
            if (5 === q.tag) {
              if (null === m) {
                m = q;
                try {
                  (e = q.stateNode),
                    l
                      ? ((f = e.style),
                        "function" === typeof f.setProperty
                          ? f.setProperty("display", "none", "important")
                          : (f.display = "none"))
                      : ((h = q.stateNode),
                        (k = q.memoizedProps.style),
                        (g =
                          void 0 !== k &&
                          null !== k &&
                          k.hasOwnProperty("display")
                            ? k.display
                            : null),
                        (h.style.display = rb("display", g)));
                } catch (t) {
                  W(a, a.return, t);
                }
              }
            } else if (6 === q.tag) {
              if (null === m)
                try {
                  q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                } catch (t) {
                  W(a, a.return, t);
                }
            } else if (
              ((22 !== q.tag && 23 !== q.tag) ||
                null === q.memoizedState ||
                q === a) &&
              null !== q.child
            ) {
              q.child.return = q;
              q = q.child;
              continue;
            }
            if (q === a) break a;
            for (; null === q.sibling; ) {
              if (null === q.return || q.return === a) break a;
              m === q && (m = null);
              q = q.return;
            }
            m === q && (m = null);
            q.sibling.return = q.return;
            q = q.sibling;
          }
        }
        break;
      case 19:
        ck(b, a);
        ek(a);
        d & 4 && ak(a);
        break;
      case 21:
        break;
      default:
        ck(b, a), ek(a);
    }
  }
  function ek(a) {
    var b = a.flags;
    if (b & 2) {
      try {
        a: {
          for (var c = a.return; null !== c; ) {
            if (Tj(c)) {
              var d = c;
              break a;
            }
            c = c.return;
          }
          throw Error(p(160));
        }
        switch (d.tag) {
          case 5:
            var e = d.stateNode;
            d.flags & 32 && (ob(e, ""), (d.flags &= -33));
            var f = Uj(a);
            Wj(a, f, e);
            break;
          case 3:
          case 4:
            var g = d.stateNode.containerInfo,
              h = Uj(a);
            Vj(a, h, g);
            break;
          default:
            throw Error(p(161));
        }
      } catch (k) {
        W(a, a.return, k);
      }
      a.flags &= -3;
    }
    b & 4096 && (a.flags &= -4097);
  }
  function hk(a, b, c) {
    V = a;
    ik(a);
  }
  function ik(a, b, c) {
    for (var d = 0 !== (a.mode & 1); null !== V; ) {
      var e = V,
        f = e.child;
      if (22 === e.tag && d) {
        var g = null !== e.memoizedState || Jj;
        if (!g) {
          var h = e.alternate,
            k = (null !== h && null !== h.memoizedState) || U;
          h = Jj;
          var l = U;
          Jj = g;
          if ((U = k) && !l)
            for (V = e; null !== V; )
              (g = V),
                (k = g.child),
                22 === g.tag && null !== g.memoizedState
                  ? jk(e)
                  : null !== k
                  ? ((k.return = g), (V = k))
                  : jk(e);
          for (; null !== f; ) (V = f), ik(f), (f = f.sibling);
          V = e;
          Jj = h;
          U = l;
        }
        kk(a);
      } else
        0 !== (e.subtreeFlags & 8772) && null !== f
          ? ((f.return = e), (V = f))
          : kk(a);
    }
  }
  function kk(a) {
    for (; null !== V; ) {
      var b = V;
      if (0 !== (b.flags & 8772)) {
        var c = b.alternate;
        try {
          if (0 !== (b.flags & 8772))
            switch (b.tag) {
              case 0:
              case 11:
              case 15:
                U || Qj(5, b);
                break;
              case 1:
                var d = b.stateNode;
                if (b.flags & 4 && !U)
                  if (null === c) d.componentDidMount();
                  else {
                    var e =
                      b.elementType === b.type
                        ? c.memoizedProps
                        : Ci(b.type, c.memoizedProps);
                    d.componentDidUpdate(
                      e,
                      c.memoizedState,
                      d.__reactInternalSnapshotBeforeUpdate
                    );
                  }
                var f = b.updateQueue;
                null !== f && sh(b, f, d);
                break;
              case 3:
                var g = b.updateQueue;
                if (null !== g) {
                  c = null;
                  if (null !== b.child)
                    switch (b.child.tag) {
                      case 5:
                        c = b.child.stateNode;
                        break;
                      case 1:
                        c = b.child.stateNode;
                    }
                  sh(b, g, c);
                }
                break;
              case 5:
                var h = b.stateNode;
                if (null === c && b.flags & 4) {
                  c = h;
                  var k = b.memoizedProps;
                  switch (b.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k.autoFocus && c.focus();
                      break;
                    case "img":
                      k.src && (c.src = k.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (null === b.memoizedState) {
                  var l = b.alternate;
                  if (null !== l) {
                    var m = l.memoizedState;
                    if (null !== m) {
                      var q = m.dehydrated;
                      null !== q && bd(q);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(p(163));
            }
          U || (b.flags & 512 && Rj(b));
        } catch (r) {
          W(b, b.return, r);
        }
      }
      if (b === a) {
        V = null;
        break;
      }
      c = b.sibling;
      if (null !== c) {
        c.return = b.return;
        V = c;
        break;
      }
      V = b.return;
    }
  }
  function gk(a) {
    for (; null !== V; ) {
      var b = V;
      if (b === a) {
        V = null;
        break;
      }
      var c = b.sibling;
      if (null !== c) {
        c.return = b.return;
        V = c;
        break;
      }
      V = b.return;
    }
  }
  function jk(a) {
    for (; null !== V; ) {
      var b = V;
      try {
        switch (b.tag) {
          case 0:
          case 11:
          case 15:
            var c = b.return;
            try {
              Qj(4, b);
            } catch (k) {
              W(b, c, k);
            }
            break;
          case 1:
            var d = b.stateNode;
            if ("function" === typeof d.componentDidMount) {
              var e = b.return;
              try {
                d.componentDidMount();
              } catch (k) {
                W(b, e, k);
              }
            }
            var f = b.return;
            try {
              Rj(b);
            } catch (k) {
              W(b, f, k);
            }
            break;
          case 5:
            var g = b.return;
            try {
              Rj(b);
            } catch (k) {
              W(b, g, k);
            }
        }
      } catch (k) {
        W(b, b.return, k);
      }
      if (b === a) {
        V = null;
        break;
      }
      var h = b.sibling;
      if (null !== h) {
        h.return = b.return;
        V = h;
        break;
      }
      V = b.return;
    }
  }
  var lk = Math.ceil,
    mk = ua.ReactCurrentDispatcher,
    nk = ua.ReactCurrentOwner,
    ok = ua.ReactCurrentBatchConfig,
    K = 0,
    Q = null,
    Y = null,
    Z = 0,
    fj = 0,
    ej = Uf(0),
    T = 0,
    pk = null,
    rh = 0,
    qk = 0,
    rk = 0,
    sk = null,
    tk = null,
    fk = 0,
    Gj = Infinity,
    uk = null,
    Oi = false,
    Pi = null,
    Ri = null,
    vk = false,
    wk = null,
    xk = 0,
    yk = 0,
    zk = null,
    Ak = -1,
    Bk = 0;
  function R() {
    return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : (Ak = B());
  }
  function yi(a) {
    if (0 === (a.mode & 1)) return 1;
    if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
    if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
    a = C;
    if (0 !== a) return a;
    a = window.event;
    a = void 0 === a ? 16 : jd(a.type);
    return a;
  }
  function gi(a, b, c, d) {
    if (50 < yk) throw ((yk = 0), (zk = null), Error(p(185)));
    Ac(a, c, d);
    if (0 === (K & 2) || a !== Q)
      a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)),
        Dk(a, d),
        1 === c &&
          0 === K &&
          0 === (b.mode & 1) &&
          ((Gj = B() + 500), fg && jg());
  }
  function Dk(a, b) {
    var c = a.callbackNode;
    wc(a, b);
    var d = uc(a, a === Q ? Z : 0);
    if (0 === d)
      null !== c && bc(c), (a.callbackNode = null), (a.callbackPriority = 0);
    else if (((b = d & -d), a.callbackPriority !== b)) {
      null != c && bc(c);
      if (1 === b)
        0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)),
          Jf(function () {
            0 === (K & 6) && jg();
          }),
          (c = null);
      else {
        switch (Dc(d)) {
          case 1:
            c = fc;
            break;
          case 4:
            c = gc;
            break;
          case 16:
            c = hc;
            break;
          case 536870912:
            c = jc;
            break;
          default:
            c = hc;
        }
        c = Fk(c, Gk.bind(null, a));
      }
      a.callbackPriority = b;
      a.callbackNode = c;
    }
  }
  function Gk(a, b) {
    Ak = -1;
    Bk = 0;
    if (0 !== (K & 6)) throw Error(p(327));
    var c = a.callbackNode;
    if (Hk() && a.callbackNode !== c) return null;
    var d = uc(a, a === Q ? Z : 0);
    if (0 === d) return null;
    if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);
    else {
      b = d;
      var e = K;
      K |= 2;
      var f = Jk();
      if (Q !== a || Z !== b) (uk = null), (Gj = B() + 500), Kk(a, b);
      do
        try {
          Lk();
          break;
        } catch (h) {
          Mk(a, h);
        }
      while (1);
      $g();
      mk.current = f;
      K = e;
      null !== Y ? (b = 0) : ((Q = null), (Z = 0), (b = T));
    }
    if (0 !== b) {
      2 === b && ((e = xc(a)), 0 !== e && ((d = e), (b = Nk(a, e))));
      if (1 === b) throw ((c = pk), Kk(a, 0), Ck(a, d), Dk(a, B()), c);
      if (6 === b) Ck(a, d);
      else {
        e = a.current.alternate;
        if (
          0 === (d & 30) &&
          !Ok(e) &&
          ((b = Ik(a, d)),
          2 === b && ((f = xc(a)), 0 !== f && ((d = f), (b = Nk(a, f)))),
          1 === b)
        )
          throw ((c = pk), Kk(a, 0), Ck(a, d), Dk(a, B()), c);
        a.finishedWork = e;
        a.finishedLanes = d;
        switch (b) {
          case 0:
          case 1:
            throw Error(p(345));
          case 2:
            Pk(a, tk, uk);
            break;
          case 3:
            Ck(a, d);
            if ((d & 130023424) === d && ((b = fk + 500 - B()), 10 < b)) {
              if (0 !== uc(a, 0)) break;
              e = a.suspendedLanes;
              if ((e & d) !== d) {
                R();
                a.pingedLanes |= a.suspendedLanes & e;
                break;
              }
              a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
              break;
            }
            Pk(a, tk, uk);
            break;
          case 4:
            Ck(a, d);
            if ((d & 4194240) === d) break;
            b = a.eventTimes;
            for (e = -1; 0 < d; ) {
              var g = 31 - oc(d);
              f = 1 << g;
              g = b[g];
              g > e && (e = g);
              d &= ~f;
            }
            d = e;
            d = B() - d;
            d =
              (120 > d
                ? 120
                : 480 > d
                ? 480
                : 1080 > d
                ? 1080
                : 1920 > d
                ? 1920
                : 3e3 > d
                ? 3e3
                : 4320 > d
                ? 4320
                : 1960 * lk(d / 1960)) - d;
            if (10 < d) {
              a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
              break;
            }
            Pk(a, tk, uk);
            break;
          case 5:
            Pk(a, tk, uk);
            break;
          default:
            throw Error(p(329));
        }
      }
    }
    Dk(a, B());
    return a.callbackNode === c ? Gk.bind(null, a) : null;
  }
  function Nk(a, b) {
    var c = sk;
    a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
    a = Ik(a, b);
    2 !== a && ((b = tk), (tk = c), null !== b && Fj(b));
    return a;
  }
  function Fj(a) {
    null === tk ? (tk = a) : tk.push.apply(tk, a);
  }
  function Ok(a) {
    for (var b = a; ; ) {
      if (b.flags & 16384) {
        var c = b.updateQueue;
        if (null !== c && ((c = c.stores), null !== c))
          for (var d = 0; d < c.length; d++) {
            var e = c[d],
              f = e.getSnapshot;
            e = e.value;
            try {
              if (!He(f(), e)) return !1;
            } catch (g) {
              return false;
            }
          }
      }
      c = b.child;
      if (b.subtreeFlags & 16384 && null !== c) (c.return = b), (b = c);
      else {
        if (b === a) break;
        for (; null === b.sibling; ) {
          if (null === b.return || b.return === a) return true;
          b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
      }
    }
    return true;
  }
  function Ck(a, b) {
    b &= ~rk;
    b &= ~qk;
    a.suspendedLanes |= b;
    a.pingedLanes &= ~b;
    for (a = a.expirationTimes; 0 < b; ) {
      var c = 31 - oc(b),
        d = 1 << c;
      a[c] = -1;
      b &= ~d;
    }
  }
  function Ek(a) {
    if (0 !== (K & 6)) throw Error(p(327));
    Hk();
    var b = uc(a, 0);
    if (0 === (b & 1)) return Dk(a, B()), null;
    var c = Ik(a, b);
    if (0 !== a.tag && 2 === c) {
      var d = xc(a);
      0 !== d && ((b = d), (c = Nk(a, d)));
    }
    if (1 === c) throw ((c = pk), Kk(a, 0), Ck(a, b), Dk(a, B()), c);
    if (6 === c) throw Error(p(345));
    a.finishedWork = a.current.alternate;
    a.finishedLanes = b;
    Pk(a, tk, uk);
    Dk(a, B());
    return null;
  }
  function Qk(a, b) {
    var c = K;
    K |= 1;
    try {
      return a(b);
    } finally {
      (K = c), 0 === K && ((Gj = B() + 500), fg && jg());
    }
  }
  function Rk(a) {
    null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
    var b = K;
    K |= 1;
    var c = ok.transition,
      d = C;
    try {
      if (((ok.transition = null), (C = 1), a)) return a();
    } finally {
      (C = d), (ok.transition = c), (K = b), 0 === (K & 6) && jg();
    }
  }
  function Hj() {
    fj = ej.current;
    E(ej);
  }
  function Kk(a, b) {
    a.finishedWork = null;
    a.finishedLanes = 0;
    var c = a.timeoutHandle;
    -1 !== c && ((a.timeoutHandle = -1), Gf(c));
    if (null !== Y)
      for (c = Y.return; null !== c; ) {
        var d = c;
        wg(d);
        switch (d.tag) {
          case 1:
            d = d.type.childContextTypes;
            null !== d && void 0 !== d && $f();
            break;
          case 3:
            zh();
            E(Wf);
            E(H);
            Eh();
            break;
          case 5:
            Bh(d);
            break;
          case 4:
            zh();
            break;
          case 13:
            E(L);
            break;
          case 19:
            E(L);
            break;
          case 10:
            ah(d.type._context);
            break;
          case 22:
          case 23:
            Hj();
        }
        c = c.return;
      }
    Q = a;
    Y = a = Pg(a.current, null);
    Z = fj = b;
    T = 0;
    pk = null;
    rk = qk = rh = 0;
    tk = sk = null;
    if (null !== fh) {
      for (b = 0; b < fh.length; b++)
        if (((c = fh[b]), (d = c.interleaved), null !== d)) {
          c.interleaved = null;
          var e = d.next,
            f = c.pending;
          if (null !== f) {
            var g = f.next;
            f.next = e;
            d.next = g;
          }
          c.pending = d;
        }
      fh = null;
    }
    return a;
  }
  function Mk(a, b) {
    do {
      var c = Y;
      try {
        $g();
        Fh.current = Rh;
        if (Ih) {
          for (var d = M.memoizedState; null !== d; ) {
            var e = d.queue;
            null !== e && (e.pending = null);
            d = d.next;
          }
          Ih = !1;
        }
        Hh = 0;
        O = N = M = null;
        Jh = !1;
        Kh = 0;
        nk.current = null;
        if (null === c || null === c.return) {
          T = 1;
          pk = b;
          Y = null;
          break;
        }
        a: {
          var f = a,
            g = c.return,
            h = c,
            k = b;
          b = Z;
          h.flags |= 32768;
          if (
            null !== k &&
            "object" === typeof k &&
            "function" === typeof k.then
          ) {
            var l = k,
              m = h,
              q = m.tag;
            if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
              var r = m.alternate;
              r
                ? ((m.updateQueue = r.updateQueue),
                  (m.memoizedState = r.memoizedState),
                  (m.lanes = r.lanes))
                : ((m.updateQueue = null), (m.memoizedState = null));
            }
            var y = Ui(g);
            if (null !== y) {
              y.flags &= -257;
              Vi(y, g, h, f, b);
              y.mode & 1 && Si(f, l, b);
              b = y;
              k = l;
              var n = b.updateQueue;
              if (null === n) {
                var t = new Set();
                t.add(k);
                b.updateQueue = t;
              } else n.add(k);
              break a;
            } else {
              if (0 === (b & 1)) {
                Si(f, l, b);
                tj();
                break a;
              }
              k = Error(p(426));
            }
          } else if (I && h.mode & 1) {
            var J = Ui(g);
            if (null !== J) {
              0 === (J.flags & 65536) && (J.flags |= 256);
              Vi(J, g, h, f, b);
              Jg(Ji(k, h));
              break a;
            }
          }
          f = k = Ji(k, h);
          4 !== T && (T = 2);
          null === sk ? (sk = [f]) : sk.push(f);
          f = g;
          do {
            switch (f.tag) {
              case 3:
                f.flags |= 65536;
                b &= -b;
                f.lanes |= b;
                var x = Ni(f, k, b);
                ph(f, x);
                break a;
              case 1:
                h = k;
                var w = f.type,
                  u = f.stateNode;
                if (
                  0 === (f.flags & 128) &&
                  ("function" === typeof w.getDerivedStateFromError ||
                    (null !== u &&
                      "function" === typeof u.componentDidCatch &&
                      (null === Ri || !Ri.has(u))))
                ) {
                  f.flags |= 65536;
                  b &= -b;
                  f.lanes |= b;
                  var F = Qi(f, h, b);
                  ph(f, F);
                  break a;
                }
            }
            f = f.return;
          } while (null !== f);
        }
        Sk(c);
      } catch (na) {
        b = na;
        Y === c && null !== c && (Y = c = c.return);
        continue;
      }
      break;
    } while (1);
  }
  function Jk() {
    var a = mk.current;
    mk.current = Rh;
    return null === a ? Rh : a;
  }
  function tj() {
    if (0 === T || 3 === T || 2 === T) T = 4;
    null === Q ||
      (0 === (rh & 268435455) && 0 === (qk & 268435455)) ||
      Ck(Q, Z);
  }
  function Ik(a, b) {
    var c = K;
    K |= 2;
    var d = Jk();
    if (Q !== a || Z !== b) (uk = null), Kk(a, b);
    do
      try {
        Tk();
        break;
      } catch (e) {
        Mk(a, e);
      }
    while (1);
    $g();
    K = c;
    mk.current = d;
    if (null !== Y) throw Error(p(261));
    Q = null;
    Z = 0;
    return T;
  }
  function Tk() {
    for (; null !== Y; ) Uk(Y);
  }
  function Lk() {
    for (; null !== Y && !cc(); ) Uk(Y);
  }
  function Uk(a) {
    var b = Vk(a.alternate, a, fj);
    a.memoizedProps = a.pendingProps;
    null === b ? Sk(a) : (Y = b);
    nk.current = null;
  }
  function Sk(a) {
    var b = a;
    do {
      var c = b.alternate;
      a = b.return;
      if (0 === (b.flags & 32768)) {
        if (((c = Ej(c, b, fj)), null !== c)) {
          Y = c;
          return;
        }
      } else {
        c = Ij(c, b);
        if (null !== c) {
          c.flags &= 32767;
          Y = c;
          return;
        }
        if (null !== a)
          (a.flags |= 32768), (a.subtreeFlags = 0), (a.deletions = null);
        else {
          T = 6;
          Y = null;
          return;
        }
      }
      b = b.sibling;
      if (null !== b) {
        Y = b;
        return;
      }
      Y = b = a;
    } while (null !== b);
    0 === T && (T = 5);
  }
  function Pk(a, b, c) {
    var d = C,
      e = ok.transition;
    try {
      (ok.transition = null), (C = 1), Wk(a, b, c, d);
    } finally {
      (ok.transition = e), (C = d);
    }
    return null;
  }
  function Wk(a, b, c, d) {
    do Hk();
    while (null !== wk);
    if (0 !== (K & 6)) throw Error(p(327));
    c = a.finishedWork;
    var e = a.finishedLanes;
    if (null === c) return null;
    a.finishedWork = null;
    a.finishedLanes = 0;
    if (c === a.current) throw Error(p(177));
    a.callbackNode = null;
    a.callbackPriority = 0;
    var f = c.lanes | c.childLanes;
    Bc(a, f);
    a === Q && ((Y = Q = null), (Z = 0));
    (0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064)) ||
      vk ||
      ((vk = true),
      Fk(hc, function () {
        Hk();
        return null;
      }));
    f = 0 !== (c.flags & 15990);
    if (0 !== (c.subtreeFlags & 15990) || f) {
      f = ok.transition;
      ok.transition = null;
      var g = C;
      C = 1;
      var h = K;
      K |= 4;
      nk.current = null;
      Oj(a, c);
      dk(c, a);
      Oe(Df);
      dd = !!Cf;
      Df = Cf = null;
      a.current = c;
      hk(c);
      dc();
      K = h;
      C = g;
      ok.transition = f;
    } else a.current = c;
    vk && ((vk = false), (wk = a), (xk = e));
    f = a.pendingLanes;
    0 === f && (Ri = null);
    mc(c.stateNode);
    Dk(a, B());
    if (null !== b)
      for (d = a.onRecoverableError, c = 0; c < b.length; c++)
        (e = b[c]), d(e.value, { componentStack: e.stack, digest: e.digest });
    if (Oi) throw ((Oi = false), (a = Pi), (Pi = null), a);
    0 !== (xk & 1) && 0 !== a.tag && Hk();
    f = a.pendingLanes;
    0 !== (f & 1) ? (a === zk ? yk++ : ((yk = 0), (zk = a))) : (yk = 0);
    jg();
    return null;
  }
  function Hk() {
    if (null !== wk) {
      var a = Dc(xk),
        b = ok.transition,
        c = C;
      try {
        ok.transition = null;
        C = 16 > a ? 16 : a;
        if (null === wk) var d = !1;
        else {
          a = wk;
          wk = null;
          xk = 0;
          if (0 !== (K & 6)) throw Error(p(331));
          var e = K;
          K |= 4;
          for (V = a.current; null !== V; ) {
            var f = V,
              g = f.child;
            if (0 !== (V.flags & 16)) {
              var h = f.deletions;
              if (null !== h) {
                for (var k = 0; k < h.length; k++) {
                  var l = h[k];
                  for (V = l; null !== V; ) {
                    var m = V;
                    switch (m.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Pj(8, m, f);
                    }
                    var q = m.child;
                    if (null !== q) (q.return = m), (V = q);
                    else
                      for (; null !== V; ) {
                        m = V;
                        var r = m.sibling,
                          y = m.return;
                        Sj(m);
                        if (m === l) {
                          V = null;
                          break;
                        }
                        if (null !== r) {
                          r.return = y;
                          V = r;
                          break;
                        }
                        V = y;
                      }
                  }
                }
                var n = f.alternate;
                if (null !== n) {
                  var t = n.child;
                  if (null !== t) {
                    n.child = null;
                    do {
                      var J = t.sibling;
                      t.sibling = null;
                      t = J;
                    } while (null !== t);
                  }
                }
                V = f;
              }
            }
            if (0 !== (f.subtreeFlags & 2064) && null !== g)
              (g.return = f), (V = g);
            else
              b: for (; null !== V; ) {
                f = V;
                if (0 !== (f.flags & 2048))
                  switch (f.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Pj(9, f, f.return);
                  }
                var x = f.sibling;
                if (null !== x) {
                  x.return = f.return;
                  V = x;
                  break b;
                }
                V = f.return;
              }
          }
          var w = a.current;
          for (V = w; null !== V; ) {
            g = V;
            var u = g.child;
            if (0 !== (g.subtreeFlags & 2064) && null !== u)
              (u.return = g), (V = u);
            else
              b: for (g = w; null !== V; ) {
                h = V;
                if (0 !== (h.flags & 2048))
                  try {
                    switch (h.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, h);
                    }
                  } catch (na) {
                    W(h, h.return, na);
                  }
                if (h === g) {
                  V = null;
                  break b;
                }
                var F = h.sibling;
                if (null !== F) {
                  F.return = h.return;
                  V = F;
                  break b;
                }
                V = h.return;
              }
          }
          K = e;
          jg();
          if (lc && "function" === typeof lc.onPostCommitFiberRoot)
            try {
              lc.onPostCommitFiberRoot(kc, a);
            } catch (na) {}
          d = !0;
        }
        return d;
      } finally {
        (C = c), (ok.transition = b);
      }
    }
    return false;
  }
  function Xk(a, b, c) {
    b = Ji(c, b);
    b = Ni(a, b, 1);
    a = nh(a, b, 1);
    b = R();
    null !== a && (Ac(a, 1, b), Dk(a, b));
  }
  function W(a, b, c) {
    if (3 === a.tag) Xk(a, a, c);
    else
      for (; null !== b; ) {
        if (3 === b.tag) {
          Xk(b, a, c);
          break;
        } else if (1 === b.tag) {
          var d = b.stateNode;
          if (
            "function" === typeof b.type.getDerivedStateFromError ||
            ("function" === typeof d.componentDidCatch &&
              (null === Ri || !Ri.has(d)))
          ) {
            a = Ji(c, a);
            a = Qi(b, a, 1);
            b = nh(b, a, 1);
            a = R();
            null !== b && (Ac(b, 1, a), Dk(b, a));
            break;
          }
        }
        b = b.return;
      }
  }
  function Ti(a, b, c) {
    var d = a.pingCache;
    null !== d && d.delete(b);
    b = R();
    a.pingedLanes |= a.suspendedLanes & c;
    Q === a &&
      (Z & c) === c &&
      (4 === T || (3 === T && (Z & 130023424) === Z && 500 > B() - fk)
        ? Kk(a, 0)
        : (rk |= c));
    Dk(a, b);
  }
  function Yk(a, b) {
    0 === b &&
      (0 === (a.mode & 1)
        ? (b = 1)
        : ((b = sc), (sc <<= 1), 0 === (sc & 130023424) && (sc = 4194304)));
    var c = R();
    a = ih(a, b);
    null !== a && (Ac(a, b, c), Dk(a, c));
  }
  function uj(a) {
    var b = a.memoizedState,
      c = 0;
    null !== b && (c = b.retryLane);
    Yk(a, c);
  }
  function bk(a, b) {
    var c = 0;
    switch (a.tag) {
      case 13:
        var d = a.stateNode;
        var e = a.memoizedState;
        null !== e && (c = e.retryLane);
        break;
      case 19:
        d = a.stateNode;
        break;
      default:
        throw Error(p(314));
    }
    null !== d && d.delete(b);
    Yk(a, c);
  }
  var Vk;
  Vk = function (a, b, c) {
    if (null !== a)
      if (a.memoizedProps !== b.pendingProps || Wf.current) dh = true;
      else {
        if (0 === (a.lanes & c) && 0 === (b.flags & 128))
          return (dh = false), yj(a, b, c);
        dh = 0 !== (a.flags & 131072) ? true : false;
      }
    else (dh = false), I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
    b.lanes = 0;
    switch (b.tag) {
      case 2:
        var d = b.type;
        ij(a, b);
        a = b.pendingProps;
        var e = Yf(b, H.current);
        ch(b, c);
        e = Nh(null, b, d, a, e, c);
        var f = Sh();
        b.flags |= 1;
        "object" === typeof e &&
        null !== e &&
        "function" === typeof e.render &&
        void 0 === e.$$typeof
          ? ((b.tag = 1),
            (b.memoizedState = null),
            (b.updateQueue = null),
            Zf(d) ? ((f = true), cg(b)) : (f = false),
            (b.memoizedState =
              null !== e.state && void 0 !== e.state ? e.state : null),
            kh(b),
            (e.updater = Ei),
            (b.stateNode = e),
            (e._reactInternals = b),
            Ii(b, d, a, c),
            (b = jj(null, b, d, true, f, c)))
          : ((b.tag = 0), I && f && vg(b), Xi(null, b, e, c), (b = b.child));
        return b;
      case 16:
        d = b.elementType;
        a: {
          ij(a, b);
          a = b.pendingProps;
          e = d._init;
          d = e(d._payload);
          b.type = d;
          e = b.tag = Zk(d);
          a = Ci(d, a);
          switch (e) {
            case 0:
              b = cj(null, b, d, a, c);
              break a;
            case 1:
              b = hj(null, b, d, a, c);
              break a;
            case 11:
              b = Yi(null, b, d, a, c);
              break a;
            case 14:
              b = $i(null, b, d, Ci(d.type, a), c);
              break a;
          }
          throw Error(p(306, d, ""));
        }
        return b;
      case 0:
        return (
          (d = b.type),
          (e = b.pendingProps),
          (e = b.elementType === d ? e : Ci(d, e)),
          cj(a, b, d, e, c)
        );
      case 1:
        return (
          (d = b.type),
          (e = b.pendingProps),
          (e = b.elementType === d ? e : Ci(d, e)),
          hj(a, b, d, e, c)
        );
      case 3:
        a: {
          kj(b);
          if (null === a) throw Error(p(387));
          d = b.pendingProps;
          f = b.memoizedState;
          e = f.element;
          lh(a, b);
          qh(b, d, null, c);
          var g = b.memoizedState;
          d = g.element;
          if (f.isDehydrated)
            if (
              ((f = {
                element: d,
                isDehydrated: false,
                cache: g.cache,
                pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
                transitions: g.transitions,
              }),
              (b.updateQueue.baseState = f),
              (b.memoizedState = f),
              b.flags & 256)
            ) {
              e = Ji(Error(p(423)), b);
              b = lj(a, b, d, c, e);
              break a;
            } else if (d !== e) {
              e = Ji(Error(p(424)), b);
              b = lj(a, b, d, c, e);
              break a;
            } else
              for (
                yg = Lf(b.stateNode.containerInfo.firstChild),
                  xg = b,
                  I = true,
                  zg = null,
                  c = Vg(b, null, d, c),
                  b.child = c;
                c;

              )
                (c.flags = (c.flags & -3) | 4096), (c = c.sibling);
          else {
            Ig();
            if (d === e) {
              b = Zi(a, b, c);
              break a;
            }
            Xi(a, b, d, c);
          }
          b = b.child;
        }
        return b;
      case 5:
        return (
          Ah(b),
          null === a && Eg(b),
          (d = b.type),
          (e = b.pendingProps),
          (f = null !== a ? a.memoizedProps : null),
          (g = e.children),
          Ef(d, e) ? (g = null) : null !== f && Ef(d, f) && (b.flags |= 32),
          gj(a, b),
          Xi(a, b, g, c),
          b.child
        );
      case 6:
        return null === a && Eg(b), null;
      case 13:
        return oj(a, b, c);
      case 4:
        return (
          yh(b, b.stateNode.containerInfo),
          (d = b.pendingProps),
          null === a ? (b.child = Ug(b, null, d, c)) : Xi(a, b, d, c),
          b.child
        );
      case 11:
        return (
          (d = b.type),
          (e = b.pendingProps),
          (e = b.elementType === d ? e : Ci(d, e)),
          Yi(a, b, d, e, c)
        );
      case 7:
        return Xi(a, b, b.pendingProps, c), b.child;
      case 8:
        return Xi(a, b, b.pendingProps.children, c), b.child;
      case 12:
        return Xi(a, b, b.pendingProps.children, c), b.child;
      case 10:
        a: {
          d = b.type._context;
          e = b.pendingProps;
          f = b.memoizedProps;
          g = e.value;
          G(Wg, d._currentValue);
          d._currentValue = g;
          if (null !== f)
            if (He(f.value, g)) {
              if (f.children === e.children && !Wf.current) {
                b = Zi(a, b, c);
                break a;
              }
            } else
              for (f = b.child, null !== f && (f.return = b); null !== f; ) {
                var h = f.dependencies;
                if (null !== h) {
                  g = f.child;
                  for (var k = h.firstContext; null !== k; ) {
                    if (k.context === d) {
                      if (1 === f.tag) {
                        k = mh(-1, c & -c);
                        k.tag = 2;
                        var l = f.updateQueue;
                        if (null !== l) {
                          l = l.shared;
                          var m = l.pending;
                          null === m
                            ? (k.next = k)
                            : ((k.next = m.next), (m.next = k));
                          l.pending = k;
                        }
                      }
                      f.lanes |= c;
                      k = f.alternate;
                      null !== k && (k.lanes |= c);
                      bh(f.return, c, b);
                      h.lanes |= c;
                      break;
                    }
                    k = k.next;
                  }
                } else if (10 === f.tag) g = f.type === b.type ? null : f.child;
                else if (18 === f.tag) {
                  g = f.return;
                  if (null === g) throw Error(p(341));
                  g.lanes |= c;
                  h = g.alternate;
                  null !== h && (h.lanes |= c);
                  bh(g, c, b);
                  g = f.sibling;
                } else g = f.child;
                if (null !== g) g.return = f;
                else
                  for (g = f; null !== g; ) {
                    if (g === b) {
                      g = null;
                      break;
                    }
                    f = g.sibling;
                    if (null !== f) {
                      f.return = g.return;
                      g = f;
                      break;
                    }
                    g = g.return;
                  }
                f = g;
              }
          Xi(a, b, e.children, c);
          b = b.child;
        }
        return b;
      case 9:
        return (
          (e = b.type),
          (d = b.pendingProps.children),
          ch(b, c),
          (e = eh(e)),
          (d = d(e)),
          (b.flags |= 1),
          Xi(a, b, d, c),
          b.child
        );
      case 14:
        return (
          (d = b.type),
          (e = Ci(d, b.pendingProps)),
          (e = Ci(d.type, e)),
          $i(a, b, d, e, c)
        );
      case 15:
        return bj(a, b, b.type, b.pendingProps, c);
      case 17:
        return (
          (d = b.type),
          (e = b.pendingProps),
          (e = b.elementType === d ? e : Ci(d, e)),
          ij(a, b),
          (b.tag = 1),
          Zf(d) ? ((a = true), cg(b)) : (a = false),
          ch(b, c),
          Gi(b, d, e),
          Ii(b, d, e, c),
          jj(null, b, d, true, a, c)
        );
      case 19:
        return xj(a, b, c);
      case 22:
        return dj(a, b, c);
    }
    throw Error(p(156, b.tag));
  };
  function Fk(a, b) {
    return ac(a, b);
  }
  function $k(a, b, c, d) {
    this.tag = a;
    this.key = c;
    this.sibling =
      this.child =
      this.return =
      this.stateNode =
      this.type =
      this.elementType =
        null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b;
    this.dependencies =
      this.memoizedState =
      this.updateQueue =
      this.memoizedProps =
        null;
    this.mode = d;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function Bg(a, b, c, d) {
    return new $k(a, b, c, d);
  }
  function aj(a) {
    a = a.prototype;
    return !(!a || !a.isReactComponent);
  }
  function Zk(a) {
    if ("function" === typeof a) return aj(a) ? 1 : 0;
    if (void 0 !== a && null !== a) {
      a = a.$$typeof;
      if (a === Da) return 11;
      if (a === Ga) return 14;
    }
    return 2;
  }
  function Pg(a, b) {
    var c = a.alternate;
    null === c
      ? ((c = Bg(a.tag, b, a.key, a.mode)),
        (c.elementType = a.elementType),
        (c.type = a.type),
        (c.stateNode = a.stateNode),
        (c.alternate = a),
        (a.alternate = c))
      : ((c.pendingProps = b),
        (c.type = a.type),
        (c.flags = 0),
        (c.subtreeFlags = 0),
        (c.deletions = null));
    c.flags = a.flags & 14680064;
    c.childLanes = a.childLanes;
    c.lanes = a.lanes;
    c.child = a.child;
    c.memoizedProps = a.memoizedProps;
    c.memoizedState = a.memoizedState;
    c.updateQueue = a.updateQueue;
    b = a.dependencies;
    c.dependencies =
      null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
    c.sibling = a.sibling;
    c.index = a.index;
    c.ref = a.ref;
    return c;
  }
  function Rg(a, b, c, d, e, f) {
    var g = 2;
    d = a;
    if ("function" === typeof a) aj(a) && (g = 1);
    else if ("string" === typeof a) g = 5;
    else
      a: switch (a) {
        case ya:
          return Tg(c.children, e, f, b);
        case za:
          g = 8;
          e |= 8;
          break;
        case Aa:
          return (
            (a = Bg(12, c, b, e | 2)), (a.elementType = Aa), (a.lanes = f), a
          );
        case Ea:
          return (a = Bg(13, c, b, e)), (a.elementType = Ea), (a.lanes = f), a;
        case Fa:
          return (a = Bg(19, c, b, e)), (a.elementType = Fa), (a.lanes = f), a;
        case Ia:
          return pj(c, e, f, b);
        default:
          if ("object" === typeof a && null !== a)
            switch (a.$$typeof) {
              case Ba:
                g = 10;
                break a;
              case Ca:
                g = 9;
                break a;
              case Da:
                g = 11;
                break a;
              case Ga:
                g = 14;
                break a;
              case Ha:
                g = 16;
                d = null;
                break a;
            }
          throw Error(p(130, null == a ? a : typeof a, ""));
      }
    b = Bg(g, c, b, e);
    b.elementType = a;
    b.type = d;
    b.lanes = f;
    return b;
  }
  function Tg(a, b, c, d) {
    a = Bg(7, a, d, b);
    a.lanes = c;
    return a;
  }
  function pj(a, b, c, d) {
    a = Bg(22, a, d, b);
    a.elementType = Ia;
    a.lanes = c;
    a.stateNode = { isHidden: false };
    return a;
  }
  function Qg(a, b, c) {
    a = Bg(6, a, null, b);
    a.lanes = c;
    return a;
  }
  function Sg(a, b, c) {
    b = Bg(4, null !== a.children ? a.children : [], a.key, b);
    b.lanes = c;
    b.stateNode = {
      containerInfo: a.containerInfo,
      pendingChildren: null,
      implementation: a.implementation,
    };
    return b;
  }
  function al(a, b, c, d, e) {
    this.tag = b;
    this.containerInfo = a;
    this.finishedWork =
      this.pingCache =
      this.current =
      this.pendingChildren =
        null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = zc(0);
    this.expirationTimes = zc(-1);
    this.entangledLanes =
      this.finishedLanes =
      this.mutableReadLanes =
      this.expiredLanes =
      this.pingedLanes =
      this.suspendedLanes =
      this.pendingLanes =
        0;
    this.entanglements = zc(0);
    this.identifierPrefix = d;
    this.onRecoverableError = e;
    this.mutableSourceEagerHydrationData = null;
  }
  function bl(a, b, c, d, e, f, g, h, k) {
    a = new al(a, b, c, h, k);
    1 === b ? ((b = 1), true === f && (b |= 8)) : (b = 0);
    f = Bg(3, null, null, b);
    a.current = f;
    f.stateNode = a;
    f.memoizedState = {
      element: d,
      isDehydrated: c,
      cache: null,
      transitions: null,
      pendingSuspenseBoundaries: null,
    };
    kh(f);
    return a;
  }
  function cl(a, b, c) {
    var d =
      3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: wa,
      key: null == d ? null : "" + d,
      children: a,
      containerInfo: b,
      implementation: c,
    };
  }
  function dl(a) {
    if (!a) return Vf;
    a = a._reactInternals;
    a: {
      if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
      var b = a;
      do {
        switch (b.tag) {
          case 3:
            b = b.stateNode.context;
            break a;
          case 1:
            if (Zf(b.type)) {
              b = b.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }
        }
        b = b.return;
      } while (null !== b);
      throw Error(p(171));
    }
    if (1 === a.tag) {
      var c = a.type;
      if (Zf(c)) return bg(a, c, b);
    }
    return b;
  }
  function el(a, b, c, d, e, f, g, h, k) {
    a = bl(c, d, true, a, e, f, g, h, k);
    a.context = dl(null);
    c = a.current;
    d = R();
    e = yi(c);
    f = mh(d, e);
    f.callback = void 0 !== b && null !== b ? b : null;
    nh(c, f, e);
    a.current.lanes = e;
    Ac(a, e, d);
    Dk(a, d);
    return a;
  }
  function fl(a, b, c, d) {
    var e = b.current,
      f = R(),
      g = yi(e);
    c = dl(c);
    null === b.context ? (b.context = c) : (b.pendingContext = c);
    b = mh(f, g);
    b.payload = { element: a };
    d = void 0 === d ? null : d;
    null !== d && (b.callback = d);
    a = nh(e, b, g);
    null !== a && (gi(a, e, g, f), oh(a, e, g));
    return g;
  }
  function gl(a) {
    a = a.current;
    if (!a.child) return null;
    switch (a.child.tag) {
      case 5:
        return a.child.stateNode;
      default:
        return a.child.stateNode;
    }
  }
  function hl(a, b) {
    a = a.memoizedState;
    if (null !== a && null !== a.dehydrated) {
      var c = a.retryLane;
      a.retryLane = 0 !== c && c < b ? c : b;
    }
  }
  function il(a, b) {
    hl(a, b);
    (a = a.alternate) && hl(a, b);
  }
  function jl() {
    return null;
  }
  var kl =
    "function" === typeof reportError
      ? reportError
      : function (a) {
          console.error(a);
        };
  function ll(a) {
    this._internalRoot = a;
  }
  ml.prototype.render = ll.prototype.render = function (a) {
    var b = this._internalRoot;
    if (null === b) throw Error(p(409));
    fl(a, b, null, null);
  };
  ml.prototype.unmount = ll.prototype.unmount = function () {
    var a = this._internalRoot;
    if (null !== a) {
      this._internalRoot = null;
      var b = a.containerInfo;
      Rk(function () {
        fl(null, a, null, null);
      });
      b[uf] = null;
    }
  };
  function ml(a) {
    this._internalRoot = a;
  }
  ml.prototype.unstable_scheduleHydration = function (a) {
    if (a) {
      var b = Hc();
      a = { blockedOn: null, target: a, priority: b };
      for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++);
      Qc.splice(c, 0, a);
      0 === c && Vc(a);
    }
  };
  function nl(a) {
    return !(!a || (1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType));
  }
  function ol(a) {
    return !(
      !a ||
      (1 !== a.nodeType &&
        9 !== a.nodeType &&
        11 !== a.nodeType &&
        (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue))
    );
  }
  function pl() {}
  function ql(a, b, c, d, e) {
    if (e) {
      if ("function" === typeof d) {
        var f = d;
        d = function () {
          var a = gl(g);
          f.call(a);
        };
      }
      var g = el(b, d, a, 0, null, false, false, "", pl);
      a._reactRootContainer = g;
      a[uf] = g.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      Rk();
      return g;
    }
    for (; (e = a.lastChild); ) a.removeChild(e);
    if ("function" === typeof d) {
      var h = d;
      d = function () {
        var a = gl(k);
        h.call(a);
      };
    }
    var k = bl(a, 0, false, null, null, false, false, "", pl);
    a._reactRootContainer = k;
    a[uf] = k.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Rk(function () {
      fl(b, k, c, d);
    });
    return k;
  }
  function rl(a, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
      var g = f;
      if ("function" === typeof e) {
        var h = e;
        e = function () {
          var a = gl(g);
          h.call(a);
        };
      }
      fl(b, g, a, e);
    } else g = ql(c, b, a, e, d);
    return gl(g);
  }
  Ec = function (a) {
    switch (a.tag) {
      case 3:
        var b = a.stateNode;
        if (b.current.memoizedState.isDehydrated) {
          var c = tc(b.pendingLanes);
          0 !== c &&
            (Cc(b, c | 1),
            Dk(b, B()),
            0 === (K & 6) && ((Gj = B() + 500), jg()));
        }
        break;
      case 13:
        Rk(function () {
          var b = ih(a, 1);
          if (null !== b) {
            var c = R();
            gi(b, a, 1, c);
          }
        }),
          il(a, 1);
    }
  };
  Fc = function (a) {
    if (13 === a.tag) {
      var b = ih(a, 134217728);
      if (null !== b) {
        var c = R();
        gi(b, a, 134217728, c);
      }
      il(a, 134217728);
    }
  };
  Gc = function (a) {
    if (13 === a.tag) {
      var b = yi(a),
        c = ih(a, b);
      if (null !== c) {
        var d = R();
        gi(c, a, b, d);
      }
      il(a, b);
    }
  };
  Hc = function () {
    return C;
  };
  Ic = function (a, b) {
    var c = C;
    try {
      return (C = a), b();
    } finally {
      C = c;
    }
  };
  yb = function (a, b, c) {
    switch (b) {
      case "input":
        bb(a, c);
        b = c.name;
        if ("radio" === c.type && null != b) {
          for (c = a; c.parentNode; ) c = c.parentNode;
          c = c.querySelectorAll(
            "input[name=" + JSON.stringify("" + b) + '][type="radio"]'
          );
          for (b = 0; b < c.length; b++) {
            var d = c[b];
            if (d !== a && d.form === a.form) {
              var e = Db(d);
              if (!e) throw Error(p(90));
              Wa(d);
              bb(d, e);
            }
          }
        }
        break;
      case "textarea":
        ib(a, c);
        break;
      case "select":
        (b = c.value), null != b && fb(a, !!c.multiple, b, false);
    }
  };
  Gb = Qk;
  Hb = Rk;
  var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] },
    tl = {
      findFiberByHostInstance: Wc,
      bundleType: 0,
      version: "18.3.1",
      rendererPackageName: "react-dom",
    };
  var ul = {
    bundleType: tl.bundleType,
    version: tl.version,
    rendererPackageName: tl.rendererPackageName,
    rendererConfig: tl.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setErrorHandler: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ua.ReactCurrentDispatcher,
    findHostInstanceByFiber: function (a) {
      a = Zb(a);
      return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: tl.findFiberByHostInstance || jl,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
    reconcilerVersion: "18.3.1-next-f1338f8080-20240426",
  };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!vl.isDisabled && vl.supportsFiber)
      try {
        (kc = vl.inject(ul)), (lc = vl);
      } catch (a) {}
  }
  reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED =
    sl;
  reactDom_production_min.createPortal = function (a, b) {
    var c =
      2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!nl(b)) throw Error(p(200));
    return cl(a, b, null, c);
  };
  reactDom_production_min.createRoot = function (a, b) {
    if (!nl(a)) throw Error(p(299));
    var c = false,
      d = "",
      e = kl;
    null !== b &&
      void 0 !== b &&
      (true === b.unstable_strictMode && (c = true),
      void 0 !== b.identifierPrefix && (d = b.identifierPrefix),
      void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
    b = bl(a, 1, false, null, null, c, false, d, e);
    a[uf] = b.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    return new ll(b);
  };
  reactDom_production_min.findDOMNode = function (a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternals;
    if (void 0 === b) {
      if ("function" === typeof a.render) throw Error(p(188));
      a = Object.keys(a).join(",");
      throw Error(p(268, a));
    }
    a = Zb(b);
    a = null === a ? null : a.stateNode;
    return a;
  };
  reactDom_production_min.flushSync = function (a) {
    return Rk(a);
  };
  reactDom_production_min.hydrate = function (a, b, c) {
    if (!ol(b)) throw Error(p(200));
    return rl(null, a, b, true, c);
  };
  reactDom_production_min.hydrateRoot = function (a, b, c) {
    if (!nl(a)) throw Error(p(405));
    var d = (null != c && c.hydratedSources) || null,
      e = false,
      f = "",
      g = kl;
    null !== c &&
      void 0 !== c &&
      (true === c.unstable_strictMode && (e = true),
      void 0 !== c.identifierPrefix && (f = c.identifierPrefix),
      void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
    b = el(b, null, a, 1, null != c ? c : null, e, false, f, g);
    a[uf] = b.current;
    sf(a);
    if (d)
      for (a = 0; a < d.length; a++)
        (c = d[a]),
          (e = c._getVersion),
          (e = e(c._source)),
          null == b.mutableSourceEagerHydrationData
            ? (b.mutableSourceEagerHydrationData = [c, e])
            : b.mutableSourceEagerHydrationData.push(c, e);
    return new ml(b);
  };
  reactDom_production_min.render = function (a, b, c) {
    if (!ol(b)) throw Error(p(200));
    return rl(null, a, b, false, c);
  };
  reactDom_production_min.unmountComponentAtNode = function (a) {
    if (!ol(a)) throw Error(p(40));
    return a._reactRootContainer
      ? (Rk(function () {
          rl(null, null, a, !1, function () {
            a._reactRootContainer = null;
            a[uf] = null;
          });
        }),
        true)
      : false;
  };
  reactDom_production_min.unstable_batchedUpdates = Qk;
  reactDom_production_min.unstable_renderSubtreeIntoContainer = function (
    a,
    b,
    c,
    d
  ) {
    if (!ol(c)) throw Error(p(200));
    if (null == a || void 0 === a._reactInternals) throw Error(p(38));
    return rl(a, b, c, false, d);
  };
  reactDom_production_min.version = "18.3.1-next-f1338f8080-20240426";
  return reactDom_production_min;
}

var hasRequiredReactDom;

function requireReactDom() {
  if (hasRequiredReactDom) return reactDom.exports;
  hasRequiredReactDom = 1;
  function checkDCE() {
    if (
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ||
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function"
    ) {
      return;
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  {
    checkDCE();
    reactDom.exports = requireReactDom_production_min();
  }
  return reactDom.exports;
}

var hasRequiredClient;

function requireClient() {
  if (hasRequiredClient) return client;
  hasRequiredClient = 1;
  var m = requireReactDom();
  {
    client.createRoot = m.createRoot;
    client.hydrateRoot = m.hydrateRoot;
  }
  return client;
}

var clientExports = requireClient();

var reactExports = requireReact();
const React = /*@__PURE__*/ getDefaultExportFromCjs(reactExports);

const React$1 = /*#__PURE__*/ _mergeNamespaces(
  {
    __proto__: null,
    default: React,
  },
  [reactExports]
);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const toKebabCase = (string) =>
  string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
const toCamelCase = (string) =>
  string.replace(/^([A-Z])|[\s-_]+(\w)/g, (match, p1, p2) =>
    p2 ? p2.toUpperCase() : p1.toLowerCase()
  );
const toPascalCase = (string) => {
  const camelCase = toCamelCase(string);
  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
};
const mergeClasses = (...classes) =>
  classes
    .filter((className, index, array) => {
      return (
        Boolean(className) &&
        className.trim() !== "" &&
        array.indexOf(className) === index
      );
    })
    .join(" ")
    .trim();

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

var defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
};

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const Icon = reactExports.forwardRef(
  (
    {
      color = "currentColor",
      size = 24,
      strokeWidth = 2,
      absoluteStrokeWidth,
      className = "",
      children,
      iconNode,
      ...rest
    },
    ref
  ) => {
    return reactExports.createElement(
      "svg",
      {
        ref,
        ...defaultAttributes,
        width: size,
        height: size,
        stroke: color,
        strokeWidth: absoluteStrokeWidth
          ? (Number(strokeWidth) * 24) / Number(size)
          : strokeWidth,
        className: mergeClasses("lucide", className),
        ...rest,
      },
      [
        ...iconNode.map(([tag, attrs]) =>
          reactExports.createElement(tag, attrs)
        ),
        ...(Array.isArray(children) ? children : [children]),
      ]
    );
  }
);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const createLucideIcon = (iconName, iconNode) => {
  const Component = reactExports.forwardRef(({ className, ...props }, ref) =>
    reactExports.createElement(Icon, {
      ref,
      iconNode,
      className: mergeClasses(
        `lucide-${toKebabCase(toPascalCase(iconName))}`,
        `lucide-${iconName}`,
        className
      ),
      ...props,
    })
  );
  Component.displayName = toPascalCase(iconName);
  return Component;
};

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$v = [
  ["path", { d: "M15 6v6h4l-7 7-7-7h4V6h6z", key: "1thax2" }],
];
const ArrowBigDown = createLucideIcon("arrow-big-down", __iconNode$v);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$u = [
  ["path", { d: "M9 18v-6H5l7-7 7 7h-4v6H9z", key: "1x06kx" }],
];
const ArrowBigUp = createLucideIcon("arrow-big-up", __iconNode$u);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$t = [
  ["path", { d: "M12 7v14", key: "1akyts" }],
  [
    "path",
    {
      d: "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z",
      key: "ruj8y",
    },
  ],
];
const BookOpen = createLucideIcon("book-open", __iconNode$t);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$s = [
  ["path", { d: "M12 8V4H8", key: "hb8ula" }],
  [
    "rect",
    { width: "16", height: "12", x: "4", y: "8", rx: "2", key: "enze0r" },
  ],
  ["path", { d: "M2 14h2", key: "vft8re" }],
  ["path", { d: "M20 14h2", key: "4cs60a" }],
  ["path", { d: "M15 13v2", key: "1xurst" }],
  ["path", { d: "M9 13v2", key: "rq6x2g" }],
];
const Bot = createLucideIcon("bot", __iconNode$s);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$r = [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]];
const Check = createLucideIcon("check", __iconNode$r);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$q = [["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]];
const ChevronDown = createLucideIcon("chevron-down", __iconNode$q);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$p = [["path", { d: "m15 18-6-6 6-6", key: "1wnfg3" }]];
const ChevronLeft = createLucideIcon("chevron-left", __iconNode$p);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$o = [["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]];
const ChevronRight = createLucideIcon("chevron-right", __iconNode$o);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$n = [["path", { d: "m18 15-6-6-6 6", key: "153udz" }]];
const ChevronUp = createLucideIcon("chevron-up", __iconNode$n);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$m = [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
  ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }],
];
const CircleAlert = createLucideIcon("circle-alert", __iconNode$m);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$l = [
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
  ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
  ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }],
];
const Ellipsis = createLucideIcon("ellipsis", __iconNode$l);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$k = [
  [
    "path",
    {
      d: "M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49",
      key: "ct8e1f",
    },
  ],
  ["path", { d: "M14.084 14.158a3 3 0 0 1-4.242-4.242", key: "151rxh" }],
  [
    "path",
    {
      d: "M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143",
      key: "13bj9a",
    },
  ],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }],
];
const EyeOff = createLucideIcon("eye-off", __iconNode$k);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$j = [
  [
    "path",
    {
      d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",
      key: "1nclc0",
    },
  ],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
];
const Eye = createLucideIcon("eye", __iconNode$j);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$i = [
  [
    "path",
    {
      d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z",
      key: "1rqfz7",
    },
  ],
  ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
  ["path", { d: "M10 9H8", key: "b1mrlr" }],
  ["path", { d: "M16 13H8", key: "t4e002" }],
  ["path", { d: "M16 17H8", key: "z1uh3a" }],
];
const FileText = createLucideIcon("file-text", __iconNode$i);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$h = [
  ["path", { d: "M9 17H7A5 5 0 0 1 7 7h2", key: "8i5ue5" }],
  ["path", { d: "M15 7h2a5 5 0 1 1 0 10h-2", key: "1b9ql8" }],
  ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }],
];
const Link2 = createLucideIcon("link-2", __iconNode$h);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$g = [
  [
    "path",
    {
      d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71",
      key: "1cjeqo",
    },
  ],
  [
    "path",
    {
      d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71",
      key: "19qd67",
    },
  ],
];
const Link = createLucideIcon("link", __iconNode$g);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$f = [
  ["path", { d: "M21 12a9 9 0 1 1-6.219-8.56", key: "13zald" }],
];
const LoaderCircle = createLucideIcon("loader-circle", __iconNode$f);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$e = [
  ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }],
  ["line", { x1: "4", x2: "20", y1: "6", y2: "6", key: "1owob3" }],
  ["line", { x1: "4", x2: "20", y1: "18", y2: "18", key: "yk5zj1" }],
];
const Menu$1 = createLucideIcon("menu", __iconNode$e);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$d = [
  [
    "path",
    {
      d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z",
      key: "1lielz",
    },
  ],
];
const MessageSquare = createLucideIcon("message-square", __iconNode$d);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$c = [
  [
    "rect",
    { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" },
  ],
  ["line", { x1: "8", x2: "16", y1: "21", y2: "21", key: "1svkeh" }],
  ["line", { x1: "12", x2: "12", y1: "17", y2: "21", key: "vw1qmm" }],
];
const Monitor = createLucideIcon("monitor", __iconNode$c);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$b = [
  ["path", { d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z", key: "a7tn18" }],
];
const Moon = createLucideIcon("moon", __iconNode$b);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$a = [
  ["path", { d: "M5 12h14", key: "1ays0h" }],
  ["path", { d: "M12 5v14", key: "s699le" }],
];
const Plus = createLucideIcon("plus", __iconNode$a);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$9 = [
  [
    "path",
    {
      d: "M16 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z",
      key: "rib7q0",
    },
  ],
  [
    "path",
    {
      d: "M5 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z",
      key: "1ymkrd",
    },
  ],
];
const Quote = createLucideIcon("quote", __iconNode$9);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$8 = [
  ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
  ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }],
];
const Search = createLucideIcon("search", __iconNode$8);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$7 = [
  [
    "path",
    {
      d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",
      key: "1ffxy3",
    },
  ],
  ["path", { d: "m21.854 2.147-10.94 10.939", key: "12cjpa" }],
];
const Send = createLucideIcon("send", __iconNode$7);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$6 = [
  [
    "path",
    {
      d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z",
      key: "4pj2yx",
    },
  ],
  ["path", { d: "M20 3v4", key: "1olli1" }],
  ["path", { d: "M22 5h-4", key: "1gvqau" }],
  ["path", { d: "M4 17v2", key: "vumght" }],
  ["path", { d: "M5 18H3", key: "zchphs" }],
];
const Sparkles = createLucideIcon("sparkles", __iconNode$6);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$5 = [
  [
    "path",
    {
      d: "M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z",
      key: "r04s7s",
    },
  ],
];
const Star = createLucideIcon("star", __iconNode$5);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$4 = [
  ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
  ["path", { d: "M12 2v2", key: "tus03m" }],
  ["path", { d: "M12 20v2", key: "1lh1kg" }],
  ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
  ["path", { d: "m17.66 17.66 1.41 1.41", key: "ptbguv" }],
  ["path", { d: "M2 12h2", key: "1t8f8n" }],
  ["path", { d: "M20 12h2", key: "1q8mjw" }],
  ["path", { d: "m6.34 17.66-1.41 1.41", key: "1m8zz5" }],
  ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
];
const Sun = createLucideIcon("sun", __iconNode$4);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$3 = [
  ["path", { d: "M3 6h18", key: "d0wm0j" }],
  ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
  ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }],
  ["line", { x1: "10", x2: "10", y1: "11", y2: "17", key: "1uufr5" }],
  ["line", { x1: "14", x2: "14", y1: "11", y2: "17", key: "xtxkd" }],
];
const Trash2 = createLucideIcon("trash-2", __iconNode$3);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$2 = [
  [
    "path",
    {
      d: "m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5",
      key: "ftymec",
    },
  ],
  [
    "rect",
    { x: "2", y: "6", width: "14", height: "12", rx: "2", key: "158x01" },
  ],
];
const Video = createLucideIcon("video", __iconNode$2);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode$1 = [
  [
    "path",
    {
      d: "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72",
      key: "ul74o6",
    },
  ],
  ["path", { d: "m14 7 3 3", key: "1r5n42" }],
  ["path", { d: "M5 6v4", key: "ilb8ba" }],
  ["path", { d: "M19 14v4", key: "blhpug" }],
  ["path", { d: "M10 2v2", key: "7u0qdc" }],
  ["path", { d: "M7 8H3", key: "zfb6yr" }],
  ["path", { d: "M21 16h-4", key: "1cnmox" }],
  ["path", { d: "M11 3H9", key: "1obp7u" }],
];
const WandSparkles = createLucideIcon("wand-sparkles", __iconNode$1);

/**
 * @license lucide-react v0.487.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const __iconNode = [
  ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
  ["path", { d: "m6 6 12 12", key: "d8bk6v" }],
];
const X = createLucideIcon("x", __iconNode);

const LayoutGroupContext = reactExports.createContext({});

/**
 * Creates a constant value over the lifecycle of a component.
 *
 * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer
 * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`
 * you can ensure that initialisers don't execute twice or more.
 */
function useConstant(init) {
  const ref = reactExports.useRef(null);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}

const isBrowser = typeof window !== "undefined";

const useIsomorphicLayoutEffect$1 = isBrowser
  ? reactExports.useLayoutEffect
  : reactExports.useEffect;

/**
 * @public
 */
const PresenceContext = /* @__PURE__ */ reactExports.createContext(null);

function addUniqueItem(arr, item) {
  if (arr.indexOf(item) === -1) arr.push(item);
}
function removeItem(arr, item) {
  const index = arr.indexOf(item);
  if (index > -1) arr.splice(index, 1);
}

const clamp$1 = (min, max, v) => {
  if (v > max) return max;
  if (v < min) return min;
  return v;
};

let invariant = () => {};

const MotionGlobalConfig = {};

/**
 * Check if value is a numerical string, ie a string that is purely a number eg "100" or "-100.1"
 */
const isNumericalString = (v) => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(v);

function isObject(value) {
  return typeof value === "object" && value !== null;
}

/**
 * Check if the value is a zero value string like "0px" or "0%"
 */
const isZeroValueString = (v) => /^0[^.\s]+$/u.test(v);

/*#__NO_SIDE_EFFECTS__*/
function memo(callback) {
  let result;
  return () => {
    if (result === undefined) result = callback();
    return result;
  };
}

/*#__NO_SIDE_EFFECTS__*/
const noop$1 = (any) => any;

/**
 * Pipe
 * Compose other transformers to run linearily
 * pipe(min(20), max(40))
 * @param  {...functions} transformers
 * @return {function}
 */
const combineFunctions = (a, b) => (v) => b(a(v));
const pipe = (...transformers) => transformers.reduce(combineFunctions);

/*
  Progress within given range

  Given a lower limit and an upper limit, we return the progress
  (expressed as a number 0-1) represented by the given value, and
  limit that progress to within 0-1.

  @param [number]: Lower limit
  @param [number]: Upper limit
  @param [number]: Value to find progress within given range
  @return [number]: Progress of value within range as expressed 0-1
*/
/*#__NO_SIDE_EFFECTS__*/
const progress = (from, to, value) => {
  const toFromDifference = to - from;
  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};

class SubscriptionManager {
  constructor() {
    this.subscriptions = [];
  }
  add(handler) {
    addUniqueItem(this.subscriptions, handler);
    return () => removeItem(this.subscriptions, handler);
  }
  notify(a, b, c) {
    const numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions) return;
    if (numSubscriptions === 1) {
      /**
       * If there's only a single handler we can just call it without invoking a loop.
       */
      this.subscriptions[0](a, b, c);
    } else {
      for (let i = 0; i < numSubscriptions; i++) {
        /**
         * Check whether the handler exists before firing as it's possible
         * the subscriptions were modified during this loop running.
         */
        const handler = this.subscriptions[i];
        handler && handler(a, b, c);
      }
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
}

/**
 * Converts seconds to milliseconds
 *
 * @param seconds - Time in seconds.
 * @return milliseconds - Converted time in milliseconds.
 */
/*#__NO_SIDE_EFFECTS__*/
const secondsToMilliseconds = (seconds) => seconds * 1000;
/*#__NO_SIDE_EFFECTS__*/
const millisecondsToSeconds = (milliseconds) => milliseconds / 1000;

/*
  Convert velocity into velocity per second

  @param [number]: Unit per frame
  @param [number]: Frame duration in ms
*/
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1000 / frameDuration) : 0;
}

/*
  Bezier function generator
  This has been modified from Gaëtan Renaudeau's BezierEasing
  https://github.com/gre/bezier-easing/blob/master/src/index.js
  https://github.com/gre/bezier-easing/blob/master/LICENSE
  
  I've removed the newtonRaphsonIterate algo because in benchmarking it
  wasn't noticeably faster than binarySubdivision, indeed removing it
  usually improved times, depending on the curve.
  I also removed the lookup table, as for the added bundle size and loop we're
  only cutting ~4 or so subdivision iterations. I bumped the max iterations up
  to 12 to compensate and this still tended to be faster for no perceivable
  loss in accuracy.
  Usage
    const easeOut = cubicBezier(.17,.67,.83,.67);
    const x = easeOut(0.5); // returns 0.627...
*/
// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
const calcBezier = (t, a1, a2) =>
  (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *
  t;
const subdivisionPrecision = 0.0000001;
const subdivisionMaxIterations = 12;
function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
  let currentX;
  let currentT;
  let i = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - x;
    if (currentX > 0.0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (
    Math.abs(currentX) > subdivisionPrecision &&
    ++i < subdivisionMaxIterations
  );
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  // If this is a linear gradient, return linear easing
  if (mX1 === mY1 && mX2 === mY2) return noop$1;
  const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
  // If animation is at start/end, return t without easing
  return (t) => (t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2));
}

// Accepts an easing function and returns a new one that outputs mirrored values for
// the second half of the animation. Turns easeIn into easeInOut.
const mirrorEasing = (easing) => (p) =>
  p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

// Accepts an easing function and returns a new one that outputs reversed values.
// Turns easeIn into easeOut.
const reverseEasing = (easing) => (p) => 1 - easing(1 - p);

const backOut = /*@__PURE__*/ cubicBezier(0.33, 1.53, 0.69, 0.99);
const backIn = /*@__PURE__*/ reverseEasing(backOut);
const backInOut = /*@__PURE__*/ mirrorEasing(backIn);

const anticipate = (p) =>
  (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

const circIn = (p) => 1 - Math.sin(Math.acos(p));
const circOut = reverseEasing(circIn);
const circInOut = mirrorEasing(circIn);

const easeIn = /*@__PURE__*/ cubicBezier(0.42, 0, 1, 1);
const easeOut = /*@__PURE__*/ cubicBezier(0, 0, 0.58, 1);
const easeInOut = /*@__PURE__*/ cubicBezier(0.42, 0, 0.58, 1);

const isEasingArray = (ease) => {
  return Array.isArray(ease) && typeof ease[0] !== "number";
};

const isBezierDefinition = (easing) =>
  Array.isArray(easing) && typeof easing[0] === "number";

const easingLookup = {
  linear: noop$1,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate,
};
const isValidEasing = (easing) => {
  return typeof easing === "string";
};
const easingDefinitionToFunction = (definition) => {
  if (isBezierDefinition(definition)) {
    // If cubic bezier definition, create bezier curve
    invariant(definition.length === 4);
    const [x1, y1, x2, y2] = definition;
    return cubicBezier(x1, y1, x2, y2);
  } else if (isValidEasing(definition)) {
    return easingLookup[definition];
  }
  return definition;
};

const stepsOrder = [
  "setup", // Compute
  "read", // Read
  "resolveKeyframes", // Write/Read/Write/Read
  "preUpdate", // Compute
  "update", // Compute
  "preRender", // Compute
  "render", // Write
  "postRender", // Compute
];

function createRenderStep(runNextFrame, stepName) {
  /**
   * We create and reuse two queues, one to queue jobs for the current frame
   * and one for the next. We reuse to avoid triggering GC after x frames.
   */
  let thisFrame = new Set();
  let nextFrame = new Set();
  /**
   * Track whether we're currently processing jobs in this step. This way
   * we can decide whether to schedule new jobs for this frame or next.
   */
  let isProcessing = false;
  let flushNextFrame = false;
  /**
   * A set of processes which were marked keepAlive when scheduled.
   */
  const toKeepAlive = new WeakSet();
  let latestFrameData = {
    delta: 0.0,
    timestamp: 0.0,
    isProcessing: false,
  };
  function triggerCallback(callback) {
    if (toKeepAlive.has(callback)) {
      step.schedule(callback);
      runNextFrame();
    }
    callback(latestFrameData);
  }
  const step = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing;
      const queue = addToCurrentFrame ? thisFrame : nextFrame;
      if (keepAlive) toKeepAlive.add(callback);
      if (!queue.has(callback)) queue.add(callback);
      return callback;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (callback) => {
      nextFrame.delete(callback);
      toKeepAlive.delete(callback);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (frameData) => {
      latestFrameData = frameData;
      /**
       * If we're already processing we've probably been triggered by a flushSync
       * inside an existing process. Instead of executing, mark flushNextFrame
       * as true and ensure we flush the following frame at the end of this one.
       */
      if (isProcessing) {
        flushNextFrame = true;
        return;
      }
      isProcessing = true;
      [thisFrame, nextFrame] = [nextFrame, thisFrame];
      // Execute this frame
      thisFrame.forEach(triggerCallback);
      // Clear the frame so no callbacks remain. This is to avoid
      // memory leaks should this render step not run for a while.
      thisFrame.clear();
      isProcessing = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData);
      }
    },
  };
  return step;
}

const maxElapsed = 40;
function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
  let runNextFrame = false;
  let useDefaultElapsed = true;
  const state = {
    delta: 0.0,
    timestamp: 0.0,
    isProcessing: false,
  };
  const flagRunNextFrame = () => (runNextFrame = true);
  const steps = stepsOrder.reduce((acc, key) => {
    acc[key] = createRenderStep(flagRunNextFrame);
    return acc;
  }, {});
  const {
    setup,
    read,
    resolveKeyframes,
    preUpdate,
    update,
    preRender,
    render,
    postRender,
  } = steps;
  const processBatch = () => {
    const timestamp = MotionGlobalConfig.useManualTiming
      ? state.timestamp
      : performance.now();
    runNextFrame = false;
    if (!MotionGlobalConfig.useManualTiming) {
      state.delta = useDefaultElapsed
        ? 1000 / 60
        : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
    }
    state.timestamp = timestamp;
    state.isProcessing = true;
    // Unrolled render loop for better per-frame performance
    setup.process(state);
    read.process(state);
    resolveKeyframes.process(state);
    preUpdate.process(state);
    update.process(state);
    preRender.process(state);
    render.process(state);
    postRender.process(state);
    state.isProcessing = false;
    if (runNextFrame && allowKeepAlive) {
      useDefaultElapsed = false;
      scheduleNextBatch(processBatch);
    }
  };
  const wake = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!state.isProcessing) {
      scheduleNextBatch(processBatch);
    }
  };
  const schedule = stepsOrder.reduce((acc, key) => {
    const step = steps[key];
    acc[key] = (process, keepAlive = false, immediate = false) => {
      if (!runNextFrame) wake();
      return step.schedule(process, keepAlive, immediate);
    };
    return acc;
  }, {});
  const cancel = (process) => {
    for (let i = 0; i < stepsOrder.length; i++) {
      steps[stepsOrder[i]].cancel(process);
    }
  };
  return { schedule, cancel, state, steps };
}

const {
  schedule: frame,
  cancel: cancelFrame,
  state: frameData,
  steps: frameSteps,
} = /* @__PURE__ */ createRenderBatcher(
  typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop$1,
  true
);

let now;
function clearTime() {
  now = undefined;
}
/**
 * An eventloop-synchronous alternative to performance.now().
 *
 * Ensures that time measurements remain consistent within a synchronous context.
 * Usually calling performance.now() twice within the same synchronous context
 * will return different values which isn't useful for animations when we're usually
 * trying to sync animations to the same frame.
 */
const time = {
  now: () => {
    if (now === undefined) {
      time.set(
        frameData.isProcessing || MotionGlobalConfig.useManualTiming
          ? frameData.timestamp
          : performance.now()
      );
    }
    return now;
  },
  set: (newTime) => {
    now = newTime;
    queueMicrotask(clearTime);
  },
};

const checkStringStartsWith = (token) => (key) =>
  typeof key === "string" && key.startsWith(token);
const isCSSVariableName = /*@__PURE__*/ checkStringStartsWith("--");
const startsAsVariableToken = /*@__PURE__*/ checkStringStartsWith("var(--");
const isCSSVariableToken = (value) => {
  const startsWithToken = startsAsVariableToken(value);
  if (!startsWithToken) return false;
  // Ensure any comments are stripped from the value as this can harm performance of the regex.
  return singleCssVariableRegex.test(value.split("/*")[0].trim());
};
const singleCssVariableRegex =
  /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu;

const number = {
  test: (v) => typeof v === "number",
  parse: parseFloat,
  transform: (v) => v,
};
const alpha = {
  ...number,
  transform: (v) => clamp$1(0, 1, v),
};
const scale = {
  ...number,
  default: 1,
};

// If this number is a decimal, make it just five decimal places
// to avoid exponents
const sanitize = (v) => Math.round(v * 100000) / 100000;

const floatRegex = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;

function isNullish(v) {
  return v == null;
}

const singleColorRegex =
  /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu;

/**
 * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,
 * but false if a number or multiple colors
 */
const isColorString = (type, testProp) => (v) => {
  return Boolean(
    (typeof v === "string" && singleColorRegex.test(v) && v.startsWith(type)) ||
      (testProp &&
        !isNullish(v) &&
        Object.prototype.hasOwnProperty.call(v, testProp))
  );
};
const splitColor = (aName, bName, cName) => (v) => {
  if (typeof v !== "string") return v;
  const [a, b, c, alpha] = v.match(floatRegex);
  return {
    [aName]: parseFloat(a),
    [bName]: parseFloat(b),
    [cName]: parseFloat(c),
    alpha: alpha !== undefined ? parseFloat(alpha) : 1,
  };
};

const clampRgbUnit = (v) => clamp$1(0, 255, v);
const rgbUnit = {
  ...number,
  transform: (v) => Math.round(clampRgbUnit(v)),
};
const rgba = {
  test: /*@__PURE__*/ isColorString("rgb", "red"),
  parse: /*@__PURE__*/ splitColor("red", "green", "blue"),
  transform: ({ red, green, blue, alpha: alpha$1 = 1 }) =>
    "rgba(" +
    rgbUnit.transform(red) +
    ", " +
    rgbUnit.transform(green) +
    ", " +
    rgbUnit.transform(blue) +
    ", " +
    sanitize(alpha.transform(alpha$1)) +
    ")",
};

function parseHex(v) {
  let r = "";
  let g = "";
  let b = "";
  let a = "";
  // If we have 6 characters, ie #FF0000
  if (v.length > 5) {
    r = v.substring(1, 3);
    g = v.substring(3, 5);
    b = v.substring(5, 7);
    a = v.substring(7, 9);
    // Or we have 3 characters, ie #F00
  } else {
    r = v.substring(1, 2);
    g = v.substring(2, 3);
    b = v.substring(3, 4);
    a = v.substring(4, 5);
    r += r;
    g += g;
    b += b;
    a += a;
  }
  return {
    red: parseInt(r, 16),
    green: parseInt(g, 16),
    blue: parseInt(b, 16),
    alpha: a ? parseInt(a, 16) / 255 : 1,
  };
}
const hex = {
  test: /*@__PURE__*/ isColorString("#"),
  parse: parseHex,
  transform: rgba.transform,
};

/*#__NO_SIDE_EFFECTS__*/
const createUnitType = (unit) => ({
  test: (v) =>
    typeof v === "string" && v.endsWith(unit) && v.split(" ").length === 1,
  parse: parseFloat,
  transform: (v) => `${v}${unit}`,
});
const degrees = /*@__PURE__*/ createUnitType("deg");
const percent = /*@__PURE__*/ createUnitType("%");
const px = /*@__PURE__*/ createUnitType("px");
const vh = /*@__PURE__*/ createUnitType("vh");
const vw = /*@__PURE__*/ createUnitType("vw");
const progressPercentage = /*@__PURE__*/ (() => ({
  ...percent,
  parse: (v) => percent.parse(v) / 100,
  transform: (v) => percent.transform(v * 100),
}))();

const hsla = {
  test: /*@__PURE__*/ isColorString("hsl", "hue"),
  parse: /*@__PURE__*/ splitColor("hue", "saturation", "lightness"),
  transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
    return (
      "hsla(" +
      Math.round(hue) +
      ", " +
      percent.transform(sanitize(saturation)) +
      ", " +
      percent.transform(sanitize(lightness)) +
      ", " +
      sanitize(alpha.transform(alpha$1)) +
      ")"
    );
  },
};

const color = {
  test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
  parse: (v) => {
    if (rgba.test(v)) {
      return rgba.parse(v);
    } else if (hsla.test(v)) {
      return hsla.parse(v);
    } else {
      return hex.parse(v);
    }
  },
  transform: (v) => {
    return typeof v === "string"
      ? v
      : v.hasOwnProperty("red")
      ? rgba.transform(v)
      : hsla.transform(v);
  },
  getAnimatableNone: (v) => {
    const parsed = color.parse(v);
    parsed.alpha = 0;
    return color.transform(parsed);
  },
};

const colorRegex =
  /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;

function test(v) {
  return (
    isNaN(v) &&
    typeof v === "string" &&
    (v.match(floatRegex)?.length || 0) + (v.match(colorRegex)?.length || 0) > 0
  );
}
const NUMBER_TOKEN = "number";
const COLOR_TOKEN = "color";
const VAR_TOKEN = "var";
const VAR_FUNCTION_TOKEN = "var(";
const SPLIT_TOKEN = "${}";
// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`
const complexRegex =
  /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
function analyseComplexValue(value) {
  const originalValue = value.toString();
  const values = [];
  const indexes = {
    color: [],
    number: [],
    var: [],
  };
  const types = [];
  let i = 0;
  const tokenised = originalValue.replace(complexRegex, (parsedValue) => {
    if (color.test(parsedValue)) {
      indexes.color.push(i);
      types.push(COLOR_TOKEN);
      values.push(color.parse(parsedValue));
    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {
      indexes.var.push(i);
      types.push(VAR_TOKEN);
      values.push(parsedValue);
    } else {
      indexes.number.push(i);
      types.push(NUMBER_TOKEN);
      values.push(parseFloat(parsedValue));
    }
    ++i;
    return SPLIT_TOKEN;
  });
  const split = tokenised.split(SPLIT_TOKEN);
  return { values, split, indexes, types };
}
function parseComplexValue(v) {
  return analyseComplexValue(v).values;
}
function createTransformer(source) {
  const { split, types } = analyseComplexValue(source);
  const numSections = split.length;
  return (v) => {
    let output = "";
    for (let i = 0; i < numSections; i++) {
      output += split[i];
      if (v[i] !== undefined) {
        const type = types[i];
        if (type === NUMBER_TOKEN) {
          output += sanitize(v[i]);
        } else if (type === COLOR_TOKEN) {
          output += color.transform(v[i]);
        } else {
          output += v[i];
        }
      }
    }
    return output;
  };
}
const convertNumbersToZero = (v) =>
  typeof v === "number" ? 0 : color.test(v) ? color.getAnimatableNone(v) : v;
function getAnimatableNone$1(v) {
  const parsed = parseComplexValue(v);
  const transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}
const complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone: getAnimatableNone$1,
};

// Adapted from https://gist.github.com/mjackson/5311256
function hueToRgb(p, q, t) {
  if (t < 0) t += 1;
  if (t > 1) t -= 1;
  if (t < 1 / 6) return p + (q - p) * 6 * t;
  if (t < 1 / 2) return q;
  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
function hslaToRgba({ hue, saturation, lightness, alpha }) {
  hue /= 360;
  saturation /= 100;
  lightness /= 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (!saturation) {
    red = green = blue = lightness;
  } else {
    const q =
      lightness < 0.5
        ? lightness * (1 + saturation)
        : lightness + saturation - lightness * saturation;
    const p = 2 * lightness - q;
    red = hueToRgb(p, q, hue + 1 / 3);
    green = hueToRgb(p, q, hue);
    blue = hueToRgb(p, q, hue - 1 / 3);
  }
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha,
  };
}

function mixImmediate(a, b) {
  return (p) => (p > 0 ? b : a);
}

/*
  Value in range from progress

  Given a lower limit and an upper limit, we return the value within
  that range as expressed by progress (usually a number from 0 to 1)

  So progress = 0.5 would change

  from -------- to

  to

  from ---- to

  E.g. from = 10, to = 20, progress = 0.5 => 15

  @param [number]: Lower limit of range
  @param [number]: Upper limit of range
  @param [number]: The progress between lower and upper limits expressed 0-1
  @return [number]: Value as calculated from progress within range (not limited within range)
*/
const mixNumber$1 = (from, to, progress) => {
  return from + (to - from) * progress;
};

// Linear color space blending
// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw
// Demonstrated http://codepen.io/osublake/pen/xGVVaN
const mixLinearColor = (from, to, v) => {
  const fromExpo = from * from;
  const expo = v * (to * to - fromExpo) + fromExpo;
  return expo < 0 ? 0 : Math.sqrt(expo);
};
const colorTypes = [hex, rgba, hsla];
const getColorType = (v) => colorTypes.find((type) => type.test(v));
function asRGBA(color) {
  const type = getColorType(color);
  if (!Boolean(type)) return false;
  let model = type.parse(color);
  if (type === hsla) {
    // TODO Remove this cast - needed since Motion's stricter typing
    model = hslaToRgba(model);
  }
  return model;
}
const mixColor = (from, to) => {
  const fromRGBA = asRGBA(from);
  const toRGBA = asRGBA(to);
  if (!fromRGBA || !toRGBA) {
    return mixImmediate(from, to);
  }
  const blended = { ...fromRGBA };
  return (v) => {
    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
    blended.alpha = mixNumber$1(fromRGBA.alpha, toRGBA.alpha, v);
    return rgba.transform(blended);
  };
};

const invisibleValues = new Set(["none", "hidden"]);
/**
 * Returns a function that, when provided a progress value between 0 and 1,
 * will return the "none" or "hidden" string only when the progress is that of
 * the origin or target.
 */
function mixVisibility(origin, target) {
  if (invisibleValues.has(origin)) {
    return (p) => (p <= 0 ? origin : target);
  } else {
    return (p) => (p >= 1 ? target : origin);
  }
}

function mixNumber(a, b) {
  return (p) => mixNumber$1(a, b, p);
}
function getMixer(a) {
  if (typeof a === "number") {
    return mixNumber;
  } else if (typeof a === "string") {
    return isCSSVariableToken(a)
      ? mixImmediate
      : color.test(a)
      ? mixColor
      : mixComplex;
  } else if (Array.isArray(a)) {
    return mixArray;
  } else if (typeof a === "object") {
    return color.test(a) ? mixColor : mixObject;
  }
  return mixImmediate;
}
function mixArray(a, b) {
  const output = [...a];
  const numValues = output.length;
  const blendValue = a.map((v, i) => getMixer(v)(v, b[i]));
  return (p) => {
    for (let i = 0; i < numValues; i++) {
      output[i] = blendValue[i](p);
    }
    return output;
  };
}
function mixObject(a, b) {
  const output = { ...a, ...b };
  const blendValue = {};
  for (const key in output) {
    if (a[key] !== undefined && b[key] !== undefined) {
      blendValue[key] = getMixer(a[key])(a[key], b[key]);
    }
  }
  return (v) => {
    for (const key in blendValue) {
      output[key] = blendValue[key](v);
    }
    return output;
  };
}
function matchOrder(origin, target) {
  const orderedOrigin = [];
  const pointers = { color: 0, var: 0, number: 0 };
  for (let i = 0; i < target.values.length; i++) {
    const type = target.types[i];
    const originIndex = origin.indexes[type][pointers[type]];
    const originValue = origin.values[originIndex] ?? 0;
    orderedOrigin[i] = originValue;
    pointers[type]++;
  }
  return orderedOrigin;
}
const mixComplex = (origin, target) => {
  const template = complex.createTransformer(target);
  const originStats = analyseComplexValue(origin);
  const targetStats = analyseComplexValue(target);
  const canInterpolate =
    originStats.indexes.var.length === targetStats.indexes.var.length &&
    originStats.indexes.color.length === targetStats.indexes.color.length &&
    originStats.indexes.number.length >= targetStats.indexes.number.length;
  if (canInterpolate) {
    if (
      (invisibleValues.has(origin) && !targetStats.values.length) ||
      (invisibleValues.has(target) && !originStats.values.length)
    ) {
      return mixVisibility(origin, target);
    }
    return pipe(
      mixArray(matchOrder(originStats, targetStats), targetStats.values),
      template
    );
  } else {
    return mixImmediate(origin, target);
  }
};

function mix(from, to, p) {
  if (
    typeof from === "number" &&
    typeof to === "number" &&
    typeof p === "number"
  ) {
    return mixNumber$1(from, to, p);
  }
  const mixer = getMixer(from);
  return mixer(from, to);
}

const frameloopDriver = (update) => {
  const passTimestamp = ({ timestamp }) => update(timestamp);
  return {
    start: (keepAlive = true) => frame.update(passTimestamp, keepAlive),
    stop: () => cancelFrame(passTimestamp),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),
  };
};

const generateLinearEasing = (
  easing,
  duration, // as milliseconds
  resolution = 10 // as milliseconds
) => {
  let points = "";
  const numPoints = Math.max(Math.round(duration / resolution), 2);
  for (let i = 0; i < numPoints; i++) {
    points += Math.round(easing(i / (numPoints - 1)) * 10000) / 10000 + ", ";
  }
  return `linear(${points.substring(0, points.length - 2)})`;
};

/**
 * Implement a practical max duration for keyframe generation
 * to prevent infinite loops
 */
const maxGeneratorDuration = 20000;
function calcGeneratorDuration(generator) {
  let duration = 0;
  const timeStep = 50;
  let state = generator.next(duration);
  while (!state.done && duration < maxGeneratorDuration) {
    duration += timeStep;
    state = generator.next(duration);
  }
  return duration >= maxGeneratorDuration ? Infinity : duration;
}

/**
 * Create a progress => progress easing function from a generator.
 */
function createGeneratorEasing(options, scale = 100, createGenerator) {
  const generator = createGenerator({ ...options, keyframes: [0, scale] });
  const duration = Math.min(
    calcGeneratorDuration(generator),
    maxGeneratorDuration
  );
  return {
    type: "keyframes",
    ease: (progress) => {
      return generator.next(duration * progress).value / scale;
    },
    duration: millisecondsToSeconds(duration),
  };
}

const velocitySampleDuration = 5; // ms
function calcGeneratorVelocity(resolveValue, t, current) {
  const prevT = Math.max(t - velocitySampleDuration, 0);
  return velocityPerSecond(current - resolveValue(prevT), t - prevT);
}

const springDefaults = {
  // Default spring physics
  stiffness: 100,
  damping: 10,
  mass: 1.0,
  velocity: 0.0,
  // Default duration/bounce-based options
  duration: 800, // in ms
  bounce: 0.3,
  visualDuration: 0.3, // in seconds
  // Rest thresholds
  restSpeed: {
    granular: 0.01,
    default: 2,
  },
  restDelta: {
    granular: 0.005,
    default: 0.5,
  },
  // Limits
  minDuration: 0.01, // in seconds
  maxDuration: 10.0, // in seconds
  minDamping: 0.05,
  maxDamping: 1,
};

const safeMin = 0.001;
function findSpring({
  duration = springDefaults.duration,
  bounce = springDefaults.bounce,
  velocity = springDefaults.velocity,
  mass = springDefaults.mass,
}) {
  let envelope;
  let derivative;
  let dampingRatio = 1 - bounce;
  /**
   * Restrict dampingRatio and duration to within acceptable ranges.
   */
  dampingRatio = clamp$1(
    springDefaults.minDamping,
    springDefaults.maxDamping,
    dampingRatio
  );
  duration = clamp$1(
    springDefaults.minDuration,
    springDefaults.maxDuration,
    millisecondsToSeconds(duration)
  );
  if (dampingRatio < 1) {
    /**
     * Underdamped spring
     */
    envelope = (undampedFreq) => {
      const exponentialDecay = undampedFreq * dampingRatio;
      const delta = exponentialDecay * duration;
      const a = exponentialDecay - velocity;
      const b = calcAngularFreq(undampedFreq, dampingRatio);
      const c = Math.exp(-delta);
      return safeMin - (a / b) * c;
    };
    derivative = (undampedFreq) => {
      const exponentialDecay = undampedFreq * dampingRatio;
      const delta = exponentialDecay * duration;
      const d = delta * velocity + velocity;
      const e =
        Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;
      const f = Math.exp(-delta);
      const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);
      const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;
      return (factor * ((d - e) * f)) / g;
    };
  } else {
    /**
     * Critically-damped spring
     */
    envelope = (undampedFreq) => {
      const a = Math.exp(-undampedFreq * duration);
      const b = (undampedFreq - velocity) * duration + 1;
      return -safeMin + a * b;
    };
    derivative = (undampedFreq) => {
      const a = Math.exp(-undampedFreq * duration);
      const b = (velocity - undampedFreq) * (duration * duration);
      return a * b;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = secondsToMilliseconds(duration);
  if (isNaN(undampedFreq)) {
    return {
      stiffness: springDefaults.stiffness,
      damping: springDefaults.damping,
      duration,
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration,
    };
  }
}
const rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i = 1; i < rootIterations; i++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

const durationKeys = ["duration", "bounce"];
const physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys) {
  return keys.some((key) => options[key] !== undefined);
}
function getSpringOptions(options) {
  let springOptions = {
    velocity: springDefaults.velocity,
    stiffness: springDefaults.stiffness,
    damping: springDefaults.damping,
    mass: springDefaults.mass,
    isResolvedFromDuration: false,
    ...options,
  };
  // stiffness/damping/mass overrides duration/bounce
  if (
    !isSpringType(options, physicsKeys) &&
    isSpringType(options, durationKeys)
  ) {
    if (options.visualDuration) {
      const visualDuration = options.visualDuration;
      const root = (2 * Math.PI) / (visualDuration * 1.2);
      const stiffness = root * root;
      const damping =
        2 * clamp$1(0.05, 1, 1 - (options.bounce || 0)) * Math.sqrt(stiffness);
      springOptions = {
        ...springOptions,
        mass: springDefaults.mass,
        stiffness,
        damping,
      };
    } else {
      const derived = findSpring(options);
      springOptions = {
        ...springOptions,
        ...derived,
        mass: springDefaults.mass,
      };
      springOptions.isResolvedFromDuration = true;
    }
  }
  return springOptions;
}
function spring(
  optionsOrVisualDuration = springDefaults.visualDuration,
  bounce = springDefaults.bounce
) {
  const options =
    typeof optionsOrVisualDuration !== "object"
      ? {
          visualDuration: optionsOrVisualDuration,
          keyframes: [0, 1],
          bounce,
        }
      : optionsOrVisualDuration;
  let { restSpeed, restDelta } = options;
  const origin = options.keyframes[0];
  const target = options.keyframes[options.keyframes.length - 1];
  /**
   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
   * to reduce GC during animation.
   */
  const state = { done: false, value: origin };
  const {
    stiffness,
    damping,
    mass,
    duration,
    velocity,
    isResolvedFromDuration,
  } = getSpringOptions({
    ...options,
    velocity: -millisecondsToSeconds(options.velocity || 0),
  });
  const initialVelocity = velocity || 0.0;
  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
  const initialDelta = target - origin;
  const undampedAngularFreq = millisecondsToSeconds(
    Math.sqrt(stiffness / mass)
  );
  /**
   * If we're working on a granular scale, use smaller defaults for determining
   * when the spring is finished.
   *
   * These defaults have been selected emprically based on what strikes a good
   * ratio between feeling good and finishing as soon as changes are imperceptible.
   */
  const isGranularScale = Math.abs(initialDelta) < 5;
  restSpeed ||
    (restSpeed = isGranularScale
      ? springDefaults.restSpeed.granular
      : springDefaults.restSpeed.default);
  restDelta ||
    (restDelta = isGranularScale
      ? springDefaults.restDelta.granular
      : springDefaults.restDelta.default);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
    // Underdamped spring
    resolveSpring = (t) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
      return (
        target -
        envelope *
          (((initialVelocity +
            dampingRatio * undampedAngularFreq * initialDelta) /
            angularFreq) *
            Math.sin(angularFreq * t) +
            initialDelta * Math.cos(angularFreq * t))
      );
    };
  } else if (dampingRatio === 1) {
    // Critically damped spring
    resolveSpring = (t) =>
      target -
      Math.exp(-undampedAngularFreq * t) *
        (initialDelta +
          (initialVelocity + undampedAngularFreq * initialDelta) * t);
  } else {
    // Overdamped spring
    const dampedAngularFreq =
      undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
    resolveSpring = (t) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
      // When performing sinh or cosh values can hit Infinity so we cap them here
      const freqForT = Math.min(dampedAngularFreq * t, 300);
      return (
        target -
        (envelope *
          ((initialVelocity +
            dampingRatio * undampedAngularFreq * initialDelta) *
            Math.sinh(freqForT) +
            dampedAngularFreq * initialDelta * Math.cosh(freqForT))) /
          dampedAngularFreq
      );
    };
  }
  const generator = {
    calculatedDuration: isResolvedFromDuration ? duration || null : null,
    next: (t) => {
      const current = resolveSpring(t);
      if (!isResolvedFromDuration) {
        let currentVelocity = t === 0 ? initialVelocity : 0.0;
        /**
         * We only need to calculate velocity for under-damped springs
         * as over- and critically-damped springs can't overshoot, so
         * checking only for displacement is enough.
         */
        if (dampingRatio < 1) {
          currentVelocity =
            t === 0
              ? secondsToMilliseconds(initialVelocity)
              : calcGeneratorVelocity(resolveSpring, t, current);
        }
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold =
          Math.abs(target - current) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state.done = t >= duration;
      }
      state.value = state.done ? target : current;
      return state;
    },
    toString: () => {
      const calculatedDuration = Math.min(
        calcGeneratorDuration(generator),
        maxGeneratorDuration
      );
      const easing = generateLinearEasing(
        (progress) => generator.next(calculatedDuration * progress).value,
        calculatedDuration,
        30
      );
      return calculatedDuration + "ms " + easing;
    },
    toTransition: () => {},
  };
  return generator;
}
spring.applyToOptions = (options) => {
  const generatorOptions = createGeneratorEasing(options, 100, spring);
  options.ease = generatorOptions.ease;
  options.duration = secondsToMilliseconds(generatorOptions.duration);
  options.type = "keyframes";
  return options;
};

function inertia({
  keyframes,
  velocity = 0.0,
  power = 0.8,
  timeConstant = 325,
  bounceDamping = 10,
  bounceStiffness = 500,
  modifyTarget,
  min,
  max,
  restDelta = 0.5,
  restSpeed,
}) {
  const origin = keyframes[0];
  const state = {
    done: false,
    value: origin,
  };
  const isOutOfBounds = (v) =>
    (min !== undefined && v < min) || (max !== undefined && v > max);
  const nearestBoundary = (v) => {
    if (min === undefined) return max;
    if (max === undefined) return min;
    return Math.abs(min - v) < Math.abs(max - v) ? min : max;
  };
  let amplitude = power * velocity;
  const ideal = origin + amplitude;
  const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);
  /**
   * If the target has changed we need to re-calculate the amplitude, otherwise
   * the animation will start from the wrong position.
   */
  if (target !== ideal) amplitude = target - origin;
  const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);
  const calcLatest = (t) => target + calcDelta(t);
  const applyFriction = (t) => {
    const delta = calcDelta(t);
    const latest = calcLatest(t);
    state.done = Math.abs(delta) <= restDelta;
    state.value = state.done ? target : latest;
  };
  /**
   * Ideally this would resolve for t in a stateless way, we could
   * do that by always precalculating the animation but as we know
   * this will be done anyway we can assume that spring will
   * be discovered during that.
   */
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t) => {
    if (!isOutOfBounds(state.value)) return;
    timeReachedBoundary = t;
    spring$1 = spring({
      keyframes: [state.value, nearestBoundary(state.value)],
      velocity: calcGeneratorVelocity(calcLatest, t, state.value), // TODO: This should be passing * 1000
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed,
    });
  };
  checkCatchBoundary(0);
  return {
    calculatedDuration: null,
    next: (t) => {
      /**
       * We need to resolve the friction to figure out if we need a
       * spring but we don't want to do this twice per frame. So here
       * we flag if we updated for this frame and later if we did
       * we can skip doing it again.
       */
      let hasUpdatedFrame = false;
      if (!spring$1 && timeReachedBoundary === undefined) {
        hasUpdatedFrame = true;
        applyFriction(t);
        checkCatchBoundary(t);
      }
      /**
       * If we have a spring and the provided t is beyond the moment the friction
       * animation crossed the min/max boundary, use the spring.
       */
      if (timeReachedBoundary !== undefined && t >= timeReachedBoundary) {
        return spring$1.next(t - timeReachedBoundary);
      } else {
        !hasUpdatedFrame && applyFriction(t);
        return state;
      }
    },
  };
}

function createMixers(output, ease, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || MotionGlobalConfig.mix || mix;
  const numMixers = output.length - 1;
  for (let i = 0; i < numMixers; i++) {
    let mixer = mixerFactory(output[i], output[i + 1]);
    if (ease) {
      const easingFunction = Array.isArray(ease) ? ease[i] || noop$1 : ease;
      mixer = pipe(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
/**
 * Create a function that maps from a numerical input array to a generic output array.
 *
 * Accepts:
 *   - Numbers
 *   - Colors (hex, hsl, hsla, rgb, rgba)
 *   - Complex (combinations of one or more numbers or strings)
 *
 * ```jsx
 * const mixColor = interpolate([0, 1], ['#fff', '#000'])
 *
 * mixColor(0.5) // 'rgba(128, 128, 128, 1)'
 * ```
 *
 * TODO Revisit this approach once we've moved to data models for values,
 * probably not needed to pregenerate mixer functions.
 *
 * @public
 */
function interpolate(
  input,
  output,
  { clamp: isClamp = true, ease, mixer } = {}
) {
  const inputLength = input.length;
  invariant(inputLength === output.length);
  /**
   * If we're only provided a single input, we can just make a function
   * that returns the output.
   */
  if (inputLength === 1) return () => output[0];
  if (inputLength === 2 && output[0] === output[1]) return () => output[1];
  const isZeroDeltaRange = input[0] === input[1];
  // If input runs highest -> lowest, reverse both arrays
  if (input[0] > input[inputLength - 1]) {
    input = [...input].reverse();
    output = [...output].reverse();
  }
  const mixers = createMixers(output, ease, mixer);
  const numMixers = mixers.length;
  const interpolator = (v) => {
    if (isZeroDeltaRange && v < input[0]) return output[0];
    let i = 0;
    if (numMixers > 1) {
      for (; i < input.length - 2; i++) {
        if (v < input[i + 1]) break;
      }
    }
    const progressInRange = progress(input[i], input[i + 1], v);
    return mixers[i](progressInRange);
  };
  return isClamp
    ? (v) => interpolator(clamp$1(input[0], input[inputLength - 1], v))
    : interpolator;
}

function fillOffset(offset, remaining) {
  const min = offset[offset.length - 1];
  for (let i = 1; i <= remaining; i++) {
    const offsetProgress = progress(0, remaining, i);
    offset.push(mixNumber$1(min, 1, offsetProgress));
  }
}

function defaultOffset(arr) {
  const offset = [0];
  fillOffset(offset, arr.length - 1);
  return offset;
}

function convertOffsetToTimes(offset, duration) {
  return offset.map((o) => o * duration);
}

function defaultEasing(values, easing) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1);
}
function keyframes({
  duration = 300,
  keyframes: keyframeValues,
  times,
  ease = "easeInOut",
}) {
  /**
   * Easing functions can be externally defined as strings. Here we convert them
   * into actual functions.
   */
  const easingFunctions = isEasingArray(ease)
    ? ease.map(easingDefinitionToFunction)
    : easingDefinitionToFunction(ease);
  /**
   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
   * to reduce GC during animation.
   */
  const state = {
    done: false,
    value: keyframeValues[0],
  };
  /**
   * Create a times array based on the provided 0-1 offsets
   */
  const absoluteTimes = convertOffsetToTimes(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times && times.length === keyframeValues.length
      ? times
      : defaultOffset(keyframeValues),
    duration
  );
  const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions)
      ? easingFunctions
      : defaultEasing(keyframeValues, easingFunctions),
  });
  return {
    calculatedDuration: duration,
    next: (t) => {
      state.value = mapTimeToKeyframe(t);
      state.done = t >= duration;
      return state;
    },
  };
}

const isNotNull$2 = (value) => value !== null;
function getFinalKeyframe$1(
  keyframes,
  { repeat, repeatType = "loop" },
  finalKeyframe,
  speed = 1
) {
  const resolvedKeyframes = keyframes.filter(isNotNull$2);
  const useFirstKeyframe =
    speed < 0 || (repeat && repeatType !== "loop" && repeat % 2 === 1);
  const index = useFirstKeyframe ? 0 : resolvedKeyframes.length - 1;
  return !index || finalKeyframe === undefined
    ? resolvedKeyframes[index]
    : finalKeyframe;
}

const transitionTypeMap = {
  decay: inertia,
  inertia,
  tween: keyframes,
  keyframes: keyframes,
  spring,
};
function replaceTransitionType(transition) {
  if (typeof transition.type === "string") {
    transition.type = transitionTypeMap[transition.type];
  }
}

class WithPromise {
  constructor() {
    this.updateFinished();
  }
  get finished() {
    return this._finished;
  }
  updateFinished() {
    this._finished = new Promise((resolve) => {
      this.resolve = resolve;
    });
  }
  notifyFinished() {
    this.resolve();
  }
  /**
   * Allows the animation to be awaited.
   *
   * @deprecated Use `finished` instead.
   */
  then(onResolve, onReject) {
    return this.finished.then(onResolve, onReject);
  }
}

const percentToProgress = (percent) => percent / 100;
class JSAnimation extends WithPromise {
  constructor(options) {
    super();
    this.state = "idle";
    this.startTime = null;
    this.isStopped = false;
    this.currentTime = 0;
    this.holdTime = null;
    this.playbackSpeed = 1;
    this.stop = () => {
      const { motionValue } = this.options;
      if (motionValue && motionValue.updatedAt !== time.now()) {
        this.tick(time.now());
      }
      this.isStopped = true;
      if (this.state === "idle") return;
      this.teardown();
      this.options.onStop?.();
    };
    this.options = options;
    this.initAnimation();
    this.play();
    if (options.autoplay === false) this.pause();
  }
  initAnimation() {
    const { options } = this;
    replaceTransitionType(options);
    const {
      type = keyframes,
      repeat = 0,
      repeatDelay = 0,
      repeatType,
      velocity = 0,
    } = options;
    let { keyframes: keyframes$1 } = options;
    const generatorFactory = type || keyframes;
    if (generatorFactory !== keyframes && typeof keyframes$1[0] !== "number") {
      this.mixKeyframes = pipe(
        percentToProgress,
        mix(keyframes$1[0], keyframes$1[1])
      );
      keyframes$1 = [0, 100];
    }
    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });
    if (repeatType === "mirror") {
      this.mirroredGenerator = generatorFactory({
        ...options,
        keyframes: [...keyframes$1].reverse(),
        velocity: -velocity,
      });
    }
    if (generator.calculatedDuration === null) {
      generator.calculatedDuration = calcGeneratorDuration(generator);
    }
    const { calculatedDuration } = generator;
    this.calculatedDuration = calculatedDuration;
    this.resolvedDuration = calculatedDuration + repeatDelay;
    this.totalDuration = this.resolvedDuration * (repeat + 1) - repeatDelay;
    this.generator = generator;
  }
  updateTime(timestamp) {
    const animationTime =
      Math.round(timestamp - this.startTime) * this.playbackSpeed;
    if (this.holdTime !== null) {
      this.currentTime = this.holdTime;
    } else {
      this.currentTime = animationTime;
    }
  }
  tick(timestamp, sample = false) {
    const {
      generator,
      totalDuration,
      mixKeyframes,
      mirroredGenerator,
      resolvedDuration,
      calculatedDuration,
    } = this;
    if (this.startTime === null) return generator.next(0);
    const {
      delay = 0,
      keyframes: keyframes2,
      repeat,
      repeatType,
      repeatDelay,
      type,
      onUpdate,
      finalKeyframe,
    } = this.options;
    if (this.speed > 0) {
      this.startTime = Math.min(this.startTime, timestamp);
    } else if (this.speed < 0) {
      this.startTime = Math.min(
        timestamp - totalDuration / this.speed,
        this.startTime
      );
    }
    if (sample) {
      this.currentTime = timestamp;
    } else {
      this.updateTime(timestamp);
    }
    const timeWithoutDelay =
      this.currentTime - delay * (this.playbackSpeed >= 0 ? 1 : -1);
    const isInDelayPhase =
      this.playbackSpeed >= 0
        ? timeWithoutDelay < 0
        : timeWithoutDelay > totalDuration;
    this.currentTime = Math.max(timeWithoutDelay, 0);
    if (this.state === "finished" && this.holdTime === null) {
      this.currentTime = totalDuration;
    }
    let elapsed = this.currentTime;
    let frameGenerator = generator;
    if (repeat) {
      const progress =
        Math.min(this.currentTime, totalDuration) / resolvedDuration;
      let currentIteration = Math.floor(progress);
      let iterationProgress = progress % 1;
      if (!iterationProgress && progress >= 1) {
        iterationProgress = 1;
      }
      iterationProgress === 1 && currentIteration--;
      currentIteration = Math.min(currentIteration, repeat + 1);
      const isOddIteration = Boolean(currentIteration % 2);
      if (isOddIteration) {
        if (repeatType === "reverse") {
          iterationProgress = 1 - iterationProgress;
          if (repeatDelay) {
            iterationProgress -= repeatDelay / resolvedDuration;
          }
        } else if (repeatType === "mirror") {
          frameGenerator = mirroredGenerator;
        }
      }
      elapsed = clamp$1(0, 1, iterationProgress) * resolvedDuration;
    }
    const state = isInDelayPhase
      ? { done: false, value: keyframes2[0] }
      : frameGenerator.next(elapsed);
    if (mixKeyframes) {
      state.value = mixKeyframes(state.value);
    }
    let { done } = state;
    if (!isInDelayPhase && calculatedDuration !== null) {
      done =
        this.playbackSpeed >= 0
          ? this.currentTime >= totalDuration
          : this.currentTime <= 0;
    }
    const isAnimationFinished =
      this.holdTime === null &&
      (this.state === "finished" || (this.state === "running" && done));
    if (isAnimationFinished && type !== inertia) {
      state.value = getFinalKeyframe$1(
        keyframes2,
        this.options,
        finalKeyframe,
        this.speed
      );
    }
    if (onUpdate) {
      onUpdate(state.value);
    }
    if (isAnimationFinished) {
      this.finish();
    }
    return state;
  }
  /**
   * Allows the returned animation to be awaited or promise-chained. Currently
   * resolves when the animation finishes at all but in a future update could/should
   * reject if its cancels.
   */
  then(resolve, reject) {
    return this.finished.then(resolve, reject);
  }
  get duration() {
    return millisecondsToSeconds(this.calculatedDuration);
  }
  get time() {
    return millisecondsToSeconds(this.currentTime);
  }
  set time(newTime) {
    newTime = secondsToMilliseconds(newTime);
    this.currentTime = newTime;
    if (
      this.startTime === null ||
      this.holdTime !== null ||
      this.playbackSpeed === 0
    ) {
      this.holdTime = newTime;
    } else if (this.driver) {
      this.startTime = this.driver.now() - newTime / this.playbackSpeed;
    }
    this.driver?.start(false);
  }
  get speed() {
    return this.playbackSpeed;
  }
  set speed(newSpeed) {
    this.updateTime(time.now());
    const hasChanged = this.playbackSpeed !== newSpeed;
    this.playbackSpeed = newSpeed;
    if (hasChanged) {
      this.time = millisecondsToSeconds(this.currentTime);
    }
  }
  play() {
    if (this.isStopped) return;
    const { driver = frameloopDriver, startTime } = this.options;
    if (!this.driver) {
      this.driver = driver((timestamp) => this.tick(timestamp));
    }
    this.options.onPlay?.();
    const now = this.driver.now();
    if (this.state === "finished") {
      this.updateFinished();
      this.startTime = now;
    } else if (this.holdTime !== null) {
      this.startTime = now - this.holdTime;
    } else if (!this.startTime) {
      this.startTime = startTime ?? now;
    }
    if (this.state === "finished" && this.speed < 0) {
      this.startTime += this.calculatedDuration;
    }
    this.holdTime = null;
    this.state = "running";
    this.driver.start();
  }
  pause() {
    this.state = "paused";
    this.updateTime(time.now());
    this.holdTime = this.currentTime;
  }
  complete() {
    if (this.state !== "running") {
      this.play();
    }
    this.state = "finished";
    this.holdTime = null;
  }
  finish() {
    this.notifyFinished();
    this.teardown();
    this.state = "finished";
    this.options.onComplete?.();
  }
  cancel() {
    this.holdTime = null;
    this.startTime = 0;
    this.tick(0);
    this.teardown();
    this.options.onCancel?.();
  }
  teardown() {
    this.state = "idle";
    this.stopDriver();
    this.startTime = this.holdTime = null;
  }
  stopDriver() {
    if (!this.driver) return;
    this.driver.stop();
    this.driver = void 0;
  }
  sample(sampleTime) {
    this.startTime = 0;
    return this.tick(sampleTime, true);
  }
  attachTimeline(timeline) {
    if (this.options.allowFlatten) {
      this.options.type = "keyframes";
      this.options.ease = "linear";
      this.initAnimation();
    }
    this.driver?.stop();
    return timeline.observe(this);
  }
}

function fillWildcards(keyframes) {
  for (let i = 1; i < keyframes.length; i++) {
    keyframes[i] ?? (keyframes[i] = keyframes[i - 1]);
  }
}

const radToDeg = (rad) => (rad * 180) / Math.PI;
const rotate = (v) => {
  const angle = radToDeg(Math.atan2(v[1], v[0]));
  return rebaseAngle(angle);
};
const matrix2dParsers = {
  x: 4,
  y: 5,
  translateX: 4,
  translateY: 5,
  scaleX: 0,
  scaleY: 3,
  scale: (v) => (Math.abs(v[0]) + Math.abs(v[3])) / 2,
  rotate,
  rotateZ: rotate,
  skewX: (v) => radToDeg(Math.atan(v[1])),
  skewY: (v) => radToDeg(Math.atan(v[2])),
  skew: (v) => (Math.abs(v[1]) + Math.abs(v[2])) / 2,
};
const rebaseAngle = (angle) => {
  angle = angle % 360;
  if (angle < 0) angle += 360;
  return angle;
};
const rotateZ = rotate;
const scaleX = (v) => Math.sqrt(v[0] * v[0] + v[1] * v[1]);
const scaleY = (v) => Math.sqrt(v[4] * v[4] + v[5] * v[5]);
const matrix3dParsers = {
  x: 12,
  y: 13,
  z: 14,
  translateX: 12,
  translateY: 13,
  translateZ: 14,
  scaleX,
  scaleY,
  scale: (v) => (scaleX(v) + scaleY(v)) / 2,
  rotateX: (v) => rebaseAngle(radToDeg(Math.atan2(v[6], v[5]))),
  rotateY: (v) => rebaseAngle(radToDeg(Math.atan2(-v[2], v[0]))),
  rotateZ,
  rotate: rotateZ,
  skewX: (v) => radToDeg(Math.atan(v[4])),
  skewY: (v) => radToDeg(Math.atan(v[1])),
  skew: (v) => (Math.abs(v[1]) + Math.abs(v[4])) / 2,
};
function defaultTransformValue(name) {
  return name.includes("scale") ? 1 : 0;
}
function parseValueFromTransform(transform, name) {
  if (!transform || transform === "none") {
    return defaultTransformValue(name);
  }
  const matrix3dMatch = transform.match(/^matrix3d\(([-\d.e\s,]+)\)$/u);
  let parsers;
  let match;
  if (matrix3dMatch) {
    parsers = matrix3dParsers;
    match = matrix3dMatch;
  } else {
    const matrix2dMatch = transform.match(/^matrix\(([-\d.e\s,]+)\)$/u);
    parsers = matrix2dParsers;
    match = matrix2dMatch;
  }
  if (!match) {
    return defaultTransformValue(name);
  }
  const valueParser = parsers[name];
  const values = match[1].split(",").map(convertTransformToNumber);
  return typeof valueParser === "function"
    ? valueParser(values)
    : values[valueParser];
}
const readTransformValue = (instance, name) => {
  const { transform = "none" } = getComputedStyle(instance);
  return parseValueFromTransform(transform, name);
};
function convertTransformToNumber(value) {
  return parseFloat(value.trim());
}

/**
 * Generate a list of every possible transform key.
 */
const transformPropOrder = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY",
];
/**
 * A quick lookup for transform props.
 */
const transformProps = /*@__PURE__*/ (() => new Set(transformPropOrder))();

const isNumOrPxType = (v) => v === number || v === px;
const transformKeys = new Set(["x", "y", "z"]);
const nonTranslationalTransformKeys = transformPropOrder.filter(
  (key) => !transformKeys.has(key)
);
function removeNonTranslationalTransform(visualElement) {
  const removedTransforms = [];
  nonTranslationalTransformKeys.forEach((key) => {
    const value = visualElement.getValue(key);
    if (value !== undefined) {
      removedTransforms.push([key, value.get()]);
      value.set(key.startsWith("scale") ? 1 : 0);
    }
  });
  return removedTransforms;
}
const positionalValues = {
  // Dimensions
  width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) =>
    x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
  height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) =>
    y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
  top: (_bbox, { top }) => parseFloat(top),
  left: (_bbox, { left }) => parseFloat(left),
  bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
  right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
  // Transform
  x: (_bbox, { transform }) => parseValueFromTransform(transform, "x"),
  y: (_bbox, { transform }) => parseValueFromTransform(transform, "y"),
};
// Alias translate longform names
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;

const toResolve = new Set();
let isScheduled = false;
let anyNeedsMeasurement = false;
let isForced = false;
function measureAllKeyframes() {
  if (anyNeedsMeasurement) {
    const resolversToMeasure = Array.from(toResolve).filter(
      (resolver) => resolver.needsMeasurement
    );
    const elementsToMeasure = new Set(
      resolversToMeasure.map((resolver) => resolver.element)
    );
    const transformsToRestore = new Map();
    /**
     * Write pass
     * If we're measuring elements we want to remove bounding box-changing transforms.
     */
    elementsToMeasure.forEach((element) => {
      const removedTransforms = removeNonTranslationalTransform(element);
      if (!removedTransforms.length) return;
      transformsToRestore.set(element, removedTransforms);
      element.render();
    });
    // Read
    resolversToMeasure.forEach((resolver) => resolver.measureInitialState());
    // Write
    elementsToMeasure.forEach((element) => {
      element.render();
      const restore = transformsToRestore.get(element);
      if (restore) {
        restore.forEach(([key, value]) => {
          element.getValue(key)?.set(value);
        });
      }
    });
    // Read
    resolversToMeasure.forEach((resolver) => resolver.measureEndState());
    // Write
    resolversToMeasure.forEach((resolver) => {
      if (resolver.suspendedScrollY !== undefined) {
        window.scrollTo(0, resolver.suspendedScrollY);
      }
    });
  }
  anyNeedsMeasurement = false;
  isScheduled = false;
  toResolve.forEach((resolver) => resolver.complete(isForced));
  toResolve.clear();
}
function readAllKeyframes() {
  toResolve.forEach((resolver) => {
    resolver.readKeyframes();
    if (resolver.needsMeasurement) {
      anyNeedsMeasurement = true;
    }
  });
}
function flushKeyframeResolvers() {
  isForced = true;
  readAllKeyframes();
  measureAllKeyframes();
  isForced = false;
}
class KeyframeResolver {
  constructor(
    unresolvedKeyframes,
    onComplete,
    name,
    motionValue,
    element,
    isAsync = false
  ) {
    this.state = "pending";
    /**
     * Track whether this resolver is async. If it is, it'll be added to the
     * resolver queue and flushed in the next frame. Resolvers that aren't going
     * to trigger read/write thrashing don't need to be async.
     */
    this.isAsync = false;
    /**
     * Track whether this resolver needs to perform a measurement
     * to resolve its keyframes.
     */
    this.needsMeasurement = false;
    this.unresolvedKeyframes = [...unresolvedKeyframes];
    this.onComplete = onComplete;
    this.name = name;
    this.motionValue = motionValue;
    this.element = element;
    this.isAsync = isAsync;
  }
  scheduleResolve() {
    this.state = "scheduled";
    if (this.isAsync) {
      toResolve.add(this);
      if (!isScheduled) {
        isScheduled = true;
        frame.read(readAllKeyframes);
        frame.resolveKeyframes(measureAllKeyframes);
      }
    } else {
      this.readKeyframes();
      this.complete();
    }
  }
  readKeyframes() {
    const { unresolvedKeyframes, name, element, motionValue } = this;
    // If initial keyframe is null we need to read it from the DOM
    if (unresolvedKeyframes[0] === null) {
      const currentValue = motionValue?.get();
      // TODO: This doesn't work if the final keyframe is a wildcard
      const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
      if (currentValue !== undefined) {
        unresolvedKeyframes[0] = currentValue;
      } else if (element && name) {
        const valueAsRead = element.readValue(name, finalKeyframe);
        if (valueAsRead !== undefined && valueAsRead !== null) {
          unresolvedKeyframes[0] = valueAsRead;
        }
      }
      if (unresolvedKeyframes[0] === undefined) {
        unresolvedKeyframes[0] = finalKeyframe;
      }
      if (motionValue && currentValue === undefined) {
        motionValue.set(unresolvedKeyframes[0]);
      }
    }
    fillWildcards(unresolvedKeyframes);
  }
  setFinalKeyframe() {}
  measureInitialState() {}
  renderEndStyles() {}
  measureEndState() {}
  complete(isForcedComplete = false) {
    this.state = "complete";
    this.onComplete(
      this.unresolvedKeyframes,
      this.finalKeyframe,
      isForcedComplete
    );
    toResolve.delete(this);
  }
  cancel() {
    if (this.state === "scheduled") {
      toResolve.delete(this);
      this.state = "pending";
    }
  }
  resume() {
    if (this.state === "pending") this.scheduleResolve();
  }
}

const isCSSVar = (name) => name.startsWith("--");

function setStyle(element, name, value) {
  isCSSVar(name)
    ? element.style.setProperty(name, value)
    : (element.style[name] = value);
}

const supportsScrollTimeline = /* @__PURE__ */ memo(
  () => window.ScrollTimeline !== undefined
);

/**
 * Add the ability for test suites to manually set support flags
 * to better test more environments.
 */
const supportsFlags = {};

function memoSupports(callback, supportsFlag) {
  const memoized = memo(callback);
  return () => supportsFlags[supportsFlag] ?? memoized();
}

const supportsLinearEasing = /*@__PURE__*/ memoSupports(() => {
  try {
    document
      .createElement("div")
      .animate({ opacity: 0 }, { easing: "linear(0, 1)" });
  } catch (e) {
    return false;
  }
  return true;
}, "linearEasing");

const cubicBezierAsString = ([a, b, c, d]) =>
  `cubic-bezier(${a}, ${b}, ${c}, ${d})`;

const supportedWaapiEasing = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: /*@__PURE__*/ cubicBezierAsString([0, 0.65, 0.55, 1]),
  circOut: /*@__PURE__*/ cubicBezierAsString([0.55, 0, 1, 0.45]),
  backIn: /*@__PURE__*/ cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
  backOut: /*@__PURE__*/ cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),
};

function mapEasingToNativeEasing(easing, duration) {
  if (!easing) {
    return undefined;
  } else if (typeof easing === "function") {
    return supportsLinearEasing()
      ? generateLinearEasing(easing, duration)
      : "ease-out";
  } else if (isBezierDefinition(easing)) {
    return cubicBezierAsString(easing);
  } else if (Array.isArray(easing)) {
    return easing.map(
      (segmentEasing) =>
        mapEasingToNativeEasing(segmentEasing, duration) ||
        supportedWaapiEasing.easeOut
    );
  } else {
    return supportedWaapiEasing[easing];
  }
}

function startWaapiAnimation(
  element,
  valueName,
  keyframes,
  {
    delay = 0,
    duration = 300,
    repeat = 0,
    repeatType = "loop",
    ease = "easeOut",
    times,
  } = {},
  pseudoElement = undefined
) {
  const keyframeOptions = {
    [valueName]: keyframes,
  };
  if (times) keyframeOptions.offset = times;
  const easing = mapEasingToNativeEasing(ease, duration);
  /**
   * If this is an easing array, apply to keyframes, not animation as a whole
   */
  if (Array.isArray(easing)) keyframeOptions.easing = easing;
  const options = {
    delay,
    duration,
    easing: !Array.isArray(easing) ? easing : "linear",
    fill: "both",
    iterations: repeat + 1,
    direction: repeatType === "reverse" ? "alternate" : "normal",
  };
  if (pseudoElement) options.pseudoElement = pseudoElement;
  const animation = element.animate(keyframeOptions, options);
  return animation;
}

function isGenerator(type) {
  return typeof type === "function" && "applyToOptions" in type;
}

function applyGeneratorOptions({ type, ...options }) {
  if (isGenerator(type) && supportsLinearEasing()) {
    return type.applyToOptions(options);
  } else {
    options.duration ?? (options.duration = 300);
    options.ease ?? (options.ease = "easeOut");
  }
  return options;
}

/**
 * NativeAnimation implements AnimationPlaybackControls for the browser's Web Animations API.
 */
class NativeAnimation extends WithPromise {
  constructor(options) {
    super();
    this.finishedTime = null;
    this.isStopped = false;
    if (!options) return;
    const {
      element,
      name,
      keyframes,
      pseudoElement,
      allowFlatten = false,
      finalKeyframe,
      onComplete,
    } = options;
    this.isPseudoElement = Boolean(pseudoElement);
    this.allowFlatten = allowFlatten;
    this.options = options;
    invariant(typeof options.type !== "string");
    const transition = applyGeneratorOptions(options);
    this.animation = startWaapiAnimation(
      element,
      name,
      keyframes,
      transition,
      pseudoElement
    );
    if (transition.autoplay === false) {
      this.animation.pause();
    }
    this.animation.onfinish = () => {
      this.finishedTime = this.time;
      if (!pseudoElement) {
        const keyframe = getFinalKeyframe$1(
          keyframes,
          this.options,
          finalKeyframe,
          this.speed
        );
        if (this.updateMotionValue) {
          this.updateMotionValue(keyframe);
        } else {
          /**
           * If we can, we want to commit the final style as set by the user,
           * rather than the computed keyframe value supplied by the animation.
           */
          setStyle(element, name, keyframe);
        }
        this.animation.cancel();
      }
      onComplete?.();
      this.notifyFinished();
    };
  }
  play() {
    if (this.isStopped) return;
    this.animation.play();
    if (this.state === "finished") {
      this.updateFinished();
    }
  }
  pause() {
    this.animation.pause();
  }
  complete() {
    this.animation.finish?.();
  }
  cancel() {
    try {
      this.animation.cancel();
    } catch (e) {}
  }
  stop() {
    if (this.isStopped) return;
    this.isStopped = true;
    const { state } = this;
    if (state === "idle" || state === "finished") {
      return;
    }
    if (this.updateMotionValue) {
      this.updateMotionValue();
    } else {
      this.commitStyles();
    }
    if (!this.isPseudoElement) this.cancel();
  }
  /**
   * WAAPI doesn't natively have any interruption capabilities.
   *
   * In this method, we commit styles back to the DOM before cancelling
   * the animation.
   *
   * This is designed to be overridden by NativeAnimationExtended, which
   * will create a renderless JS animation and sample it twice to calculate
   * its current value, "previous" value, and therefore allow
   * Motion to also correctly calculate velocity for any subsequent animation
   * while deferring the commit until the next animation frame.
   */
  commitStyles() {
    if (!this.isPseudoElement) {
      this.animation.commitStyles?.();
    }
  }
  get duration() {
    const duration = this.animation.effect?.getComputedTiming?.().duration || 0;
    return millisecondsToSeconds(Number(duration));
  }
  get time() {
    return millisecondsToSeconds(Number(this.animation.currentTime) || 0);
  }
  set time(newTime) {
    this.finishedTime = null;
    this.animation.currentTime = secondsToMilliseconds(newTime);
  }
  /**
   * The playback speed of the animation.
   * 1 = normal speed, 2 = double speed, 0.5 = half speed.
   */
  get speed() {
    return this.animation.playbackRate;
  }
  set speed(newSpeed) {
    // Allow backwards playback after finishing
    if (newSpeed < 0) this.finishedTime = null;
    this.animation.playbackRate = newSpeed;
  }
  get state() {
    return this.finishedTime !== null ? "finished" : this.animation.playState;
  }
  get startTime() {
    return Number(this.animation.startTime);
  }
  set startTime(newStartTime) {
    this.animation.startTime = newStartTime;
  }
  /**
   * Attaches a timeline to the animation, for instance the `ScrollTimeline`.
   */
  attachTimeline({ timeline, observe }) {
    if (this.allowFlatten) {
      this.animation.effect?.updateTiming({ easing: "linear" });
    }
    this.animation.onfinish = null;
    if (timeline && supportsScrollTimeline()) {
      this.animation.timeline = timeline;
      return noop$1;
    } else {
      return observe(this);
    }
  }
}

const unsupportedEasingFunctions = {
  anticipate,
  backInOut,
  circInOut,
};
function isUnsupportedEase(key) {
  return key in unsupportedEasingFunctions;
}
function replaceStringEasing(transition) {
  if (
    typeof transition.ease === "string" &&
    isUnsupportedEase(transition.ease)
  ) {
    transition.ease = unsupportedEasingFunctions[transition.ease];
  }
}

/**
 * 10ms is chosen here as it strikes a balance between smooth
 * results (more than one keyframe per frame at 60fps) and
 * keyframe quantity.
 */
const sampleDelta = 10; //ms
class NativeAnimationExtended extends NativeAnimation {
  constructor(options) {
    /**
     * The base NativeAnimation function only supports a subset
     * of Motion easings, and WAAPI also only supports some
     * easing functions via string/cubic-bezier definitions.
     *
     * This function replaces those unsupported easing functions
     * with a JS easing function. This will later get compiled
     * to a linear() easing function.
     */
    replaceStringEasing(options);
    /**
     * Ensure we replace the transition type with a generator function
     * before passing to WAAPI.
     *
     * TODO: Does this have a better home? It could be shared with
     * JSAnimation.
     */
    replaceTransitionType(options);
    super(options);
    if (options.startTime) {
      this.startTime = options.startTime;
    }
    this.options = options;
  }
  /**
   * WAAPI doesn't natively have any interruption capabilities.
   *
   * Rather than read commited styles back out of the DOM, we can
   * create a renderless JS animation and sample it twice to calculate
   * its current value, "previous" value, and therefore allow
   * Motion to calculate velocity for any subsequent animation.
   */
  updateMotionValue(value) {
    const { motionValue, onUpdate, onComplete, element, ...options } =
      this.options;
    if (!motionValue) return;
    if (value !== undefined) {
      motionValue.set(value);
      return;
    }
    const sampleAnimation = new JSAnimation({
      ...options,
      autoplay: false,
    });
    const sampleTime = secondsToMilliseconds(this.finishedTime ?? this.time);
    motionValue.setWithVelocity(
      sampleAnimation.sample(sampleTime - sampleDelta).value,
      sampleAnimation.sample(sampleTime).value,
      sampleDelta
    );
    sampleAnimation.stop();
  }
}

/**
 * Check if a value is animatable. Examples:
 *
 * ✅: 100, "100px", "#fff"
 * ❌: "block", "url(2.jpg)"
 * @param value
 *
 * @internal
 */
const isAnimatable = (value, name) => {
  // If the list of keys that might be non-animatable grows, replace with Set
  if (name === "zIndex") return false;
  // If it's a number or a keyframes array, we can animate it. We might at some point
  // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,
  // but for now lets leave it like this for performance reasons
  if (typeof value === "number" || Array.isArray(value)) return true;
  if (
    typeof value === "string" && // It's animatable if we have a string
    (complex.test(value) || value === "0") && // And it contains numbers and/or colors
    !value.startsWith("url(") // Unless it starts with "url("
  ) {
    return true;
  }
  return false;
};

function hasKeyframesChanged(keyframes) {
  const current = keyframes[0];
  if (keyframes.length === 1) return true;
  for (let i = 0; i < keyframes.length; i++) {
    if (keyframes[i] !== current) return true;
  }
}
function canAnimate(keyframes, name, type, velocity) {
  /**
   * Check if we're able to animate between the start and end keyframes,
   * and throw a warning if we're attempting to animate between one that's
   * animatable and another that isn't.
   */
  const originKeyframe = keyframes[0];
  if (originKeyframe === null) return false;
  /**
   * These aren't traditionally animatable but we do support them.
   * In future we could look into making this more generic or replacing
   * this function with mix() === mixImmediate
   */
  if (name === "display" || name === "visibility") return true;
  const targetKeyframe = keyframes[keyframes.length - 1];
  const isOriginAnimatable = isAnimatable(originKeyframe, name);
  const isTargetAnimatable = isAnimatable(targetKeyframe, name);
  // Always skip if any of these are true
  if (!isOriginAnimatable || !isTargetAnimatable) {
    return false;
  }
  return (
    hasKeyframesChanged(keyframes) ||
    ((type === "spring" || isGenerator(type)) && velocity)
  );
}

function makeAnimationInstant(options) {
  options.duration = 0;
  options.type === "keyframes";
}

/**
 * A list of values that can be hardware-accelerated.
 */
const acceleratedValues = new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform",
  // TODO: Could be re-enabled now we have support for linear() easing
  // "background-color"
]);
const supportsWaapi = /*@__PURE__*/ memo(() =>
  Object.hasOwnProperty.call(Element.prototype, "animate")
);
function supportsBrowserAnimation(options) {
  const { motionValue, name, repeatDelay, repeatType, damping, type } = options;
  const subject = motionValue?.owner?.current;
  /**
   * We use this check instead of isHTMLElement() because we explicitly
   * **don't** want elements in different timing contexts (i.e. popups)
   * to be accelerated, as it's not possible to sync these animations
   * properly with those driven from the main window frameloop.
   */
  if (!(subject instanceof HTMLElement)) {
    return false;
  }
  const { onUpdate, transformTemplate } = motionValue.owner.getProps();
  return (
    supportsWaapi() &&
    name &&
    acceleratedValues.has(name) &&
    (name !== "transform" || !transformTemplate) &&
    /**
     * If we're outputting values to onUpdate then we can't use WAAPI as there's
     * no way to read the value from WAAPI every frame.
     */
    !onUpdate &&
    !repeatDelay &&
    repeatType !== "mirror" &&
    damping !== 0 &&
    type !== "inertia"
  );
}

/**
 * Maximum time allowed between an animation being created and it being
 * resolved for us to use the latter as the start time.
 *
 * This is to ensure that while we prefer to "start" an animation as soon
 * as it's triggered, we also want to avoid a visual jump if there's a big delay
 * between these two moments.
 */
const MAX_RESOLVE_DELAY = 40;
class AsyncMotionValueAnimation extends WithPromise {
  constructor({
    autoplay = true,
    delay = 0,
    type = "keyframes",
    repeat = 0,
    repeatDelay = 0,
    repeatType = "loop",
    keyframes,
    name,
    motionValue,
    element,
    ...options
  }) {
    super();
    /**
     * Bound to support return animation.stop pattern
     */
    this.stop = () => {
      if (this._animation) {
        this._animation.stop();
        this.stopTimeline?.();
      }
      this.keyframeResolver?.cancel();
    };
    this.createdAt = time.now();
    const optionsWithDefaults = {
      autoplay,
      delay,
      type,
      repeat,
      repeatDelay,
      repeatType,
      name,
      motionValue,
      element,
      ...options,
    };
    const KeyframeResolver$1 = element?.KeyframeResolver || KeyframeResolver;
    this.keyframeResolver = new KeyframeResolver$1(
      keyframes,
      (resolvedKeyframes, finalKeyframe, forced) =>
        this.onKeyframesResolved(
          resolvedKeyframes,
          finalKeyframe,
          optionsWithDefaults,
          !forced
        ),
      name,
      motionValue,
      element
    );
    this.keyframeResolver?.scheduleResolve();
  }
  onKeyframesResolved(keyframes, finalKeyframe, options, sync) {
    this.keyframeResolver = undefined;
    const { name, type, velocity, delay, isHandoff, onUpdate } = options;
    this.resolvedAt = time.now();
    /**
     * If we can't animate this value with the resolved keyframes
     * then we should complete it immediately.
     */
    if (!canAnimate(keyframes, name, type, velocity)) {
      if (MotionGlobalConfig.instantAnimations || !delay) {
        onUpdate?.(getFinalKeyframe$1(keyframes, options, finalKeyframe));
      }
      keyframes[0] = keyframes[keyframes.length - 1];
      makeAnimationInstant(options);
      options.repeat = 0;
    }
    /**
     * Resolve startTime for the animation.
     *
     * This method uses the createdAt and resolvedAt to calculate the
     * animation startTime. *Ideally*, we would use the createdAt time as t=0
     * as the following frame would then be the first frame of the animation in
     * progress, which would feel snappier.
     *
     * However, if there's a delay (main thread work) between the creation of
     * the animation and the first commited frame, we prefer to use resolvedAt
     * to avoid a sudden jump into the animation.
     */
    const startTime = sync
      ? !this.resolvedAt
        ? this.createdAt
        : this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY
        ? this.resolvedAt
        : this.createdAt
      : undefined;
    const resolvedOptions = {
      startTime,
      finalKeyframe,
      ...options,
      keyframes,
    };
    /**
     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via
     * WAAPI. Therefore, this animation must be JS to ensure it runs "under" the
     * optimised animation.
     */
    const animation =
      !isHandoff && supportsBrowserAnimation(resolvedOptions)
        ? new NativeAnimationExtended({
            ...resolvedOptions,
            element: resolvedOptions.motionValue.owner.current,
          })
        : new JSAnimation(resolvedOptions);
    animation.finished.then(() => this.notifyFinished()).catch(noop$1);
    if (this.pendingTimeline) {
      this.stopTimeline = animation.attachTimeline(this.pendingTimeline);
      this.pendingTimeline = undefined;
    }
    this._animation = animation;
  }
  get finished() {
    if (!this._animation) {
      return this._finished;
    } else {
      return this.animation.finished;
    }
  }
  then(onResolve, _onReject) {
    return this.finished.finally(onResolve).then(() => {});
  }
  get animation() {
    if (!this._animation) {
      this.keyframeResolver?.resume();
      flushKeyframeResolvers();
    }
    return this._animation;
  }
  get duration() {
    return this.animation.duration;
  }
  get time() {
    return this.animation.time;
  }
  set time(newTime) {
    this.animation.time = newTime;
  }
  get speed() {
    return this.animation.speed;
  }
  get state() {
    return this.animation.state;
  }
  set speed(newSpeed) {
    this.animation.speed = newSpeed;
  }
  get startTime() {
    return this.animation.startTime;
  }
  attachTimeline(timeline) {
    if (this._animation) {
      this.stopTimeline = this.animation.attachTimeline(timeline);
    } else {
      this.pendingTimeline = timeline;
    }
    return () => this.stop();
  }
  play() {
    this.animation.play();
  }
  pause() {
    this.animation.pause();
  }
  complete() {
    this.animation.complete();
  }
  cancel() {
    if (this._animation) {
      this.animation.cancel();
    }
    this.keyframeResolver?.cancel();
  }
}

/**
 * Parse Framer's special CSS variable format into a CSS token and a fallback.
 *
 * ```
 * `var(--foo, #fff)` => [`--foo`, '#fff']
 * ```
 *
 * @param current
 */
const splitCSSVariableRegex =
  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words
  /^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u;
function parseCSSVariable(current) {
  const match = splitCSSVariableRegex.exec(current);
  if (!match) return [,];
  const [, token1, token2, fallback] = match;
  return [`--${token1 ?? token2}`, fallback];
}
function getVariableValue(current, element, depth = 1) {
  const [token, fallback] = parseCSSVariable(current);
  // No CSS variable detected
  if (!token) return;
  // Attempt to read this CSS variable off the element
  const resolved = window.getComputedStyle(element).getPropertyValue(token);
  if (resolved) {
    const trimmed = resolved.trim();
    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
  }
  return isCSSVariableToken(fallback)
    ? getVariableValue(fallback, element, depth + 1)
    : fallback;
}

function getValueTransition(transition, key) {
  return transition?.[key] ?? transition?.["default"] ?? transition;
}

const positionalKeys = new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  ...transformPropOrder,
]);

/**
 * ValueType for "auto"
 */
const auto = {
  test: (v) => v === "auto",
  parse: (v) => v,
};

/**
 * Tests a provided value against a ValueType
 */
const testValueType = (v) => (type) => type.test(v);

/**
 * A list of value types commonly used for dimensions
 */
const dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
/**
 * Tests a dimensional value against the list of dimension ValueTypes
 */
const findDimensionValueType = (v) =>
  dimensionValueTypes.find(testValueType(v));

function isNone(value) {
  if (typeof value === "number") {
    return value === 0;
  } else if (value !== null) {
    return value === "none" || value === "0" || isZeroValueString(value);
  } else {
    return true;
  }
}

/**
 * Properties that should default to 1 or 100%
 */
const maxDefaults = new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v) {
  const [name, value] = v.slice(0, -1).split("(");
  if (name === "drop-shadow") return v;
  const [number] = value.match(floatRegex) || [];
  if (!number) return v;
  const unit = value.replace(number, "");
  let defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number !== value) defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
const functionRegex = /\b([a-z-]*)\(.*?\)/gu;
const filter = {
  ...complex,
  getAnimatableNone: (v) => {
    const functions = v.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v;
  },
};

const int = {
  ...number,
  transform: Math.round,
};

const transformValueTypes = {
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px,
  translateX: px,
  translateY: px,
  translateZ: px,
  x: px,
  y: px,
  z: px,
  perspective: px,
  transformPerspective: px,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px,
};

const numberValueTypes = {
  // Border props
  borderWidth: px,
  borderTopWidth: px,
  borderRightWidth: px,
  borderBottomWidth: px,
  borderLeftWidth: px,
  borderRadius: px,
  radius: px,
  borderTopLeftRadius: px,
  borderTopRightRadius: px,
  borderBottomRightRadius: px,
  borderBottomLeftRadius: px,
  // Positioning props
  width: px,
  maxWidth: px,
  height: px,
  maxHeight: px,
  top: px,
  right: px,
  bottom: px,
  left: px,
  // Spacing props
  padding: px,
  paddingTop: px,
  paddingRight: px,
  paddingBottom: px,
  paddingLeft: px,
  margin: px,
  marginTop: px,
  marginRight: px,
  marginBottom: px,
  marginLeft: px,
  // Misc
  backgroundPositionX: px,
  backgroundPositionY: px,
  ...transformValueTypes,
  zIndex: int,
  // SVG
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int,
};

/**
 * A map of default value types for common values
 */
const defaultValueTypes = {
  ...numberValueTypes,
  // Color props
  color,
  backgroundColor: color,
  outlineColor: color,
  fill: color,
  stroke: color,
  // Border props
  borderColor: color,
  borderTopColor: color,
  borderRightColor: color,
  borderBottomColor: color,
  borderLeftColor: color,
  filter,
  WebkitFilter: filter,
};
/**
 * Gets the default ValueType for the provided value key
 */
const getDefaultValueType = (key) => defaultValueTypes[key];

function getAnimatableNone(key, value) {
  let defaultValueType = getDefaultValueType(key);
  if (defaultValueType !== filter) defaultValueType = complex;
  // If value is not recognised as animatable, ie "none", create an animatable version origin based on the target
  return defaultValueType.getAnimatableNone
    ? defaultValueType.getAnimatableNone(value)
    : undefined;
}

/**
 * If we encounter keyframes like "none" or "0" and we also have keyframes like
 * "#fff" or "200px 200px" we want to find a keyframe to serve as a template for
 * the "none" keyframes. In this case "#fff" or "200px 200px" - then these get turned into
 * zero equivalents, i.e. "#fff0" or "0px 0px".
 */
const invalidTemplates = new Set(["auto", "none", "0"]);
function makeNoneKeyframesAnimatable(
  unresolvedKeyframes,
  noneKeyframeIndexes,
  name
) {
  let i = 0;
  let animatableTemplate = undefined;
  while (i < unresolvedKeyframes.length && !animatableTemplate) {
    const keyframe = unresolvedKeyframes[i];
    if (
      typeof keyframe === "string" &&
      !invalidTemplates.has(keyframe) &&
      analyseComplexValue(keyframe).values.length
    ) {
      animatableTemplate = unresolvedKeyframes[i];
    }
    i++;
  }
  if (animatableTemplate && name) {
    for (const noneIndex of noneKeyframeIndexes) {
      unresolvedKeyframes[noneIndex] = getAnimatableNone(
        name,
        animatableTemplate
      );
    }
  }
}

class DOMKeyframesResolver extends KeyframeResolver {
  constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {
    super(unresolvedKeyframes, onComplete, name, motionValue, element, true);
  }
  readKeyframes() {
    const { unresolvedKeyframes, element, name } = this;
    if (!element || !element.current) return;
    super.readKeyframes();
    /**
     * If any keyframe is a CSS variable, we need to find its value by sampling the element
     */
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      let keyframe = unresolvedKeyframes[i];
      if (typeof keyframe === "string") {
        keyframe = keyframe.trim();
        if (isCSSVariableToken(keyframe)) {
          const resolved = getVariableValue(keyframe, element.current);
          if (resolved !== undefined) {
            unresolvedKeyframes[i] = resolved;
          }
          if (i === unresolvedKeyframes.length - 1) {
            this.finalKeyframe = keyframe;
          }
        }
      }
    }
    /**
     * Resolve "none" values. We do this potentially twice - once before and once after measuring keyframes.
     * This could be seen as inefficient but it's a trade-off to avoid measurements in more situations, which
     * have a far bigger performance impact.
     */
    this.resolveNoneKeyframes();
    /**
     * Check to see if unit type has changed. If so schedule jobs that will
     * temporarily set styles to the destination keyframes.
     * Skip if we have more than two keyframes or this isn't a positional value.
     * TODO: We can throw if there are multiple keyframes and the value type changes.
     */
    if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {
      return;
    }
    const [origin, target] = unresolvedKeyframes;
    const originType = findDimensionValueType(origin);
    const targetType = findDimensionValueType(target);
    /**
     * Either we don't recognise these value types or we can animate between them.
     */
    if (originType === targetType) return;
    /**
     * If both values are numbers or pixels, we can animate between them by
     * converting them to numbers.
     */
    if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {
      for (let i = 0; i < unresolvedKeyframes.length; i++) {
        const value = unresolvedKeyframes[i];
        if (typeof value === "string") {
          unresolvedKeyframes[i] = parseFloat(value);
        }
      }
    } else if (positionalValues[name]) {
      /**
       * Else, the only way to resolve this is by measuring the element.
       */
      this.needsMeasurement = true;
    }
  }
  resolveNoneKeyframes() {
    const { unresolvedKeyframes, name } = this;
    const noneKeyframeIndexes = [];
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      if (unresolvedKeyframes[i] === null || isNone(unresolvedKeyframes[i])) {
        noneKeyframeIndexes.push(i);
      }
    }
    if (noneKeyframeIndexes.length) {
      makeNoneKeyframesAnimatable(
        unresolvedKeyframes,
        noneKeyframeIndexes,
        name
      );
    }
  }
  measureInitialState() {
    const { element, unresolvedKeyframes, name } = this;
    if (!element || !element.current) return;
    if (name === "height") {
      this.suspendedScrollY = window.pageYOffset;
    }
    this.measuredOrigin = positionalValues[name](
      element.measureViewportBox(),
      window.getComputedStyle(element.current)
    );
    unresolvedKeyframes[0] = this.measuredOrigin;
    // Set final key frame to measure after next render
    const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
    if (measureKeyframe !== undefined) {
      element.getValue(name, measureKeyframe).jump(measureKeyframe, false);
    }
  }
  measureEndState() {
    const { element, name, unresolvedKeyframes } = this;
    if (!element || !element.current) return;
    const value = element.getValue(name);
    value && value.jump(this.measuredOrigin, false);
    const finalKeyframeIndex = unresolvedKeyframes.length - 1;
    const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];
    unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](
      element.measureViewportBox(),
      window.getComputedStyle(element.current)
    );
    if (finalKeyframe !== null && this.finalKeyframe === undefined) {
      this.finalKeyframe = finalKeyframe;
    }
    // If we removed transform values, reapply them before the next render
    if (this.removedTransforms?.length) {
      this.removedTransforms.forEach(
        ([unsetTransformName, unsetTransformValue]) => {
          element.getValue(unsetTransformName).set(unsetTransformValue);
        }
      );
    }
    this.resolveNoneKeyframes();
  }
}

function resolveElements(elementOrSelector, scope, selectorCache) {
  if (elementOrSelector instanceof EventTarget) {
    return [elementOrSelector];
  } else if (typeof elementOrSelector === "string") {
    let root = document;
    const elements =
      selectorCache?.[elementOrSelector] ??
      root.querySelectorAll(elementOrSelector);
    return elements ? Array.from(elements) : [];
  }
  return Array.from(elementOrSelector);
}

/**
 * Provided a value and a ValueType, returns the value as that value type.
 */
const getValueAsType = (value, type) => {
  return type && typeof value === "number" ? type.transform(value) : value;
};

/**
 * Checks if an element is an HTML element in a way
 * that works across iframes
 */
function isHTMLElement$1(element) {
  return isObject(element) && "offsetHeight" in element;
}

const MAX_VELOCITY_DELTA = 30;
const isFloat = (value) => {
  return !isNaN(parseFloat(value));
};
class MotionValue {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   */
  constructor(init, options = {}) {
    this.canTrackVelocity = null;
    this.events = {};
    this.updateAndNotify = (v) => {
      const currentTime = time.now();
      if (this.updatedAt !== currentTime) {
        this.setPrevFrameValue();
      }
      this.prev = this.current;
      this.setCurrent(v);
      if (this.current !== this.prev) {
        this.events.change?.notify(this.current);
        if (this.dependents) {
          for (const dependent of this.dependents) {
            dependent.dirty();
          }
        }
      }
    };
    this.hasAnimated = false;
    this.setCurrent(init);
    this.owner = options.owner;
  }
  setCurrent(current) {
    this.current = current;
    this.updatedAt = time.now();
    if (this.canTrackVelocity === null && current !== void 0) {
      this.canTrackVelocity = isFloat(this.current);
    }
  }
  setPrevFrameValue(prevFrameValue = this.current) {
    this.prevFrameValue = prevFrameValue;
    this.prevUpdatedAt = this.updatedAt;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(subscription) {
    return this.on("change", subscription);
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    const unsubscribe = this.events[eventName].add(callback);
    if (eventName === "change") {
      return () => {
        unsubscribe();
        frame.read(() => {
          if (!this.events.change.getSize()) {
            this.stop();
          }
        });
      };
    }
    return unsubscribe;
  }
  clearListeners() {
    for (const eventManagers in this.events) {
      this.events[eventManagers].clear();
    }
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   */
  attach(passiveEffect, stopPassiveEffect) {
    this.passiveEffect = passiveEffect;
    this.stopPassiveEffect = stopPassiveEffect;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(v) {
    if (!this.passiveEffect) {
      this.updateAndNotify(v);
    } else {
      this.passiveEffect(v, this.updateAndNotify);
    }
  }
  setWithVelocity(prev, current, delta) {
    this.set(current);
    this.prev = void 0;
    this.prevFrameValue = prev;
    this.prevUpdatedAt = this.updatedAt - delta;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(v, endAnimation = true) {
    this.updateAndNotify(v);
    this.prev = v;
    this.prevUpdatedAt = this.prevFrameValue = void 0;
    endAnimation && this.stop();
    if (this.stopPassiveEffect) this.stopPassiveEffect();
  }
  dirty() {
    this.events.change?.notify(this.current);
  }
  addDependent(dependent) {
    if (!this.dependents) {
      this.dependents = /* @__PURE__ */ new Set();
    }
    this.dependents.add(dependent);
  }
  removeDependent(dependent) {
    if (this.dependents) {
      this.dependents.delete(dependent);
    }
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    const currentTime = time.now();
    if (
      !this.canTrackVelocity ||
      this.prevFrameValue === void 0 ||
      currentTime - this.updatedAt > MAX_VELOCITY_DELTA
    ) {
      return 0;
    }
    const delta = Math.min(
      this.updatedAt - this.prevUpdatedAt,
      MAX_VELOCITY_DELTA
    );
    return velocityPerSecond(
      parseFloat(this.current) - parseFloat(this.prevFrameValue),
      delta
    );
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   */
  start(startAnimation) {
    this.stop();
    return new Promise((resolve) => {
      this.hasAnimated = true;
      this.animation = startAnimation(resolve);
      if (this.events.animationStart) {
        this.events.animationStart.notify();
      }
    }).then(() => {
      if (this.events.animationComplete) {
        this.events.animationComplete.notify();
      }
      this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    if (this.animation) {
      this.animation.stop();
      if (this.events.animationCancel) {
        this.events.animationCancel.notify();
      }
    }
    this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.dependents?.clear();
    this.events.destroy?.notify();
    this.clearListeners();
    this.stop();
    if (this.stopPassiveEffect) {
      this.stopPassiveEffect();
    }
  }
}
function motionValue(init, options) {
  return new MotionValue(init, options);
}

const { schedule: microtask } = /* @__PURE__ */ createRenderBatcher(
  queueMicrotask,
  false
);

const isDragging = {
  x: false,
  y: false,
};
function isDragActive() {
  return isDragging.x || isDragging.y;
}

function setDragLock(axis) {
  if (axis === "x" || axis === "y") {
    if (isDragging[axis]) {
      return null;
    } else {
      isDragging[axis] = true;
      return () => {
        isDragging[axis] = false;
      };
    }
  } else {
    if (isDragging.x || isDragging.y) {
      return null;
    } else {
      isDragging.x = isDragging.y = true;
      return () => {
        isDragging.x = isDragging.y = false;
      };
    }
  }
}

function setupGesture(elementOrSelector, options) {
  const elements = resolveElements(elementOrSelector);
  const gestureAbortController = new AbortController();
  const eventOptions = {
    passive: true,
    ...options,
    signal: gestureAbortController.signal,
  };
  const cancel = () => gestureAbortController.abort();
  return [elements, eventOptions, cancel];
}

function isValidHover(event) {
  return !(event.pointerType === "touch" || isDragActive());
}
/**
 * Create a hover gesture. hover() is different to .addEventListener("pointerenter")
 * in that it has an easier syntax, filters out polyfilled touch events, interoperates
 * with drag gestures, and automatically removes the "pointerennd" event listener when the hover ends.
 *
 * @public
 */
function hover(elementOrSelector, onHoverStart, options = {}) {
  const [elements, eventOptions, cancel] = setupGesture(
    elementOrSelector,
    options
  );
  const onPointerEnter = (enterEvent) => {
    if (!isValidHover(enterEvent)) return;
    const { target } = enterEvent;
    const onHoverEnd = onHoverStart(target, enterEvent);
    if (typeof onHoverEnd !== "function" || !target) return;
    const onPointerLeave = (leaveEvent) => {
      if (!isValidHover(leaveEvent)) return;
      onHoverEnd(leaveEvent);
      target.removeEventListener("pointerleave", onPointerLeave);
    };
    target.addEventListener("pointerleave", onPointerLeave, eventOptions);
  };
  elements.forEach((element) => {
    element.addEventListener("pointerenter", onPointerEnter, eventOptions);
  });
  return cancel;
}

/**
 * Recursively traverse up the tree to check whether the provided child node
 * is the parent or a descendant of it.
 *
 * @param parent - Element to find
 * @param child - Element to test against parent
 */
const isNodeOrChild = (parent, child) => {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};

const isPrimaryPointer = (event) => {
  if (event.pointerType === "mouse") {
    return typeof event.button !== "number" || event.button <= 0;
  } else {
    /**
     * isPrimary is true for all mice buttons, whereas every touch point
     * is regarded as its own input. So subsequent concurrent touch points
     * will be false.
     *
     * Specifically match against false here as incomplete versions of
     * PointerEvents in very old browser might have it set as undefined.
     */
    return event.isPrimary !== false;
  }
};

const focusableElements = new Set([
  "BUTTON",
  "INPUT",
  "SELECT",
  "TEXTAREA",
  "A",
]);
function isElementKeyboardAccessible(element) {
  return focusableElements.has(element.tagName) || element.tabIndex !== -1;
}

const isPressing = new WeakSet();

/**
 * Filter out events that are not "Enter" keys.
 */
function filterEvents(callback) {
  return (event) => {
    if (event.key !== "Enter") return;
    callback(event);
  };
}
function firePointerEvent(target, type) {
  target.dispatchEvent(
    new PointerEvent("pointer" + type, { isPrimary: true, bubbles: true })
  );
}
const enableKeyboardPress = (focusEvent, eventOptions) => {
  const element = focusEvent.currentTarget;
  if (!element) return;
  const handleKeydown = filterEvents(() => {
    if (isPressing.has(element)) return;
    firePointerEvent(element, "down");
    const handleKeyup = filterEvents(() => {
      firePointerEvent(element, "up");
    });
    const handleBlur = () => firePointerEvent(element, "cancel");
    element.addEventListener("keyup", handleKeyup, eventOptions);
    element.addEventListener("blur", handleBlur, eventOptions);
  });
  element.addEventListener("keydown", handleKeydown, eventOptions);
  /**
   * Add an event listener that fires on blur to remove the keydown events.
   */
  element.addEventListener(
    "blur",
    () => element.removeEventListener("keydown", handleKeydown),
    eventOptions
  );
};

/**
 * Filter out events that are not primary pointer events, or are triggering
 * while a Motion gesture is active.
 */
function isValidPressEvent(event) {
  return isPrimaryPointer(event) && !isDragActive();
}
/**
 * Create a press gesture.
 *
 * Press is different to `"pointerdown"`, `"pointerup"` in that it
 * automatically filters out secondary pointer events like right
 * click and multitouch.
 *
 * It also adds accessibility support for keyboards, where
 * an element with a press gesture will receive focus and
 *  trigger on Enter `"keydown"` and `"keyup"` events.
 *
 * This is different to a browser's `"click"` event, which does
 * respond to keyboards but only for the `"click"` itself, rather
 * than the press start and end/cancel. The element also needs
 * to be focusable for this to work, whereas a press gesture will
 * make an element focusable by default.
 *
 * @public
 */
function press(targetOrSelector, onPressStart, options = {}) {
  const [targets, eventOptions, cancelEvents] = setupGesture(
    targetOrSelector,
    options
  );
  const startPress = (startEvent) => {
    const target = startEvent.currentTarget;
    if (!isValidPressEvent(startEvent)) return;
    isPressing.add(target);
    const onPressEnd = onPressStart(target, startEvent);
    const onPointerEnd = (endEvent, success) => {
      window.removeEventListener("pointerup", onPointerUp);
      window.removeEventListener("pointercancel", onPointerCancel);
      if (isPressing.has(target)) {
        isPressing.delete(target);
      }
      if (!isValidPressEvent(endEvent)) {
        return;
      }
      if (typeof onPressEnd === "function") {
        onPressEnd(endEvent, { success });
      }
    };
    const onPointerUp = (upEvent) => {
      onPointerEnd(
        upEvent,
        target === window ||
          target === document ||
          options.useGlobalTarget ||
          isNodeOrChild(target, upEvent.target)
      );
    };
    const onPointerCancel = (cancelEvent) => {
      onPointerEnd(cancelEvent, false);
    };
    window.addEventListener("pointerup", onPointerUp, eventOptions);
    window.addEventListener("pointercancel", onPointerCancel, eventOptions);
  };
  targets.forEach((target) => {
    const pointerDownTarget = options.useGlobalTarget ? window : target;
    pointerDownTarget.addEventListener("pointerdown", startPress, eventOptions);
    if (isHTMLElement$1(target)) {
      target.addEventListener("focus", (event) =>
        enableKeyboardPress(event, eventOptions)
      );
      if (
        !isElementKeyboardAccessible(target) &&
        !target.hasAttribute("tabindex")
      ) {
        target.tabIndex = 0;
      }
    }
  });
  return cancelEvents;
}

/**
 * Checks if an element is an SVG element in a way
 * that works across iframes
 */
function isSVGElement(element) {
  return isObject(element) && "ownerSVGElement" in element;
}

/**
 * Checks if an element is specifically an SVGSVGElement (the root SVG element)
 * in a way that works across iframes
 */
function isSVGSVGElement(element) {
  return isSVGElement(element) && element.tagName === "svg";
}

const isMotionValue = (value) => Boolean(value && value.getVelocity);

/**
 * A list of all ValueTypes
 */
const valueTypes = [...dimensionValueTypes, color, complex];
/**
 * Tests a value against the list of ValueTypes
 */
const findValueType = (v) => valueTypes.find(testValueType(v));

/**
 * @public
 */
const MotionConfigContext = reactExports.createContext({
  transformPagePoint: (p) => p,
  isStatic: false,
  reducedMotion: "never",
});

/**
 * Set a given ref to a given value
 * This utility takes care of different types of refs: callback refs and RefObject(s)
 */
function setRef$1(ref, value) {
  if (typeof ref === "function") {
    return ref(value);
  } else if (ref !== null && ref !== undefined) {
    ref.current = value;
  }
}
/**
 * A utility to compose multiple refs together
 * Accepts callback refs and RefObject(s)
 */
function composeRefs$1(...refs) {
  return (node) => {
    let hasCleanup = false;
    const cleanups = refs.map((ref) => {
      const cleanup = setRef$1(ref, node);
      if (!hasCleanup && typeof cleanup === "function") {
        hasCleanup = true;
      }
      return cleanup;
    });
    // React <19 will log an error to the console if a callback ref returns a
    // value. We don't use ref cleanups internally so this will only happen if a
    // user's ref callback returns a value, which we only expect if they are
    // using the cleanup functionality added in React 19.
    if (hasCleanup) {
      return () => {
        for (let i = 0; i < cleanups.length; i++) {
          const cleanup = cleanups[i];
          if (typeof cleanup === "function") {
            cleanup();
          } else {
            setRef$1(refs[i], null);
          }
        }
      };
    }
  };
}
/**
 * A custom hook that composes multiple refs
 * Accepts callback refs and RefObject(s)
 */
function useComposedRefs$1(...refs) {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return reactExports.useCallback(composeRefs$1(...refs), refs);
}

/**
 * Measurement functionality has to be within a separate component
 * to leverage snapshot lifecycle.
 */
class PopChildMeasure extends reactExports.Component {
  getSnapshotBeforeUpdate(prevProps) {
    const element = this.props.childRef.current;
    if (element && prevProps.isPresent && !this.props.isPresent) {
      const parent = element.offsetParent;
      const parentWidth = isHTMLElement$1(parent) ? parent.offsetWidth || 0 : 0;
      const size = this.props.sizeRef.current;
      size.height = element.offsetHeight || 0;
      size.width = element.offsetWidth || 0;
      size.top = element.offsetTop;
      size.left = element.offsetLeft;
      size.right = parentWidth - size.width - size.left;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {}
  render() {
    return this.props.children;
  }
}
function PopChild({ children, isPresent, anchorX, root }) {
  const id = reactExports.useId();
  const ref = reactExports.useRef(null);
  const size = reactExports.useRef({
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    right: 0,
  });
  const { nonce } = reactExports.useContext(MotionConfigContext);
  const composedRef = useComposedRefs$1(ref, children?.ref);
  /**
   * We create and inject a style block so we can apply this explicit
   * sizing in a non-destructive manner by just deleting the style block.
   *
   * We can't apply size via render as the measurement happens
   * in getSnapshotBeforeUpdate (post-render), likewise if we apply the
   * styles directly on the DOM node, we might be overwriting
   * styles set via the style prop.
   */
  reactExports.useInsertionEffect(() => {
    const { width, height, top, left, right } = size.current;
    if (isPresent || !ref.current || !width || !height) return;
    const x = anchorX === "left" ? `left: ${left}` : `right: ${right}`;
    ref.current.dataset.motionPopId = id;
    const style = document.createElement("style");
    if (nonce) style.nonce = nonce;
    const parent = root ?? document.head;
    parent.appendChild(style);
    if (style.sheet) {
      style.sheet.insertRule(`
          [data-motion-pop-id="${id}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            ${x}px !important;
            top: ${top}px !important;
          }
        `);
    }
    return () => {
      if (parent.contains(style)) {
        parent.removeChild(style);
      }
    };
  }, [isPresent]);
  return jsxRuntimeExports.jsx(PopChildMeasure, {
    isPresent: isPresent,
    childRef: ref,
    sizeRef: size,
    children: reactExports.cloneElement(children, { ref: composedRef }),
  });
}

const PresenceChild = ({
  children,
  initial,
  isPresent,
  onExitComplete,
  custom,
  presenceAffectsLayout,
  mode,
  anchorX,
  root,
}) => {
  const presenceChildren = useConstant(newChildrenMap);
  const id = reactExports.useId();
  let isReusedContext = true;
  let context = reactExports.useMemo(() => {
    isReusedContext = false;
    return {
      id,
      initial,
      isPresent,
      custom,
      onExitComplete: (childId) => {
        presenceChildren.set(childId, true);
        for (const isComplete of presenceChildren.values()) {
          if (!isComplete) return; // can stop searching when any is incomplete
        }
        onExitComplete && onExitComplete();
      },
      register: (childId) => {
        presenceChildren.set(childId, false);
        return () => presenceChildren.delete(childId);
      },
    };
  }, [isPresent, presenceChildren, onExitComplete]);
  /**
   * If the presence of a child affects the layout of the components around it,
   * we want to make a new context value to ensure they get re-rendered
   * so they can detect that layout change.
   */
  if (presenceAffectsLayout && isReusedContext) {
    context = { ...context };
  }
  reactExports.useMemo(() => {
    presenceChildren.forEach((_, key) => presenceChildren.set(key, false));
  }, [isPresent]);
  /**
   * If there's no `motion` components to fire exit animations, we want to remove this
   * component immediately.
   */
  reactExports.useEffect(() => {
    !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();
  }, [isPresent]);
  if (mode === "popLayout") {
    children = jsxRuntimeExports.jsx(PopChild, {
      isPresent: isPresent,
      anchorX: anchorX,
      root: root,
      children: children,
    });
  }
  return jsxRuntimeExports.jsx(PresenceContext.Provider, {
    value: context,
    children: children,
  });
};
function newChildrenMap() {
  return new Map();
}

/**
 * When a component is the child of `AnimatePresence`, it can use `usePresence`
 * to access information about whether it's still present in the React tree.
 *
 * ```jsx
 * import { usePresence } from "framer-motion"
 *
 * export const Component = () => {
 *   const [isPresent, safeToRemove] = usePresence()
 *
 *   useEffect(() => {
 *     !isPresent && setTimeout(safeToRemove, 1000)
 *   }, [isPresent])
 *
 *   return <div />
 * }
 * ```
 *
 * If `isPresent` is `false`, it means that a component has been removed the tree, but
 * `AnimatePresence` won't really remove it until `safeToRemove` has been called.
 *
 * @public
 */
function usePresence$1(subscribe = true) {
  const context = reactExports.useContext(PresenceContext);
  if (context === null) return [true, null];
  const { isPresent, onExitComplete, register } = context;
  // It's safe to call the following hooks conditionally (after an early return) because the context will always
  // either be null or non-null for the lifespan of the component.
  const id = reactExports.useId();
  reactExports.useEffect(() => {
    if (subscribe) {
      return register(id);
    }
  }, [subscribe]);
  const safeToRemove = reactExports.useCallback(
    () => subscribe && onExitComplete && onExitComplete(id),
    [id, onExitComplete, subscribe]
  );
  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
}

const getChildKey = (child) => child.key || "";
function onlyElements(children) {
  const filtered = [];
  // We use forEach here instead of map as map mutates the component key by preprending `.$`
  reactExports.Children.forEach(children, (child) => {
    if (reactExports.isValidElement(child)) filtered.push(child);
  });
  return filtered;
}

const AnimatePresence = ({
  children,
  custom,
  initial = true,
  onExitComplete,
  presenceAffectsLayout = true,
  mode = "sync",
  propagate = false,
  anchorX = "left",
  root,
}) => {
  const [isParentPresent, safeToRemove] = usePresence$1(propagate);
  const presentChildren = reactExports.useMemo(
    () => onlyElements(children),
    [children]
  );
  const presentKeys =
    propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);
  const isInitialRender = reactExports.useRef(true);
  const pendingPresentChildren = reactExports.useRef(presentChildren);
  const exitComplete = useConstant(() => /* @__PURE__ */ new Map());
  const [diffedChildren, setDiffedChildren] =
    reactExports.useState(presentChildren);
  const [renderedChildren, setRenderedChildren] =
    reactExports.useState(presentChildren);
  useIsomorphicLayoutEffect$1(() => {
    isInitialRender.current = false;
    pendingPresentChildren.current = presentChildren;
    for (let i = 0; i < renderedChildren.length; i++) {
      const key = getChildKey(renderedChildren[i]);
      if (!presentKeys.includes(key)) {
        if (exitComplete.get(key) !== true) {
          exitComplete.set(key, false);
        }
      } else {
        exitComplete.delete(key);
      }
    }
  }, [renderedChildren, presentKeys.length, presentKeys.join("-")]);
  const exitingChildren = [];
  if (presentChildren !== diffedChildren) {
    let nextChildren = [...presentChildren];
    for (let i = 0; i < renderedChildren.length; i++) {
      const child = renderedChildren[i];
      const key = getChildKey(child);
      if (!presentKeys.includes(key)) {
        nextChildren.splice(i, 0, child);
        exitingChildren.push(child);
      }
    }
    if (mode === "wait" && exitingChildren.length) {
      nextChildren = exitingChildren;
    }
    setRenderedChildren(onlyElements(nextChildren));
    setDiffedChildren(presentChildren);
    return null;
  }
  const { forceRender } = reactExports.useContext(LayoutGroupContext);
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
    children: renderedChildren.map((child) => {
      const key = getChildKey(child);
      const isPresent =
        propagate && !isParentPresent
          ? false
          : presentChildren === renderedChildren || presentKeys.includes(key);
      const onExit = () => {
        if (exitComplete.has(key)) {
          exitComplete.set(key, true);
        } else {
          return;
        }
        let isEveryExitComplete = true;
        exitComplete.forEach((isExitComplete) => {
          if (!isExitComplete) isEveryExitComplete = false;
        });
        if (isEveryExitComplete) {
          forceRender?.();
          setRenderedChildren(pendingPresentChildren.current);
          propagate && safeToRemove?.();
          onExitComplete && onExitComplete();
        }
      };
      return jsxRuntimeExports.jsx(
        PresenceChild,
        {
          isPresent,
          initial: !isInitialRender.current || initial ? void 0 : false,
          custom,
          presenceAffectsLayout,
          mode,
          root,
          onExitComplete: isPresent ? void 0 : onExit,
          anchorX,
          children: child,
        },
        key
      );
    }),
  });
};

const LazyContext = reactExports.createContext({ strict: false });

const featureProps = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag",
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"],
};
const featureDefinitions = {};
for (const key in featureProps) {
  featureDefinitions[key] = {
    isEnabled: (props) => featureProps[key].some((name) => !!props[name]),
  };
}

function loadFeatures(features) {
  for (const key in features) {
    featureDefinitions[key] = {
      ...featureDefinitions[key],
      ...features[key],
    };
  }
}

/**
 * A list of all valid MotionProps.
 *
 * @privateRemarks
 * This doesn't throw if a `MotionProp` name is missing - it should.
 */
const validMotionProps = new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "custom",
  "inherit",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "globalTapTarget",
  "ignoreStrict",
  "viewport",
]);
/**
 * Check whether a prop name is a valid `MotionProp` key.
 *
 * @param key - Name of the property to check
 * @returns `true` is key is a valid `MotionProp`.
 *
 * @public
 */
function isValidMotionProp(key) {
  return (
    key.startsWith("while") ||
    (key.startsWith("drag") && key !== "draggable") ||
    key.startsWith("layout") ||
    key.startsWith("onTap") ||
    key.startsWith("onPan") ||
    key.startsWith("onLayout") ||
    validMotionProps.has(key)
  );
}

let shouldForward = (key) => !isValidMotionProp(key);
function loadExternalIsValidProp(isValidProp) {
  if (typeof isValidProp !== "function") return;
  // Explicitly filter our events
  shouldForward = (key) =>
    key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
}
/**
 * Emotion and Styled Components both allow users to pass through arbitrary props to their components
 * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which
 * of these should be passed to the underlying DOM node.
 *
 * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props
 * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props
 * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of
 * `@emotion/is-prop-valid`, however to fix this problem we need to use it.
 *
 * By making it an optionalDependency we can offer this functionality only in the situations where it's
 * actually required.
 */
try {
  /**
   * We attempt to import this package but require won't be defined in esm environments, in that case
   * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed
   * in favour of explicit injection.
   */
  loadExternalIsValidProp(require("@emotion/is-prop-valid").default);
} catch {
  // We don't need to actually do anything here - the fallback is the existing `isPropValid`.
}
function filterProps(props, isDom, forwardMotionProps) {
  const filteredProps = {};
  for (const key in props) {
    /**
     * values is considered a valid prop by Emotion, so if it's present
     * this will be rendered out to the DOM unless explicitly filtered.
     *
     * We check the type as it could be used with the `feColorMatrix`
     * element, which we support.
     */
    if (key === "values" && typeof props.values === "object") continue;
    if (
      shouldForward(key) ||
      (forwardMotionProps === true && isValidMotionProp(key)) ||
      (!isDom && !isValidMotionProp(key)) ||
      // If trying to use native HTML drag events, forward drag listeners
      (props["draggable"] && key.startsWith("onDrag"))
    ) {
      filteredProps[key] = props[key];
    }
  }
  return filteredProps;
}

const MotionContext = /* @__PURE__ */ reactExports.createContext({});

function isAnimationControls(v) {
  return v !== null && typeof v === "object" && typeof v.start === "function";
}

/**
 * Decides if the supplied variable is variant label
 */
function isVariantLabel(v) {
  return typeof v === "string" || Array.isArray(v);
}

const variantPriorityOrder = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit",
];
const variantProps = ["initial", ...variantPriorityOrder];

function isControllingVariants(props) {
  return (
    isAnimationControls(props.animate) ||
    variantProps.some((name) => isVariantLabel(props[name]))
  );
}
function isVariantNode(props) {
  return Boolean(isControllingVariants(props) || props.variants);
}

function getCurrentTreeVariants(props, context) {
  if (isControllingVariants(props)) {
    const { initial, animate } = props;
    return {
      initial:
        initial === false || isVariantLabel(initial) ? initial : undefined,
      animate: isVariantLabel(animate) ? animate : undefined,
    };
  }
  return props.inherit !== false ? context : {};
}

function useCreateMotionContext(props) {
  const { initial, animate } = getCurrentTreeVariants(
    props,
    reactExports.useContext(MotionContext)
  );
  return reactExports.useMemo(
    () => ({ initial, animate }),
    [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]
  );
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}

const scaleCorrectors = {};
function addScaleCorrector(correctors) {
  for (const key in correctors) {
    scaleCorrectors[key] = correctors[key];
    if (isCSSVariableName(key)) {
      scaleCorrectors[key].isCSSVariable = true;
    }
  }
}

function isForcedMotionValue(key, { layout, layoutId }) {
  return (
    transformProps.has(key) ||
    key.startsWith("origin") ||
    ((layout || layoutId !== undefined) &&
      (!!scaleCorrectors[key] || key === "opacity"))
  );
}

const translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective",
};
const numTransforms = transformPropOrder.length;
/**
 * Build a CSS transform style from individual x/y/scale etc properties.
 *
 * This outputs with a default order of transforms/scales/rotations, this can be customised by
 * providing a transformTemplate function.
 */
function buildTransform(latestValues, transform, transformTemplate) {
  // The transform string we're going to build into.
  let transformString = "";
  let transformIsDefault = true;
  /**
   * Loop over all possible transforms in order, adding the ones that
   * are present to the transform string.
   */
  for (let i = 0; i < numTransforms; i++) {
    const key = transformPropOrder[i];
    const value = latestValues[key];
    if (value === undefined) continue;
    let valueIsDefault = true;
    if (typeof value === "number") {
      valueIsDefault = value === (key.startsWith("scale") ? 1 : 0);
    } else {
      valueIsDefault = parseFloat(value) === 0;
    }
    if (!valueIsDefault || transformTemplate) {
      const valueAsType = getValueAsType(value, numberValueTypes[key]);
      if (!valueIsDefault) {
        transformIsDefault = false;
        const transformName = translateAlias[key] || key;
        transformString += `${transformName}(${valueAsType}) `;
      }
      if (transformTemplate) {
        transform[key] = valueAsType;
      }
    }
  }
  transformString = transformString.trim();
  // If we have a custom `transform` template, pass our transform values and
  // generated transformString to that before returning
  if (transformTemplate) {
    transformString = transformTemplate(
      transform,
      transformIsDefault ? "" : transformString
    );
  } else if (transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}

function buildHTMLStyles(state, latestValues, transformTemplate) {
  const { style, vars, transformOrigin } = state;
  // Track whether we encounter any transform or transformOrigin values.
  let hasTransform = false;
  let hasTransformOrigin = false;
  /**
   * Loop over all our latest animated values and decide whether to handle them
   * as a style or CSS variable.
   *
   * Transforms and transform origins are kept separately for further processing.
   */
  for (const key in latestValues) {
    const value = latestValues[key];
    if (transformProps.has(key)) {
      // If this is a transform, flag to enable further transform processing
      hasTransform = true;
      continue;
    } else if (isCSSVariableName(key)) {
      vars[key] = value;
      continue;
    } else {
      // Convert the value to its default value type, ie 0 -> "0px"
      const valueAsType = getValueAsType(value, numberValueTypes[key]);
      if (key.startsWith("origin")) {
        // If this is a transform origin, flag and enable further transform-origin processing
        hasTransformOrigin = true;
        transformOrigin[key] = valueAsType;
      } else {
        style[key] = valueAsType;
      }
    }
  }
  if (!latestValues.transform) {
    if (hasTransform || transformTemplate) {
      style.transform = buildTransform(
        latestValues,
        state.transform,
        transformTemplate
      );
    } else if (style.transform) {
      /**
       * If we have previously created a transform but currently don't have any,
       * reset transform style to none.
       */
      style.transform = "none";
    }
  }
  /**
   * Build a transformOrigin style. Uses the same defaults as the browser for
   * undefined origins.
   */
  if (hasTransformOrigin) {
    const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
    style.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}

const createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {},
});

function copyRawValuesOnly(target, source, props) {
  for (const key in source) {
    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
      target[key] = source[key];
    }
  }
}
function useInitialMotionValues({ transformTemplate }, visualState) {
  return reactExports.useMemo(() => {
    const state = createHtmlRenderState();
    buildHTMLStyles(state, visualState, transformTemplate);
    return Object.assign({}, state.vars, state.style);
  }, [visualState]);
}
function useStyle(props, visualState) {
  const styleProp = props.style || {};
  const style = {};
  /**
   * Copy non-Motion Values straight into style
   */
  copyRawValuesOnly(style, styleProp, props);
  Object.assign(style, useInitialMotionValues(props, visualState));
  return style;
}
function useHTMLProps(props, visualState) {
  // The `any` isn't ideal but it is the type of createElement props argument
  const htmlProps = {};
  const style = useStyle(props, visualState);
  if (props.drag && props.dragListener !== false) {
    // Disable the ghost element when a user drags
    htmlProps.draggable = false;
    // Disable text selection
    style.userSelect =
      style.WebkitUserSelect =
      style.WebkitTouchCallout =
        "none";
    // Disable scrolling on the draggable direction
    style.touchAction =
      props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
  }
  if (
    props.tabIndex === undefined &&
    (props.onTap || props.onTapStart || props.whileTap)
  ) {
    htmlProps.tabIndex = 0;
  }
  htmlProps.style = style;
  return htmlProps;
}

const dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray",
};
const camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray",
};
/**
 * Build SVG path properties. Uses the path's measured length to convert
 * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset
 * and stroke-dasharray attributes.
 *
 * This function is mutative to reduce per-frame GC.
 */
function buildSVGPath(
  attrs,
  length,
  spacing = 1,
  offset = 0,
  useDashCase = true
) {
  // Normalise path length by setting SVG attribute pathLength to 1
  attrs.pathLength = 1;
  // We use dash case when setting attributes directly to the DOM node and camel case
  // when defining props on a React component.
  const keys = useDashCase ? dashKeys : camelKeys;
  // Build the dash offset
  attrs[keys.offset] = px.transform(-offset);
  // Build the dash array
  const pathLength = px.transform(length);
  const pathSpacing = px.transform(spacing);
  attrs[keys.array] = `${pathLength} ${pathSpacing}`;
}

/**
 * Build SVG visual attributes, like cx and style.transform
 */
function buildSVGAttrs(
  state,
  {
    attrX,
    attrY,
    attrScale,
    pathLength,
    pathSpacing = 1,
    pathOffset = 0,
    // This is object creation, which we try to avoid per-frame.
    ...latest
  },
  isSVGTag,
  transformTemplate,
  styleProp
) {
  buildHTMLStyles(state, latest, transformTemplate);
  /**
   * For svg tags we just want to make sure viewBox is animatable and treat all the styles
   * as normal HTML tags.
   */
  if (isSVGTag) {
    if (state.style.viewBox) {
      state.attrs.viewBox = state.style.viewBox;
    }
    return;
  }
  state.attrs = state.style;
  state.style = {};
  const { attrs, style } = state;
  /**
   * However, we apply transforms as CSS transforms.
   * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.
   */
  if (attrs.transform) {
    style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (style.transform || attrs.transformOrigin) {
    style.transformOrigin = attrs.transformOrigin ?? "50% 50%";
    delete attrs.transformOrigin;
  }
  if (style.transform) {
    /**
     * SVG's element transform-origin uses its own median as a reference.
     * Therefore, transformBox becomes a fill-box
     */
    style.transformBox = styleProp?.transformBox ?? "fill-box";
    delete attrs.transformBox;
  }
  // Render attrX/attrY/attrScale as attributes
  if (attrX !== undefined) attrs.x = attrX;
  if (attrY !== undefined) attrs.y = attrY;
  if (attrScale !== undefined) attrs.scale = attrScale;
  // Build SVG path if one has been defined
  if (pathLength !== undefined) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}

const createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {},
});

const isSVGTag = (tag) =>
  typeof tag === "string" && tag.toLowerCase() === "svg";

function useSVGProps(props, visualState, _isStatic, Component) {
  const visualProps = reactExports.useMemo(() => {
    const state = createSvgRenderState();
    buildSVGAttrs(
      state,
      visualState,
      isSVGTag(Component),
      props.transformTemplate,
      props.style
    );
    return {
      ...state.attrs,
      style: { ...state.style },
    };
  }, [visualState]);
  if (props.style) {
    const rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = { ...rawStyles, ...visualProps.style };
  }
  return visualProps;
}

/**
 * We keep these listed separately as we use the lowercase tag names as part
 * of the runtime bundle to detect SVG components
 */
const lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view",
];

function isSVGComponent(Component) {
  if (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component !== "string" ||
    /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component.includes("-")
  ) {
    return false;
  } else if (
    /**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */
    lowercaseSVGElements.indexOf(Component) > -1 ||
    /**
     * If it contains a capital letter, it's an SVG component
     */
    /[A-Z]/u.test(Component)
  ) {
    return true;
  }
  return false;
}

function useRender(
  Component,
  props,
  ref,
  { latestValues },
  isStatic,
  forwardMotionProps = false
) {
  const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
  const visualProps = useVisualProps(props, latestValues, isStatic, Component);
  const filteredProps = filterProps(
    props,
    typeof Component === "string",
    forwardMotionProps
  );
  const elementProps =
    Component !== reactExports.Fragment
      ? { ...filteredProps, ...visualProps, ref }
      : {};
  /**
   * If component has been handed a motion value as its child,
   * memoise its initial value and render that. Subsequent updates
   * will be handled by the onChange handler
   */
  const { children } = props;
  const renderedChildren = reactExports.useMemo(
    () => (isMotionValue(children) ? children.get() : children),
    [children]
  );
  return reactExports.createElement(Component, {
    ...elementProps,
    children: renderedChildren,
  });
}

function getValueState(visualElement) {
  const state = [{}, {}];
  visualElement?.values.forEach((value, key) => {
    state[0][key] = value.get();
    state[1][key] = value.getVelocity();
  });
  return state;
}
function resolveVariantFromProps(props, definition, custom, visualElement) {
  /**
   * If the variant definition is a function, resolve.
   */
  if (typeof definition === "function") {
    const [current, velocity] = getValueState(visualElement);
    definition = definition(
      custom !== undefined ? custom : props.custom,
      current,
      velocity
    );
  }
  /**
   * If the variant definition is a variant label, or
   * the function returned a variant label, resolve.
   */
  if (typeof definition === "string") {
    definition = props.variants && props.variants[definition];
  }
  /**
   * At this point we've resolved both functions and variant labels,
   * but the resolved variant label might itself have been a function.
   * If so, resolve. This can only have returned a valid target object.
   */
  if (typeof definition === "function") {
    const [current, velocity] = getValueState(visualElement);
    definition = definition(
      custom !== undefined ? custom : props.custom,
      current,
      velocity
    );
  }
  return definition;
}

/**
 * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself
 *
 * TODO: Remove and move to library
 */
function resolveMotionValue(value) {
  return isMotionValue(value) ? value.get() : value;
}

function makeState(
  { scrapeMotionValuesFromProps, createRenderState },
  props,
  context,
  presenceContext
) {
  const state = {
    latestValues: makeLatestValues(
      props,
      context,
      presenceContext,
      scrapeMotionValuesFromProps
    ),
    renderState: createRenderState(),
  };
  return state;
}
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  const values = {};
  const motionValues = scrapeMotionValues(props, {});
  for (const key in motionValues) {
    values[key] = resolveMotionValue(motionValues[key]);
  }
  let { initial, animate } = props;
  const isControllingVariants$1 = isControllingVariants(props);
  const isVariantNode$1 = isVariantNode(props);
  if (
    context &&
    isVariantNode$1 &&
    !isControllingVariants$1 &&
    props.inherit !== false
  ) {
    if (initial === undefined) initial = context.initial;
    if (animate === undefined) animate = context.animate;
  }
  let isInitialAnimationBlocked = presenceContext
    ? presenceContext.initial === false
    : false;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
  const variantToSet = isInitialAnimationBlocked ? animate : initial;
  if (
    variantToSet &&
    typeof variantToSet !== "boolean" &&
    !isAnimationControls(variantToSet)
  ) {
    const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    for (let i = 0; i < list.length; i++) {
      const resolved = resolveVariantFromProps(props, list[i]);
      if (resolved) {
        const { transitionEnd, transition, ...target } = resolved;
        for (const key in target) {
          let valueTarget = target[key];
          if (Array.isArray(valueTarget)) {
            /**
             * Take final keyframe if the initial animation is blocked because
             * we want to initialise at the end of that blocked animation.
             */
            const index = isInitialAnimationBlocked
              ? valueTarget.length - 1
              : 0;
            valueTarget = valueTarget[index];
          }
          if (valueTarget !== null) {
            values[key] = valueTarget;
          }
        }
        for (const key in transitionEnd) {
          values[key] = transitionEnd[key];
        }
      }
    }
  }
  return values;
}
const makeUseVisualState = (config) => (props, isStatic) => {
  const context = reactExports.useContext(MotionContext);
  const presenceContext = reactExports.useContext(PresenceContext);
  const make = () => makeState(config, props, context, presenceContext);
  return isStatic ? make() : useConstant(make);
};

function scrapeMotionValuesFromProps$1(props, prevProps, visualElement) {
  const { style } = props;
  const newValues = {};
  for (const key in style) {
    if (
      isMotionValue(style[key]) ||
      (prevProps.style && isMotionValue(prevProps.style[key])) ||
      isForcedMotionValue(key, props) ||
      visualElement?.getValue(key)?.liveStyle !== undefined
    ) {
      newValues[key] = style[key];
    }
  }
  return newValues;
}

const useHTMLVisualState = /*@__PURE__*/ makeUseVisualState({
  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
  createRenderState: createHtmlRenderState,
});

function scrapeMotionValuesFromProps(props, prevProps, visualElement) {
  const newValues = scrapeMotionValuesFromProps$1(
    props,
    prevProps,
    visualElement
  );
  for (const key in props) {
    if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
      const targetKey =
        transformPropOrder.indexOf(key) !== -1
          ? "attr" + key.charAt(0).toUpperCase() + key.substring(1)
          : key;
      newValues[targetKey] = props[key];
    }
  }
  return newValues;
}

const useSVGVisualState = /*@__PURE__*/ makeUseVisualState({
  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,
  createRenderState: createSvgRenderState,
});

const motionComponentSymbol = Symbol.for("motionComponentSymbol");

function isRefObject(ref) {
  return (
    ref &&
    typeof ref === "object" &&
    Object.prototype.hasOwnProperty.call(ref, "current")
  );
}

/**
 * Creates a ref function that, when called, hydrates the provided
 * external ref and VisualElement.
 */
function useMotionRef(visualState, visualElement, externalRef) {
  const currentInstanceRef = reactExports.useRef(null);
  return reactExports.useCallback(
    (instance) => {
      const prevInstance = currentInstanceRef.current;
      currentInstanceRef.current = instance;
      // Only run mount/unmount logic when the instance actually changes
      if (instance !== prevInstance) {
        if (instance) {
          visualState.onMount && visualState.onMount(instance);
        }
        if (visualElement) {
          if (instance) {
            visualElement.mount(instance);
          } else {
            visualElement.unmount();
          }
        }
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject(externalRef)) {
          externalRef.current = instance;
        }
      }
    },
    /**
     * Include externalRef in dependencies to ensure the callback updates
     * when the ref changes, allowing proper ref forwarding.
     */
    [visualElement, externalRef]
  );
}

/**
 * Convert camelCase to dash-case properties.
 */
const camelToDash = (str) =>
  str.replace(/([a-z])([A-Z])/gu, "$1-$2").toLowerCase();

const optimizedAppearDataId = "framerAppearId";
const optimizedAppearDataAttribute =
  "data-" + camelToDash(optimizedAppearDataId);

/**
 * Internal, exported only for usage in Framer
 */
const SwitchLayoutGroupContext = reactExports.createContext({});

function useVisualElement(
  Component,
  visualState,
  props,
  createVisualElement,
  ProjectionNodeConstructor
) {
  const { visualElement: parent } = reactExports.useContext(MotionContext);
  const lazyContext = reactExports.useContext(LazyContext);
  const presenceContext = reactExports.useContext(PresenceContext);
  const reducedMotionConfig =
    reactExports.useContext(MotionConfigContext).reducedMotion;
  const visualElementRef = reactExports.useRef(null);
  /**
   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded
   */
  createVisualElement = createVisualElement || lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement) {
    visualElementRef.current = createVisualElement(Component, {
      visualState,
      parent,
      props,
      presenceContext,
      blockInitialAnimation: presenceContext
        ? presenceContext.initial === false
        : false,
      reducedMotionConfig,
    });
  }
  const visualElement = visualElementRef.current;
  /**
   * Load Motion gesture and animation features. These are rendered as renderless
   * components so each feature can optionally make use of React lifecycle methods.
   */
  const initialLayoutGroupConfig = reactExports.useContext(
    SwitchLayoutGroupContext
  );
  if (
    visualElement &&
    !visualElement.projection &&
    ProjectionNodeConstructor &&
    (visualElement.type === "html" || visualElement.type === "svg")
  ) {
    createProjectionNode$1(
      visualElementRef.current,
      props,
      ProjectionNodeConstructor,
      initialLayoutGroupConfig
    );
  }
  const isMounted = reactExports.useRef(false);
  reactExports.useInsertionEffect(() => {
    /**
     * Check the component has already mounted before calling
     * `update` unnecessarily. This ensures we skip the initial update.
     */
    if (visualElement && isMounted.current) {
      visualElement.update(props, presenceContext);
    }
  });
  /**
   * Cache this value as we want to know whether HandoffAppearAnimations
   * was present on initial render - it will be deleted after this.
   */
  const optimisedAppearId = props[optimizedAppearDataAttribute];
  const wantsHandoff = reactExports.useRef(
    Boolean(optimisedAppearId) &&
      !window.MotionHandoffIsComplete?.(optimisedAppearId) &&
      window.MotionHasOptimisedAnimation?.(optimisedAppearId)
  );
  useIsomorphicLayoutEffect$1(() => {
    if (!visualElement) return;
    isMounted.current = true;
    window.MotionIsMounted = true;
    visualElement.updateFeatures();
    visualElement.scheduleRenderMicrotask();
    /**
     * Ideally this function would always run in a useEffect.
     *
     * However, if we have optimised appear animations to handoff from,
     * it needs to happen synchronously to ensure there's no flash of
     * incorrect styles in the event of a hydration error.
     *
     * So if we detect a situtation where optimised appear animations
     * are running, we use useLayoutEffect to trigger animations.
     */
    if (wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
  });
  reactExports.useEffect(() => {
    if (!visualElement) return;
    if (!wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
    if (wantsHandoff.current) {
      // This ensures all future calls to animateChanges() in this component will run in useEffect
      queueMicrotask(() => {
        window.MotionHandoffMarkAsComplete?.(optimisedAppearId);
      });
      wantsHandoff.current = false;
    }
    /**
     * Now we've finished triggering animations for this element we
     * can wipe the enteringChildren set for the next render.
     */
    visualElement.enteringChildren = undefined;
  });
  return visualElement;
}
function createProjectionNode$1(
  visualElement,
  props,
  ProjectionNodeConstructor,
  initialPromotionConfig
) {
  const {
    layoutId,
    layout,
    drag,
    dragConstraints,
    layoutScroll,
    layoutRoot,
    layoutCrossfade,
  } = props;
  visualElement.projection = new ProjectionNodeConstructor(
    visualElement.latestValues,
    props["data-framer-portal-id"]
      ? undefined
      : getClosestProjectingNode(visualElement.parent)
  );
  visualElement.projection.setOptions({
    layoutId,
    layout,
    alwaysMeasureLayout:
      Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),
    visualElement,
    /**
     * TODO: Update options in an effect. This could be tricky as it'll be too late
     * to update by the time layout animations run.
     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
     * ensuring it gets called if there's no potential layout animations.
     *
     */
    animationType: typeof layout === "string" ? layout : "both",
    initialPromotionConfig,
    crossfade: layoutCrossfade,
    layoutScroll,
    layoutRoot,
  });
}
function getClosestProjectingNode(visualElement) {
  if (!visualElement) return undefined;
  return visualElement.options.allowProjection !== false
    ? visualElement.projection
    : getClosestProjectingNode(visualElement.parent);
}

function createMotionComponent(
  Component,
  { forwardMotionProps = false } = {},
  preloadedFeatures,
  createVisualElement
) {
  preloadedFeatures && loadFeatures(preloadedFeatures);
  const useVisualState = isSVGComponent(Component)
    ? useSVGVisualState
    : useHTMLVisualState;
  function MotionDOMComponent(props, externalRef) {
    let MeasureLayout;
    const configAndProps = {
      ...reactExports.useContext(MotionConfigContext),
      ...props,
      layoutId: useLayoutId(props),
    };
    const { isStatic } = configAndProps;
    const context = useCreateMotionContext(props);
    const visualState = useVisualState(props, isStatic);
    if (!isStatic && isBrowser) {
      useStrictMode();
      const layoutProjection = getProjectionFunctionality(configAndProps);
      MeasureLayout = layoutProjection.MeasureLayout;
      context.visualElement = useVisualElement(
        Component,
        visualState,
        configAndProps,
        createVisualElement,
        layoutProjection.ProjectionNode
      );
    }
    return jsxRuntimeExports.jsxs(MotionContext.Provider, {
      value: context,
      children: [
        MeasureLayout && context.visualElement
          ? jsxRuntimeExports.jsx(MeasureLayout, {
              visualElement: context.visualElement,
              ...configAndProps,
            })
          : null,
        useRender(
          Component,
          props,
          useMotionRef(visualState, context.visualElement, externalRef),
          visualState,
          isStatic,
          forwardMotionProps
        ),
      ],
    });
  }
  MotionDOMComponent.displayName = `motion.${
    typeof Component === "string"
      ? Component
      : `create(${Component.displayName ?? Component.name ?? ""})`
  }`;
  const ForwardRefMotionComponent = reactExports.forwardRef(MotionDOMComponent);
  ForwardRefMotionComponent[motionComponentSymbol] = Component;
  return ForwardRefMotionComponent;
}
function useLayoutId({ layoutId }) {
  const layoutGroupId = reactExports.useContext(LayoutGroupContext).id;
  return layoutGroupId && layoutId !== void 0
    ? layoutGroupId + "-" + layoutId
    : layoutId;
}
function useStrictMode(configAndProps, preloadedFeatures) {
  reactExports.useContext(LazyContext).strict;
}
function getProjectionFunctionality(props) {
  const { drag, layout } = featureDefinitions;
  if (!drag && !layout) return {};
  const combined = { ...drag, ...layout };
  return {
    MeasureLayout:
      drag?.isEnabled(props) || layout?.isEnabled(props)
        ? combined.MeasureLayout
        : void 0,
    ProjectionNode: combined.ProjectionNode,
  };
}

function createMotionProxy(preloadedFeatures, createVisualElement) {
  if (typeof Proxy === "undefined") {
    return createMotionComponent;
  }
  const componentCache = /* @__PURE__ */ new Map();
  const factory = (Component, options) => {
    return createMotionComponent(
      Component,
      options,
      preloadedFeatures,
      createVisualElement
    );
  };
  const deprecatedFactoryFunction = (Component, options) => {
    return factory(Component, options);
  };
  return new Proxy(deprecatedFactoryFunction, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (_target, key) => {
      if (key === "create") return factory;
      if (!componentCache.has(key)) {
        componentCache.set(
          key,
          createMotionComponent(
            key,
            void 0,
            preloadedFeatures,
            createVisualElement
          )
        );
      }
      return componentCache.get(key);
    },
  });
}

/**
 * Bounding boxes tend to be defined as top, left, right, bottom. For various operations
 * it's easier to consider each axis individually. This function returns a bounding box
 * as a map of single-axis min/max values.
 */
function convertBoundingBoxToBox({ top, left, right, bottom }) {
  return {
    x: { min: left, max: right },
    y: { min: top, max: bottom },
  };
}
function convertBoxToBoundingBox({ x, y }) {
  return { top: y.min, right: x.max, bottom: y.max, left: x.min };
}
/**
 * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function
 * provided by Framer to allow measured points to be corrected for device scaling. This is used
 * when measuring DOM elements and DOM event points.
 */
function transformBoxPoints(point, transformPoint) {
  if (!transformPoint) return point;
  const topLeft = transformPoint({ x: point.left, y: point.top });
  const bottomRight = transformPoint({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x,
  };
}

function isIdentityScale(scale) {
  return scale === undefined || scale === 1;
}
function hasScale({ scale, scaleX, scaleY }) {
  return (
    !isIdentityScale(scale) ||
    !isIdentityScale(scaleX) ||
    !isIdentityScale(scaleY)
  );
}
function hasTransform(values) {
  return (
    hasScale(values) ||
    has2DTranslate(values) ||
    values.z ||
    values.rotate ||
    values.rotateX ||
    values.rotateY ||
    values.skewX ||
    values.skewY
  );
}
function has2DTranslate(values) {
  return is2DTranslate(values.x) || is2DTranslate(values.y);
}
function is2DTranslate(value) {
  return value && value !== "0%";
}

/**
 * Scales a point based on a factor and an originPoint
 */
function scalePoint(point, scale, originPoint) {
  const distanceFromOrigin = point - originPoint;
  const scaled = scale * distanceFromOrigin;
  return originPoint + scaled;
}
/**
 * Applies a translate/scale delta to a point
 */
function applyPointDelta(point, translate, scale, originPoint, boxScale) {
  if (boxScale !== undefined) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale, originPoint) + translate;
}
/**
 * Applies a translate/scale delta to an axis
 */
function applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {
  axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);
}
/**
 * Applies a translate/scale delta to a box
 */
function applyBoxDelta(box, { x, y }) {
  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
const TREE_SCALE_SNAP_MIN = 0.999999999999;
const TREE_SCALE_SNAP_MAX = 1.0000000000001;
/**
 * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms
 * in a tree upon our box before then calculating how to project it into our desired viewport-relative box
 *
 * This is the final nested loop within updateLayoutDelta for future refactoring
 */
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
  const treeLength = treePath.length;
  if (!treeLength) return;
  // Reset the treeScale
  treeScale.x = treeScale.y = 1;
  let node;
  let delta;
  for (let i = 0; i < treeLength; i++) {
    node = treePath[i];
    delta = node.projectionDelta;
    /**
     * TODO: Prefer to remove this, but currently we have motion components with
     * display: contents in Framer.
     */
    const { visualElement } = node.options;
    if (
      visualElement &&
      visualElement.props.style &&
      visualElement.props.style.display === "contents"
    ) {
      continue;
    }
    if (
      isSharedTransition &&
      node.options.layoutScroll &&
      node.scroll &&
      node !== node.root
    ) {
      transformBox(box, {
        x: -node.scroll.offset.x,
        y: -node.scroll.offset.y,
      });
    }
    if (delta) {
      // Incoporate each ancestor's scale into a culmulative treeScale for this component
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      // Apply each ancestor's calculated delta into this component's recorded layout box
      applyBoxDelta(box, delta);
    }
    if (isSharedTransition && hasTransform(node.latestValues)) {
      transformBox(box, node.latestValues);
    }
  }
  /**
   * Snap tree scale back to 1 if it's within a non-perceivable threshold.
   * This will help reduce useless scales getting rendered.
   */
  if (treeScale.x < TREE_SCALE_SNAP_MAX && treeScale.x > TREE_SCALE_SNAP_MIN) {
    treeScale.x = 1.0;
  }
  if (treeScale.y < TREE_SCALE_SNAP_MAX && treeScale.y > TREE_SCALE_SNAP_MIN) {
    treeScale.y = 1.0;
  }
}
function translateAxis(axis, distance) {
  axis.min = axis.min + distance;
  axis.max = axis.max + distance;
}
/**
 * Apply a transform to an axis from the latest resolved motion values.
 * This function basically acts as a bridge between a flat motion value map
 * and applyAxisDelta
 */
function transformAxis(
  axis,
  axisTranslate,
  axisScale,
  boxScale,
  axisOrigin = 0.5
) {
  const originPoint = mixNumber$1(axis.min, axis.max, axisOrigin);
  // Apply the axis delta to the final axis
  applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);
}
/**
 * Apply a transform to a box from the latest resolved motion values.
 */
function transformBox(box, transform) {
  transformAxis(
    box.x,
    transform.x,
    transform.scaleX,
    transform.scale,
    transform.originX
  );
  transformAxis(
    box.y,
    transform.y,
    transform.scaleY,
    transform.scale,
    transform.originY
  );
}

function measureViewportBox(instance, transformPoint) {
  return convertBoundingBoxToBox(
    transformBoxPoints(instance.getBoundingClientRect(), transformPoint)
  );
}
function measurePageBox(element, rootProjectionNode, transformPagePoint) {
  const viewportBox = measureViewportBox(element, transformPagePoint);
  const { scroll } = rootProjectionNode;
  if (scroll) {
    translateAxis(viewportBox.x, scroll.offset.x);
    translateAxis(viewportBox.y, scroll.offset.y);
  }
  return viewportBox;
}

const createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0,
});
const createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta(),
});
const createAxis = () => ({ min: 0, max: 0 });
const createBox = () => ({
  x: createAxis(),
  y: createAxis(),
});

// Does this device prefer reduced motion? Returns `null` server-side.
const prefersReducedMotion = { current: null };
const hasReducedMotionListener = { current: false };

function initPrefersReducedMotion() {
  hasReducedMotionListener.current = true;
  if (!isBrowser) return;
  if (window.matchMedia) {
    const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
    const setReducedMotionPreferences = () =>
      (prefersReducedMotion.current = motionMediaQuery.matches);
    motionMediaQuery.addEventListener("change", setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}

const visualElementStore = new WeakMap();

function updateMotionValuesFromProps(element, next, prev) {
  for (const key in next) {
    const nextValue = next[key];
    const prevValue = prev[key];
    if (isMotionValue(nextValue)) {
      /**
       * If this is a motion value found in props or style, we want to add it
       * to our visual element's motion value map.
       */
      element.addValue(key, nextValue);
    } else if (isMotionValue(prevValue)) {
      /**
       * If we're swapping from a motion value to a static value,
       * create a new motion value from that
       */
      element.addValue(key, motionValue(nextValue, { owner: element }));
    } else if (prevValue !== nextValue) {
      /**
       * If this is a flat value that has changed, update the motion value
       * or create one if it doesn't exist. We only want to do this if we're
       * not handling the value with our animation state.
       */
      if (element.hasValue(key)) {
        const existingValue = element.getValue(key);
        if (existingValue.liveStyle === true) {
          existingValue.jump(nextValue);
        } else if (!existingValue.hasAnimated) {
          existingValue.set(nextValue);
        }
      } else {
        const latestValue = element.getStaticValue(key);
        element.addValue(
          key,
          motionValue(latestValue !== undefined ? latestValue : nextValue, {
            owner: element,
          })
        );
      }
    }
  }
  // Handle removed values
  for (const key in prev) {
    if (next[key] === undefined) element.removeValue(key);
  }
  return next;
}

const propEventHandlers = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete",
];
class VisualElement {
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {
    return {};
  }
  constructor(
    {
      parent,
      props,
      presenceContext,
      reducedMotionConfig,
      blockInitialAnimation,
      visualState,
    },
    options = {}
  ) {
    this.current = null;
    this.children = /* @__PURE__ */ new Set();
    this.isVariantNode = false;
    this.isControllingVariants = false;
    this.shouldReduceMotion = null;
    this.values = /* @__PURE__ */ new Map();
    this.KeyframeResolver = KeyframeResolver;
    this.features = {};
    this.valueSubscriptions = /* @__PURE__ */ new Map();
    this.prevMotionValues = {};
    this.events = {};
    this.propEventSubscriptions = {};
    this.notifyUpdate = () => this.notify("Update", this.latestValues);
    this.render = () => {
      if (!this.current) return;
      this.triggerBuild();
      this.renderInstance(
        this.current,
        this.renderState,
        this.props.style,
        this.projection
      );
    };
    this.renderScheduledAt = 0;
    this.scheduleRender = () => {
      const now = time.now();
      if (this.renderScheduledAt < now) {
        this.renderScheduledAt = now;
        frame.render(this.render, false, true);
      }
    };
    const { latestValues, renderState } = visualState;
    this.latestValues = latestValues;
    this.baseTarget = { ...latestValues };
    this.initialValues = props.initial ? { ...latestValues } : {};
    this.renderState = renderState;
    this.parent = parent;
    this.props = props;
    this.presenceContext = presenceContext;
    this.depth = parent ? parent.depth + 1 : 0;
    this.reducedMotionConfig = reducedMotionConfig;
    this.options = options;
    this.blockInitialAnimation = Boolean(blockInitialAnimation);
    this.isControllingVariants = isControllingVariants(props);
    this.isVariantNode = isVariantNode(props);
    if (this.isVariantNode) {
      this.variantChildren = /* @__PURE__ */ new Set();
    }
    this.manuallyAnimateOnMount = Boolean(parent && parent.current);
    const { willChange, ...initialMotionValues } =
      this.scrapeMotionValuesFromProps(props, {}, this);
    for (const key in initialMotionValues) {
      const value = initialMotionValues[key];
      if (latestValues[key] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key]);
      }
    }
  }
  mount(instance) {
    this.current = instance;
    visualElementStore.set(instance, this);
    if (this.projection && !this.projection.instance) {
      this.projection.mount(instance);
    }
    if (this.parent && this.isVariantNode && !this.isControllingVariants) {
      this.removeFromVariantTree = this.parent.addVariantChild(this);
    }
    this.values.forEach((value, key) => this.bindToMotionValue(key, value));
    if (!hasReducedMotionListener.current) {
      initPrefersReducedMotion();
    }
    this.shouldReduceMotion =
      this.reducedMotionConfig === "never"
        ? false
        : this.reducedMotionConfig === "always"
        ? true
        : prefersReducedMotion.current;
    this.parent?.addChild(this);
    this.update(this.props, this.presenceContext);
  }
  unmount() {
    this.projection && this.projection.unmount();
    cancelFrame(this.notifyUpdate);
    cancelFrame(this.render);
    this.valueSubscriptions.forEach((remove) => remove());
    this.valueSubscriptions.clear();
    this.removeFromVariantTree && this.removeFromVariantTree();
    this.parent?.removeChild(this);
    for (const key in this.events) {
      this.events[key].clear();
    }
    for (const key in this.features) {
      const feature = this.features[key];
      if (feature) {
        feature.unmount();
        feature.isMounted = false;
      }
    }
    this.current = null;
  }
  addChild(child) {
    this.children.add(child);
    this.enteringChildren ??
      (this.enteringChildren = /* @__PURE__ */ new Set());
    this.enteringChildren.add(child);
  }
  removeChild(child) {
    this.children.delete(child);
    this.enteringChildren && this.enteringChildren.delete(child);
  }
  bindToMotionValue(key, value) {
    if (this.valueSubscriptions.has(key)) {
      this.valueSubscriptions.get(key)();
    }
    const valueIsTransform = transformProps.has(key);
    if (valueIsTransform && this.onBindTransform) {
      this.onBindTransform();
    }
    const removeOnChange = value.on("change", (latestValue) => {
      this.latestValues[key] = latestValue;
      this.props.onUpdate && frame.preRender(this.notifyUpdate);
      if (valueIsTransform && this.projection) {
        this.projection.isTransformDirty = true;
      }
      this.scheduleRender();
    });
    let removeSyncCheck;
    if (window.MotionCheckAppearSync) {
      removeSyncCheck = window.MotionCheckAppearSync(this, key, value);
    }
    this.valueSubscriptions.set(key, () => {
      removeOnChange();
      if (removeSyncCheck) removeSyncCheck();
      if (value.owner) value.stop();
    });
  }
  sortNodePosition(other) {
    if (
      !this.current ||
      !this.sortInstanceNodePosition ||
      this.type !== other.type
    ) {
      return 0;
    }
    return this.sortInstanceNodePosition(this.current, other.current);
  }
  updateFeatures() {
    let key = "animation";
    for (key in featureDefinitions) {
      const featureDefinition = featureDefinitions[key];
      if (!featureDefinition) continue;
      const { isEnabled, Feature: FeatureConstructor } = featureDefinition;
      if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {
        this.features[key] = new FeatureConstructor(this);
      }
      if (this.features[key]) {
        const feature = this.features[key];
        if (feature.isMounted) {
          feature.update();
        } else {
          feature.mount();
          feature.isMounted = true;
        }
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current
      ? this.measureInstanceViewportBox(this.current, this.props)
      : createBox();
  }
  getStaticValue(key) {
    return this.latestValues[key];
  }
  setStaticValue(key, value) {
    this.latestValues[key] = value;
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(props, presenceContext) {
    if (props.transformTemplate || this.props.transformTemplate) {
      this.scheduleRender();
    }
    this.prevProps = this.props;
    this.props = props;
    this.prevPresenceContext = this.presenceContext;
    this.presenceContext = presenceContext;
    for (let i = 0; i < propEventHandlers.length; i++) {
      const key = propEventHandlers[i];
      if (this.propEventSubscriptions[key]) {
        this.propEventSubscriptions[key]();
        delete this.propEventSubscriptions[key];
      }
      const listenerName = "on" + key;
      const listener = props[listenerName];
      if (listener) {
        this.propEventSubscriptions[key] = this.on(key, listener);
      }
    }
    this.prevMotionValues = updateMotionValuesFromProps(
      this,
      this.scrapeMotionValuesFromProps(props, this.prevProps, this),
      this.prevMotionValues
    );
    if (this.handleChildMotionValue) {
      this.handleChildMotionValue();
    }
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(name) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode
      ? this
      : this.parent
      ? this.parent.getClosestVariantNode()
      : void 0;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(child) {
    const closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode) {
      closestVariantNode.variantChildren &&
        closestVariantNode.variantChildren.add(child);
      return () => closestVariantNode.variantChildren.delete(child);
    }
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(key, value) {
    const existingValue = this.values.get(key);
    if (value !== existingValue) {
      if (existingValue) this.removeValue(key);
      this.bindToMotionValue(key, value);
      this.values.set(key, value);
      this.latestValues[key] = value.get();
    }
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(key) {
    this.values.delete(key);
    const unsubscribe = this.valueSubscriptions.get(key);
    if (unsubscribe) {
      unsubscribe();
      this.valueSubscriptions.delete(key);
    }
    delete this.latestValues[key];
    this.removeValueFromRenderState(key, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(key) {
    return this.values.has(key);
  }
  getValue(key, defaultValue) {
    if (this.props.values && this.props.values[key]) {
      return this.props.values[key];
    }
    let value = this.values.get(key);
    if (value === void 0 && defaultValue !== void 0) {
      value = motionValue(defaultValue === null ? void 0 : defaultValue, {
        owner: this,
      });
      this.addValue(key, value);
    }
    return value;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(key, target) {
    let value =
      this.latestValues[key] !== void 0 || !this.current
        ? this.latestValues[key]
        : this.getBaseTargetFromProps(this.props, key) ??
          this.readValueFromInstance(this.current, key, this.options);
    if (value !== void 0 && value !== null) {
      if (
        typeof value === "string" &&
        (isNumericalString(value) || isZeroValueString(value))
      ) {
        value = parseFloat(value);
      } else if (!findValueType(value) && complex.test(target)) {
        value = getAnimatableNone(key, target);
      }
      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);
    }
    return isMotionValue(value) ? value.get() : value;
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(key, value) {
    this.baseTarget[key] = value;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(key) {
    const { initial } = this.props;
    let valueFromInitial;
    if (typeof initial === "string" || typeof initial === "object") {
      const variant = resolveVariantFromProps(
        this.props,
        initial,
        this.presenceContext?.custom
      );
      if (variant) {
        valueFromInitial = variant[key];
      }
    }
    if (initial && valueFromInitial !== void 0) {
      return valueFromInitial;
    }
    const target = this.getBaseTargetFromProps(this.props, key);
    if (target !== void 0 && !isMotionValue(target)) return target;
    return this.initialValues[key] !== void 0 && valueFromInitial === void 0
      ? void 0
      : this.baseTarget[key];
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    return this.events[eventName].add(callback);
  }
  notify(eventName, ...args) {
    if (this.events[eventName]) {
      this.events[eventName].notify(...args);
    }
  }
  scheduleRenderMicrotask() {
    microtask.render(this.render);
  }
}

class DOMVisualElement extends VisualElement {
  constructor() {
    super(...arguments);
    this.KeyframeResolver = DOMKeyframesResolver;
  }
  sortInstanceNodePosition(a, b) {
    /**
     * compareDocumentPosition returns a bitmask, by using the bitwise &
     * we're returning true if 2 in that bitmask is set to true. 2 is set
     * to true if b preceeds a.
     */
    return a.compareDocumentPosition(b) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props, key) {
    return props.style ? props.style[key] : undefined;
  }
  removeValueFromRenderState(key, { vars, style }) {
    delete vars[key];
    delete style[key];
  }
  handleChildMotionValue() {
    if (this.childSubscription) {
      this.childSubscription();
      delete this.childSubscription;
    }
    const { children } = this.props;
    if (isMotionValue(children)) {
      this.childSubscription = children.on("change", (latest) => {
        if (this.current) {
          this.current.textContent = `${latest}`;
        }
      });
    }
  }
}

function renderHTML(element, { style, vars }, styleProp, projection) {
  const elementStyle = element.style;
  let key;
  for (key in style) {
    // CSSStyleDeclaration has [index: number]: string; in the types, so we use that as key type.
    elementStyle[key] = style[key];
  }
  // Write projection styles directly to element style
  projection?.applyProjectionStyles(elementStyle, styleProp);
  for (key in vars) {
    // Loop over any CSS variables and assign those.
    // They can only be assigned using `setProperty`.
    elementStyle.setProperty(key, vars[key]);
  }
}

function getComputedStyle$2(element) {
  return window.getComputedStyle(element);
}
class HTMLVisualElement extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "html";
    this.renderInstance = renderHTML;
  }
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      return this.projection?.isProjecting
        ? defaultTransformValue(key)
        : readTransformValue(instance, key);
    } else {
      const computedStyle = getComputedStyle$2(instance);
      const value =
        (isCSSVariableName(key)
          ? computedStyle.getPropertyValue(key)
          : computedStyle[key]) || 0;
      return typeof value === "string" ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, { transformPagePoint }) {
    return measureViewportBox(instance, transformPagePoint);
  }
  build(renderState, latestValues, props) {
    buildHTMLStyles(renderState, latestValues, props.transformTemplate);
  }
  scrapeMotionValuesFromProps(props, prevProps, visualElement) {
    return scrapeMotionValuesFromProps$1(props, prevProps, visualElement);
  }
}

/**
 * A set of attribute names that are always read/written as camel case.
 */
const camelCaseAttributes = new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust",
]);

function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, undefined, projection);
  for (const key in renderState.attrs) {
    element.setAttribute(
      !camelCaseAttributes.has(key) ? camelToDash(key) : key,
      renderState.attrs[key]
    );
  }
}

class SVGVisualElement extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "svg";
    this.isSVGTag = false;
    this.measureInstanceViewportBox = createBox;
  }
  getBaseTargetFromProps(props, key) {
    return props[key];
  }
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      const defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    }
    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
    return instance.getAttribute(key);
  }
  scrapeMotionValuesFromProps(props, prevProps, visualElement) {
    return scrapeMotionValuesFromProps(props, prevProps, visualElement);
  }
  build(renderState, latestValues, props) {
    buildSVGAttrs(
      renderState,
      latestValues,
      this.isSVGTag,
      props.transformTemplate,
      props.style
    );
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderSVG(instance, renderState, styleProp, projection);
  }
  mount(instance) {
    this.isSVGTag = isSVGTag(instance.tagName);
    super.mount(instance);
  }
}

const createDomVisualElement = (Component, options) => {
  return isSVGComponent(Component)
    ? new SVGVisualElement(options)
    : new HTMLVisualElement(options, {
        allowProjection: Component !== reactExports.Fragment,
      });
};

function resolveVariant(visualElement, definition, custom) {
  const props = visualElement.getProps();
  return resolveVariantFromProps(
    props,
    definition,
    custom !== undefined ? custom : props.custom,
    visualElement
  );
}

const isKeyframesTarget = (v) => {
  return Array.isArray(v);
};

/**
 * Set VisualElement's MotionValue, creating a new MotionValue for it if
 * it doesn't exist.
 */
function setMotionValue(visualElement, key, value) {
  if (visualElement.hasValue(key)) {
    visualElement.getValue(key).set(value);
  } else {
    visualElement.addValue(key, motionValue(value));
  }
}
function resolveFinalValueInKeyframes(v) {
  // TODO maybe throw if v.length - 1 is placeholder token?
  return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
}
function setTarget(visualElement, definition) {
  const resolved = resolveVariant(visualElement, definition);
  let { transitionEnd = {}, transition = {}, ...target } = resolved || {};
  target = { ...target, ...transitionEnd };
  for (const key in target) {
    const value = resolveFinalValueInKeyframes(target[key]);
    setMotionValue(visualElement, key, value);
  }
}

function isWillChangeMotionValue(value) {
  return Boolean(isMotionValue(value) && value.add);
}

function addValueToWillChange(visualElement, key) {
  const willChange = visualElement.getValue("willChange");
  /**
   * It could be that a user has set willChange to a regular MotionValue,
   * in which case we can't add the value to it.
   */
  if (isWillChangeMotionValue(willChange)) {
    return willChange.add(key);
  } else if (!willChange && MotionGlobalConfig.WillChange) {
    const newWillChange = new MotionGlobalConfig.WillChange("auto");
    visualElement.addValue("willChange", newWillChange);
    newWillChange.add(key);
  }
}

function getOptimisedAppearId(visualElement) {
  return visualElement.props[optimizedAppearDataAttribute];
}

const isNotNull$1 = (value) => value !== null;
function getFinalKeyframe(
  keyframes,
  { repeat, repeatType = "loop" },
  finalKeyframe
) {
  const resolvedKeyframes = keyframes.filter(isNotNull$1);
  const index =
    repeat && repeatType !== "loop" && repeat % 2 === 1
      ? 0
      : resolvedKeyframes.length - 1;
  return resolvedKeyframes[index];
}

const underDampedSpring = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10,
};
const criticallyDampedSpring = (target) => ({
  type: "spring",
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10,
});
const keyframesTransition = {
  type: "keyframes",
  duration: 0.8,
};
/**
 * Default easing curve is a slightly shallower version of
 * the default browser easing curve.
 */
const ease = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3,
};
const getDefaultTransition = (valueKey, { keyframes }) => {
  if (keyframes.length > 2) {
    return keyframesTransition;
  } else if (transformProps.has(valueKey)) {
    return valueKey.startsWith("scale")
      ? criticallyDampedSpring(keyframes[1])
      : underDampedSpring;
  }
  return ease;
};

/**
 * Decide whether a transition is defined on a given Transition.
 * This filters out orchestration options and returns true
 * if any options are left.
 */
function isTransitionDefined({
  when,
  delay: _delay,
  delayChildren,
  staggerChildren,
  staggerDirection,
  repeat,
  repeatType,
  repeatDelay,
  from,
  elapsed,
  ...transition
}) {
  return !!Object.keys(transition).length;
}

const animateMotionValue =
  (name, value, target, transition = {}, element, isHandoff) =>
  (onComplete) => {
    const valueTransition = getValueTransition(transition, name) || {};
    /**
     * Most transition values are currently completely overwritten by value-specific
     * transitions. In the future it'd be nicer to blend these transitions. But for now
     * delay actually does inherit from the root transition if not value-specific.
     */
    const delay = valueTransition.delay || transition.delay || 0;
    /**
     * Elapsed isn't a public transition option but can be passed through from
     * optimized appear effects in milliseconds.
     */
    let { elapsed = 0 } = transition;
    elapsed = elapsed - secondsToMilliseconds(delay);
    const options = {
      keyframes: Array.isArray(target) ? target : [null, target],
      ease: "easeOut",
      velocity: value.getVelocity(),
      ...valueTransition,
      delay: -elapsed,
      onUpdate: (v) => {
        value.set(v);
        valueTransition.onUpdate && valueTransition.onUpdate(v);
      },
      onComplete: () => {
        onComplete();
        valueTransition.onComplete && valueTransition.onComplete();
      },
      name,
      motionValue: value,
      element: isHandoff ? undefined : element,
    };
    /**
     * If there's no transition defined for this value, we can generate
     * unique transition settings for this value.
     */
    if (!isTransitionDefined(valueTransition)) {
      Object.assign(options, getDefaultTransition(name, options));
    }
    /**
     * Both WAAPI and our internal animation functions use durations
     * as defined by milliseconds, while our external API defines them
     * as seconds.
     */
    options.duration &&
      (options.duration = secondsToMilliseconds(options.duration));
    options.repeatDelay &&
      (options.repeatDelay = secondsToMilliseconds(options.repeatDelay));
    /**
     * Support deprecated way to set initial value. Prefer keyframe syntax.
     */
    if (options.from !== undefined) {
      options.keyframes[0] = options.from;
    }
    let shouldSkip = false;
    if (
      options.type === false ||
      (options.duration === 0 && !options.repeatDelay)
    ) {
      makeAnimationInstant(options);
      if (options.delay === 0) {
        shouldSkip = true;
      }
    }
    if (
      MotionGlobalConfig.instantAnimations ||
      MotionGlobalConfig.skipAnimations
    ) {
      shouldSkip = true;
      makeAnimationInstant(options);
      options.delay = 0;
    }
    /**
     * If the transition type or easing has been explicitly set by the user
     * then we don't want to allow flattening the animation.
     */
    options.allowFlatten = !valueTransition.type && !valueTransition.ease;
    /**
     * If we can or must skip creating the animation, and apply only
     * the final keyframe, do so. We also check once keyframes are resolved but
     * this early check prevents the need to create an animation at all.
     */
    if (shouldSkip && !isHandoff && value.get() !== undefined) {
      const finalKeyframe = getFinalKeyframe(
        options.keyframes,
        valueTransition
      );
      if (finalKeyframe !== undefined) {
        frame.update(() => {
          options.onUpdate(finalKeyframe);
          options.onComplete();
        });
        return;
      }
    }
    return valueTransition.isSync
      ? new JSAnimation(options)
      : new AsyncMotionValueAnimation(options);
  };

/**
 * Decide whether we should block this animation. Previously, we achieved this
 * just by checking whether the key was listed in protectedKeys, but this
 * posed problems if an animation was triggered by afterChildren and protectedKeys
 * had been set to true in the meantime.
 */
function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
  const shouldBlock =
    protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
  needsAnimating[key] = false;
  return shouldBlock;
}
function animateTarget(
  visualElement,
  targetAndTransition,
  { delay = 0, transitionOverride, type } = {}
) {
  let {
    transition = visualElement.getDefaultTransition(),
    transitionEnd,
    ...target
  } = targetAndTransition;
  if (transitionOverride) transition = transitionOverride;
  const animations = [];
  const animationTypeState =
    type &&
    visualElement.animationState &&
    visualElement.animationState.getState()[type];
  for (const key in target) {
    const value = visualElement.getValue(
      key,
      visualElement.latestValues[key] ?? null
    );
    const valueTarget = target[key];
    if (
      valueTarget === undefined ||
      (animationTypeState && shouldBlockAnimation(animationTypeState, key))
    ) {
      continue;
    }
    const valueTransition = {
      delay,
      ...getValueTransition(transition || {}, key),
    };
    /**
     * If the value is already at the defined target, skip the animation.
     */
    const currentValue = value.get();
    if (
      currentValue !== undefined &&
      !value.isAnimating &&
      !Array.isArray(valueTarget) &&
      valueTarget === currentValue &&
      !valueTransition.velocity
    ) {
      continue;
    }
    /**
     * If this is the first time a value is being animated, check
     * to see if we're handling off from an existing animation.
     */
    let isHandoff = false;
    if (window.MotionHandoffAnimation) {
      const appearId = getOptimisedAppearId(visualElement);
      if (appearId) {
        const startTime = window.MotionHandoffAnimation(appearId, key, frame);
        if (startTime !== null) {
          valueTransition.startTime = startTime;
          isHandoff = true;
        }
      }
    }
    addValueToWillChange(visualElement, key);
    value.start(
      animateMotionValue(
        key,
        value,
        valueTarget,
        visualElement.shouldReduceMotion && positionalKeys.has(key)
          ? { type: false }
          : valueTransition,
        visualElement,
        isHandoff
      )
    );
    const animation = value.animation;
    if (animation) {
      animations.push(animation);
    }
  }
  if (transitionEnd) {
    Promise.all(animations).then(() => {
      frame.update(() => {
        transitionEnd && setTarget(visualElement, transitionEnd);
      });
    });
  }
  return animations;
}

function calcChildStagger(
  children,
  child,
  delayChildren,
  staggerChildren = 0,
  staggerDirection = 1
) {
  const index = Array.from(children)
    .sort((a, b) => a.sortNodePosition(b))
    .indexOf(child);
  const numChildren = children.size;
  const maxStaggerDuration = (numChildren - 1) * staggerChildren;
  const delayIsFunction = typeof delayChildren === "function";
  return delayIsFunction
    ? delayChildren(index, numChildren)
    : staggerDirection === 1
    ? index * staggerChildren
    : maxStaggerDuration - index * staggerChildren;
}

function animateVariant(visualElement, variant, options = {}) {
  const resolved = resolveVariant(
    visualElement,
    variant,
    options.type === "exit" ? visualElement.presenceContext?.custom : undefined
  );
  let { transition = visualElement.getDefaultTransition() || {} } =
    resolved || {};
  if (options.transitionOverride) {
    transition = options.transitionOverride;
  }
  /**
   * If we have a variant, create a callback that runs it as an animation.
   * Otherwise, we resolve a Promise immediately for a composable no-op.
   */
  const getAnimation = resolved
    ? () => Promise.all(animateTarget(visualElement, resolved, options))
    : () => Promise.resolve();
  /**
   * If we have children, create a callback that runs all their animations.
   * Otherwise, we resolve a Promise immediately for a composable no-op.
   */
  const getChildAnimations =
    visualElement.variantChildren && visualElement.variantChildren.size
      ? (forwardDelay = 0) => {
          const {
            delayChildren = 0,
            staggerChildren,
            staggerDirection,
          } = transition;
          return animateChildren(
            visualElement,
            variant,
            forwardDelay,
            delayChildren,
            staggerChildren,
            staggerDirection,
            options
          );
        }
      : () => Promise.resolve();
  /**
   * If the transition explicitly defines a "when" option, we need to resolve either
   * this animation or all children animations before playing the other.
   */
  const { when } = transition;
  if (when) {
    const [first, last] =
      when === "beforeChildren"
        ? [getAnimation, getChildAnimations]
        : [getChildAnimations, getAnimation];
    return first().then(() => last());
  } else {
    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
  }
}
function animateChildren(
  visualElement,
  variant,
  delay = 0,
  delayChildren = 0,
  staggerChildren = 0,
  staggerDirection = 1,
  options
) {
  const animations = [];
  for (const child of visualElement.variantChildren) {
    child.notify("AnimationStart", variant);
    animations.push(
      animateVariant(child, variant, {
        ...options,
        delay:
          delay +
          (typeof delayChildren === "function" ? 0 : delayChildren) +
          calcChildStagger(
            visualElement.variantChildren,
            child,
            delayChildren,
            staggerChildren,
            staggerDirection
          ),
      }).then(() => child.notify("AnimationComplete", variant))
    );
  }
  return Promise.all(animations);
}

function animateVisualElement(visualElement, definition, options = {}) {
  visualElement.notify("AnimationStart", definition);
  let animation;
  if (Array.isArray(definition)) {
    const animations = definition.map((variant) =>
      animateVariant(visualElement, variant, options)
    );
    animation = Promise.all(animations);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement, definition, options);
  } else {
    const resolvedDefinition =
      typeof definition === "function"
        ? resolveVariant(visualElement, definition, options.custom)
        : definition;
    animation = Promise.all(
      animateTarget(visualElement, resolvedDefinition, options)
    );
  }
  return animation.then(() => {
    visualElement.notify("AnimationComplete", definition);
  });
}

function shallowCompare(next, prev) {
  if (!Array.isArray(prev)) return false;
  const prevLength = prev.length;
  if (prevLength !== next.length) return false;
  for (let i = 0; i < prevLength; i++) {
    if (prev[i] !== next[i]) return false;
  }
  return true;
}

const numVariantProps = variantProps.length;
function getVariantContext(visualElement) {
  if (!visualElement) return undefined;
  if (!visualElement.isControllingVariants) {
    const context = visualElement.parent
      ? getVariantContext(visualElement.parent) || {}
      : {};
    if (visualElement.props.initial !== undefined) {
      context.initial = visualElement.props.initial;
    }
    return context;
  }
  const context = {};
  for (let i = 0; i < numVariantProps; i++) {
    const name = variantProps[i];
    const prop = visualElement.props[name];
    if (isVariantLabel(prop) || prop === false) {
      context[name] = prop;
    }
  }
  return context;
}

const reversePriorityOrder = [...variantPriorityOrder].reverse();
const numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement) {
  return (animations) =>
    Promise.all(
      animations.map(({ animation, options }) =>
        animateVisualElement(visualElement, animation, options)
      )
    );
}
function createAnimationState(visualElement) {
  let animate = animateList(visualElement);
  let state = createState();
  let isInitialRender = true;
  /**
   * This function will be used to reduce the animation definitions for
   * each active animation type into an object of resolved values for it.
   */
  const buildResolvedTypeValues = (type) => (acc, definition) => {
    const resolved = resolveVariant(
      visualElement,
      definition,
      type === "exit" ? visualElement.presenceContext?.custom : undefined
    );
    if (resolved) {
      const { transition, transitionEnd, ...target } = resolved;
      acc = { ...acc, ...target, ...transitionEnd };
    }
    return acc;
  };
  /**
   * This just allows us to inject mocked animation functions
   * @internal
   */
  function setAnimateFunction(makeAnimator) {
    animate = makeAnimator(visualElement);
  }
  /**
   * When we receive new props, we need to:
   * 1. Create a list of protected keys for each type. This is a directory of
   *    value keys that are currently being "handled" by types of a higher priority
   *    so that whenever an animation is played of a given type, these values are
   *    protected from being animated.
   * 2. Determine if an animation type needs animating.
   * 3. Determine if any values have been removed from a type and figure out
   *    what to animate those to.
   */
  function animateChanges(changedActiveType) {
    const { props } = visualElement;
    const context = getVariantContext(visualElement.parent) || {};
    /**
     * A list of animations that we'll build into as we iterate through the animation
     * types. This will get executed at the end of the function.
     */
    const animations = [];
    /**
     * Keep track of which values have been removed. Then, as we hit lower priority
     * animation types, we can check if they contain removed values and animate to that.
     */
    const removedKeys = new Set();
    /**
     * A dictionary of all encountered keys. This is an object to let us build into and
     * copy it without iteration. Each time we hit an animation type we set its protected
     * keys - the keys its not allowed to animate - to the latest version of this object.
     */
    let encounteredKeys = {};
    /**
     * If a variant has been removed at a given index, and this component is controlling
     * variant animations, we want to ensure lower-priority variants are forced to animate.
     */
    let removedVariantIndex = Infinity;
    /**
     * Iterate through all animation types in reverse priority order. For each, we want to
     * detect which values it's handling and whether or not they've changed (and therefore
     * need to be animated). If any values have been removed, we want to detect those in
     * lower priority props and flag for animation.
     */
    for (let i = 0; i < numAnimationTypes; i++) {
      const type = reversePriorityOrder[i];
      const typeState = state[type];
      const prop = props[type] !== undefined ? props[type] : context[type];
      const propIsVariant = isVariantLabel(prop);
      /**
       * If this type has *just* changed isActive status, set activeDelta
       * to that status. Otherwise set to null.
       */
      const activeDelta =
        type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false) removedVariantIndex = i;
      /**
       * If this prop is an inherited variant, rather than been set directly on the
       * component itself, we want to make sure we allow the parent to trigger animations.
       *
       * TODO: Can probably change this to a !isControllingVariants check
       */
      let isInherited =
        prop === context[type] && prop !== props[type] && propIsVariant;
      if (
        isInherited &&
        isInitialRender &&
        visualElement.manuallyAnimateOnMount
      ) {
        isInherited = false;
      }
      /**
       * Set all encountered keys so far as the protected keys for this type. This will
       * be any key that has been animated or otherwise handled by active, higher-priortiy types.
       */
      typeState.protectedKeys = { ...encounteredKeys };
      // Check if we can skip analysing this prop early
      if (
        // If it isn't active and hasn't *just* been set as inactive
        (!typeState.isActive && activeDelta === null) ||
        // If we didn't and don't have any defined prop for this animation type
        (!prop && !typeState.prevProp) ||
        // Or if the prop doesn't define an animation
        isAnimationControls(prop) ||
        typeof prop === "boolean"
      ) {
        continue;
      }
      /**
       * As we go look through the values defined on this type, if we detect
       * a changed value or a value that was removed in a higher priority, we set
       * this to true and add this prop to the animation list.
       */
      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
      let shouldAnimateType =
        variantDidChange ||
        // If we're making this variant active, we want to always make it active
        (type === changedActiveType &&
          typeState.isActive &&
          !isInherited &&
          propIsVariant) ||
        // If we removed a higher-priority variant (i is in reverse order)
        (i > removedVariantIndex && propIsVariant);
      let handledRemovedValues = false;
      /**
       * As animations can be set as variant lists, variants or target objects, we
       * coerce everything to an array if it isn't one already
       */
      const definitionList = Array.isArray(prop) ? prop : [prop];
      /**
       * Build an object of all the resolved values. We'll use this in the subsequent
       * animateChanges calls to determine whether a value has changed.
       */
      let resolvedValues = definitionList.reduce(
        buildResolvedTypeValues(type),
        {}
      );
      if (activeDelta === false) resolvedValues = {};
      /**
       * Now we need to loop through all the keys in the prev prop and this prop,
       * and decide:
       * 1. If the value has changed, and needs animating
       * 2. If it has been removed, and needs adding to the removedKeys set
       * 3. If it has been removed in a higher priority type and needs animating
       * 4. If it hasn't been removed in a higher priority but hasn't changed, and
       *    needs adding to the type's protectedKeys list.
       */
      const { prevResolvedValues = {} } = typeState;
      const allKeys = {
        ...prevResolvedValues,
        ...resolvedValues,
      };
      const markToAnimate = (key) => {
        shouldAnimateType = true;
        if (removedKeys.has(key)) {
          handledRemovedValues = true;
          removedKeys.delete(key);
        }
        typeState.needsAnimating[key] = true;
        const motionValue = visualElement.getValue(key);
        if (motionValue) motionValue.liveStyle = false;
      };
      for (const key in allKeys) {
        const next = resolvedValues[key];
        const prev = prevResolvedValues[key];
        // If we've already handled this we can just skip ahead
        if (encounteredKeys.hasOwnProperty(key)) continue;
        /**
         * If the value has changed, we probably want to animate it.
         */
        let valueHasChanged = false;
        if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
          valueHasChanged = !shallowCompare(next, prev);
        } else {
          valueHasChanged = next !== prev;
        }
        if (valueHasChanged) {
          if (next !== undefined && next !== null) {
            // If next is defined and doesn't equal prev, it needs animating
            markToAnimate(key);
          } else {
            // If it's undefined, it's been removed.
            removedKeys.add(key);
          }
        } else if (next !== undefined && removedKeys.has(key)) {
          /**
           * If next hasn't changed and it isn't undefined, we want to check if it's
           * been removed by a higher priority
           */
          markToAnimate(key);
        } else {
          /**
           * If it hasn't changed, we add it to the list of protected values
           * to ensure it doesn't get animated.
           */
          typeState.protectedKeys[key] = true;
        }
      }
      /**
       * Update the typeState so next time animateChanges is called we can compare the
       * latest prop and resolvedValues to these.
       */
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = { ...encounteredKeys, ...resolvedValues };
      }
      if (isInitialRender && visualElement.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      /**
       * If this is an inherited prop we want to skip this animation
       * unless the inherited variants haven't changed on this render.
       */
      const willAnimateViaParent = isInherited && variantDidChange;
      const needsAnimating = !willAnimateViaParent || handledRemovedValues;
      if (shouldAnimateType && needsAnimating) {
        animations.push(
          ...definitionList.map((animation) => {
            const options = { type };
            /**
             * If we're performing the initial animation, but we're not
             * rendering at the same time as the variant-controlling parent,
             * we want to use the parent's transition to calculate the stagger.
             */
            if (
              typeof animation === "string" &&
              isInitialRender &&
              !willAnimateViaParent &&
              visualElement.manuallyAnimateOnMount &&
              visualElement.parent
            ) {
              const { parent } = visualElement;
              const parentVariant = resolveVariant(parent, animation);
              if (parent.enteringChildren && parentVariant) {
                const { delayChildren } = parentVariant.transition || {};
                options.delay = calcChildStagger(
                  parent.enteringChildren,
                  visualElement,
                  delayChildren
                );
              }
            }
            return {
              animation: animation,
              options,
            };
          })
        );
      }
    }
    /**
     * If there are some removed value that haven't been dealt with,
     * we need to create a new animation that falls back either to the value
     * defined in the style prop, or the last read value.
     */
    if (removedKeys.size) {
      const fallbackAnimation = {};
      /**
       * If the initial prop contains a transition we can use that, otherwise
       * allow the animation function to use the visual element's default.
       */
      if (typeof props.initial !== "boolean") {
        const initialTransition = resolveVariant(
          visualElement,
          Array.isArray(props.initial) ? props.initial[0] : props.initial
        );
        if (initialTransition && initialTransition.transition) {
          fallbackAnimation.transition = initialTransition.transition;
        }
      }
      removedKeys.forEach((key) => {
        const fallbackTarget = visualElement.getBaseTarget(key);
        const motionValue = visualElement.getValue(key);
        if (motionValue) motionValue.liveStyle = true;
        // @ts-expect-error - @mattgperry to figure if we should do something here
        fallbackAnimation[key] = fallbackTarget ?? null;
      });
      animations.push({ animation: fallbackAnimation });
    }
    let shouldAnimate = Boolean(animations.length);
    if (
      isInitialRender &&
      (props.initial === false || props.initial === props.animate) &&
      !visualElement.manuallyAnimateOnMount
    ) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate(animations) : Promise.resolve();
  }
  /**
   * Change whether a certain animation type is active.
   */
  function setActive(type, isActive) {
    // If the active state hasn't changed, we can safely do nothing here
    if (state[type].isActive === isActive) return Promise.resolve();
    // Propagate active change to children
    visualElement.variantChildren?.forEach((child) =>
      child.animationState?.setActive(type, isActive)
    );
    state[type].isActive = isActive;
    const animations = animateChanges(type);
    for (const key in state) {
      state[key].protectedKeys = {};
    }
    return animations;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state,
    reset: () => {
      state = createState();
      isInitialRender = true;
    },
  };
}
function checkVariantsDidChange(prev, next) {
  if (typeof next === "string") {
    return next !== prev;
  } else if (Array.isArray(next)) {
    return !shallowCompare(next, prev);
  }
  return false;
}
function createTypeState(isActive = false) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {},
  };
}
function createState() {
  return {
    animate: createTypeState(true),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState(),
  };
}

class Feature {
  constructor(node) {
    this.isMounted = false;
    this.node = node;
  }
  update() {}
}

class AnimationFeature extends Feature {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(node) {
    super(node);
    node.animationState || (node.animationState = createAnimationState(node));
  }
  updateAnimationControlsSubscription() {
    const { animate } = this.node.getProps();
    if (isAnimationControls(animate)) {
      this.unmountControls = animate.subscribe(this.node);
    }
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate } = this.node.getProps();
    const { animate: prevAnimate } = this.node.prevProps || {};
    if (animate !== prevAnimate) {
      this.updateAnimationControlsSubscription();
    }
  }
  unmount() {
    this.node.animationState.reset();
    this.unmountControls?.();
  }
}

let id$1 = 0;
class ExitAnimationFeature extends Feature {
  constructor() {
    super(...arguments);
    this.id = id$1++;
  }
  update() {
    if (!this.node.presenceContext) return;
    const { isPresent, onExitComplete } = this.node.presenceContext;
    const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent === prevIsPresent) {
      return;
    }
    const exitAnimation = this.node.animationState.setActive(
      "exit",
      !isPresent
    );
    if (onExitComplete && !isPresent) {
      exitAnimation.then(() => {
        onExitComplete(this.id);
      });
    }
  }
  mount() {
    const { register, onExitComplete } = this.node.presenceContext || {};
    if (onExitComplete) {
      onExitComplete(this.id);
    }
    if (register) {
      this.unmount = register(this.id);
    }
  }
  unmount() {}
}

const animations = {
  animation: {
    Feature: AnimationFeature,
  },
  exit: {
    Feature: ExitAnimationFeature,
  },
};

function addDomEvent(target, eventName, handler, options = { passive: true }) {
  target.addEventListener(eventName, handler, options);
  return () => target.removeEventListener(eventName, handler);
}

function extractEventInfo(event) {
  return {
    point: {
      x: event.pageX,
      y: event.pageY,
    },
  };
}
const addPointerInfo = (handler) => {
  return (event) =>
    isPrimaryPointer(event) && handler(event, extractEventInfo(event));
};

function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, eventName, addPointerInfo(handler), options);
}

const SCALE_PRECISION = 0.0001;
const SCALE_MIN = 1 - SCALE_PRECISION;
const SCALE_MAX = 1 + SCALE_PRECISION;
const TRANSLATE_PRECISION = 0.01;
const TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;
const TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target, maxDistance) {
  return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin = 0.5) {
  delta.origin = origin;
  delta.originPoint = mixNumber$1(source.min, source.max, delta.origin);
  delta.scale = calcLength(target) / calcLength(source);
  delta.translate =
    mixNumber$1(target.min, target.max, delta.origin) - delta.originPoint;
  if (
    (delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||
    isNaN(delta.scale)
  ) {
    delta.scale = 1.0;
  }
  if (
    (delta.translate >= TRANSLATE_MIN && delta.translate <= TRANSLATE_MAX) ||
    isNaN(delta.translate)
  ) {
    delta.translate = 0.0;
  }
}
function calcBoxDelta(delta, source, target, origin) {
  calcAxisDelta(
    delta.x,
    source.x,
    target.x,
    origin ? origin.originX : undefined
  );
  calcAxisDelta(
    delta.y,
    source.y,
    target.y,
    origin ? origin.originY : undefined
  );
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x);
  calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout, parent) {
  target.min = layout.min - parent.min;
  target.max = target.min + calcLength(layout);
}
function calcRelativePosition(target, layout, parent) {
  calcRelativeAxisPosition(target.x, layout.x, parent.x);
  calcRelativeAxisPosition(target.y, layout.y, parent.y);
}

function eachAxis(callback) {
  return [callback("x"), callback("y")];
}

// Fixes https://github.com/motiondivision/motion/issues/2270
const getContextWindow = ({ current }) => {
  return current ? current.ownerDocument.defaultView : null;
};

const distance = (a, b) => Math.abs(a - b);
function distance2D(a, b) {
  // Multi-dimensional
  const xDelta = distance(a.x, b.x);
  const yDelta = distance(a.y, b.y);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}

/**
 * @internal
 */
class PanSession {
  constructor(
    event,
    handlers,
    {
      transformPagePoint,
      contextWindow = window,
      dragSnapToOrigin = false,
      distanceThreshold = 3,
    } = {}
  ) {
    /**
     * @internal
     */
    this.startEvent = null;
    /**
     * @internal
     */
    this.lastMoveEvent = null;
    /**
     * @internal
     */
    this.lastMoveEventInfo = null;
    /**
     * @internal
     */
    this.handlers = {};
    /**
     * @internal
     */
    this.contextWindow = window;
    this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;
      const info = getPanInfo(this.lastMoveEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      // Only start panning if the offset is larger than 3 pixels. If we make it
      // any larger than this we'll want to reset the pointer history
      // on the first update to avoid visual snapping to the cursor.
      const isDistancePastThreshold =
        distance2D(info.offset, { x: 0, y: 0 }) >= this.distanceThreshold;
      if (!isPanStarted && !isDistancePastThreshold) return;
      const { point } = info;
      const { timestamp } = frameData;
      this.history.push({ ...point, timestamp });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart && onStart(this.lastMoveEvent, info);
        this.startEvent = this.lastMoveEvent;
      }
      onMove && onMove(this.lastMoveEvent, info);
    };
    this.handlePointerMove = (event, info) => {
      this.lastMoveEvent = event;
      this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);
      // Throttle mouse move event to once per frame
      frame.update(this.updatePoint, true);
    };
    this.handlePointerUp = (event, info) => {
      this.end();
      const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
      if (this.dragSnapToOrigin) resumeAnimation && resumeAnimation();
      if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;
      const panInfo = getPanInfo(
        event.type === "pointercancel"
          ? this.lastMoveEventInfo
          : transformPoint(info, this.transformPagePoint),
        this.history
      );
      if (this.startEvent && onEnd) {
        onEnd(event, panInfo);
      }
      onSessionEnd && onSessionEnd(event, panInfo);
    };
    // If we have more than one touch, don't start detecting this gesture
    if (!isPrimaryPointer(event)) return;
    this.dragSnapToOrigin = dragSnapToOrigin;
    this.handlers = handlers;
    this.transformPagePoint = transformPagePoint;
    this.distanceThreshold = distanceThreshold;
    this.contextWindow = contextWindow || window;
    const info = extractEventInfo(event);
    const initialInfo = transformPoint(info, this.transformPagePoint);
    const { point } = initialInfo;
    const { timestamp } = frameData;
    this.history = [{ ...point, timestamp }];
    const { onSessionStart } = handlers;
    onSessionStart &&
      onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe(
      addPointerEvent(
        this.contextWindow,
        "pointermove",
        this.handlePointerMove
      ),
      addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp),
      addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp)
    );
  }
  updateHandlers(handlers) {
    this.handlers = handlers;
  }
  end() {
    this.removeListeners && this.removeListeners();
    cancelFrame(this.updatePoint);
  }
}
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a, b) {
  return { x: a.x - b.x, y: a.y - b.y };
}
function getPanInfo({ point }, history) {
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity(history, 0.1),
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (
      lastPoint.timestamp - timestampedPoint.timestamp >
      secondsToMilliseconds(timeDelta)
    ) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time = millisecondsToSeconds(
    lastPoint.timestamp - timestampedPoint.timestamp
  );
  if (time === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time,
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

/**
 * Apply constraints to a point. These constraints are both physical along an
 * axis, and an elastic factor that determines how much to constrain the point
 * by if it does lie outside the defined parameters.
 */
function applyConstraints(point, { min, max }, elastic) {
  if (min !== undefined && point < min) {
    // If we have a min point defined, and this is outside of that, constrain
    point = elastic
      ? mixNumber$1(min, point, elastic.min)
      : Math.max(point, min);
  } else if (max !== undefined && point > max) {
    // If we have a max point defined, and this is outside of that, constrain
    point = elastic
      ? mixNumber$1(max, point, elastic.max)
      : Math.min(point, max);
  }
  return point;
}
/**
 * Calculate constraints in terms of the viewport when defined relatively to the
 * measured axis. This is measured from the nearest edge, so a max constraint of 200
 * on an axis with a max value of 300 would return a constraint of 500 - axis length
 */
function calcRelativeAxisConstraints(axis, min, max) {
  return {
    min: min !== undefined ? axis.min + min : undefined,
    max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined,
  };
}
/**
 * Calculate constraints in terms of the viewport when
 * defined relatively to the measured bounding box.
 */
function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left, right),
    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),
  };
}
/**
 * Calculate viewport constraints when defined as another viewport-relative axis
 */
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  let min = constraintsAxis.min - layoutAxis.min;
  let max = constraintsAxis.max - layoutAxis.max;
  // If the constraints axis is actually smaller than the layout axis then we can
  // flip the constraints
  if (
    constraintsAxis.max - constraintsAxis.min <
    layoutAxis.max - layoutAxis.min
  ) {
    [min, max] = [max, min];
  }
  return { min, max };
}
/**
 * Calculate viewport constraints when defined as another viewport-relative box
 */
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),
  };
}
/**
 * Calculate a transform origin relative to the source axis, between 0-1, that results
 * in an asthetically pleasing scale/transform needed to project from source to target.
 */
function calcOrigin(source, target) {
  let origin = 0.5;
  const sourceLength = calcLength(source);
  const targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min);
  }
  return clamp$1(0, 1, origin);
}
/**
 * Rebase the calculated viewport constraints relative to the layout.min point.
 */
function rebaseAxisConstraints(layout, constraints) {
  const relativeConstraints = {};
  if (constraints.min !== undefined) {
    relativeConstraints.min = constraints.min - layout.min;
  }
  if (constraints.max !== undefined) {
    relativeConstraints.max = constraints.max - layout.min;
  }
  return relativeConstraints;
}
const defaultElastic = 0.35;
/**
 * Accepts a dragElastic prop and returns resolved elastic values for each axis.
 */
function resolveDragElastic(dragElastic = defaultElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom"),
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel),
  };
}
function resolvePointElastic(dragElastic, label) {
  return typeof dragElastic === "number"
    ? dragElastic
    : dragElastic[label] || 0;
}

const elementDragControls = new WeakMap();
class VisualElementDragControls {
  constructor(visualElement) {
    this.openDragLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    /**
     * The permitted boundaries of travel, in pixels.
     */
    this.constraints = false;
    this.hasMutatedConstraints = false;
    /**
     * The per-axis resolved elastic values.
     */
    this.elastic = createBox();
    /**
     * The latest pointer event. Used as fallback when the `cancel` and `stop` functions are called without arguments.
     */
    this.latestPointerEvent = null;
    /**
     * The latest pan info. Used as fallback when the `cancel` and `stop` functions are called without arguments.
     */
    this.latestPanInfo = null;
    this.visualElement = visualElement;
  }
  start(originEvent, { snapToCursor = false, distanceThreshold } = {}) {
    /**
     * Don't start dragging if this component is exiting
     */
    const { presenceContext } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === false) return;
    const onSessionStart = (event) => {
      const { dragSnapToOrigin } = this.getProps();
      // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch
      // the component.
      dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();
      if (snapToCursor) {
        this.snapToCursor(extractEventInfo(event).point);
      }
    };
    const onStart = (event, info) => {
      // Attempt to grab the global drag gesture lock - maybe make this part of PanSession
      const { drag, dragPropagation, onDragStart } = this.getProps();
      if (drag && !dragPropagation) {
        if (this.openDragLock) this.openDragLock();
        this.openDragLock = setDragLock(drag);
        // If we don 't have the lock, don't start dragging
        if (!this.openDragLock) return;
      }
      this.latestPointerEvent = event;
      this.latestPanInfo = info;
      this.isDragging = true;
      this.currentDirection = null;
      this.resolveConstraints();
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = true;
        this.visualElement.projection.target = undefined;
      }
      /**
       * Record gesture origin
       */
      eachAxis((axis) => {
        let current = this.getAxisMotionValue(axis).get() || 0;
        /**
         * If the MotionValue is a percentage value convert to px
         */
        if (percent.test(current)) {
          const { projection } = this.visualElement;
          if (projection && projection.layout) {
            const measuredAxis = projection.layout.layoutBox[axis];
            if (measuredAxis) {
              const length = calcLength(measuredAxis);
              current = length * (parseFloat(current) / 100);
            }
          }
        }
        this.originPoint[axis] = current;
      });
      // Fire onDragStart event
      if (onDragStart) {
        frame.postRender(() => onDragStart(event, info));
      }
      addValueToWillChange(this.visualElement, "transform");
      const { animationState } = this.visualElement;
      animationState && animationState.setActive("whileDrag", true);
    };
    const onMove = (event, info) => {
      this.latestPointerEvent = event;
      this.latestPanInfo = info;
      const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } =
        this.getProps();
      // If we didn't successfully receive the gesture lock, early return.
      if (!dragPropagation && !this.openDragLock) return;
      const { offset } = info;
      // Attempt to detect drag direction if directionLock is true
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset);
        // If we've successfully set a direction, notify listener
        if (this.currentDirection !== null) {
          onDirectionLock && onDirectionLock(this.currentDirection);
        }
        return;
      }
      // Update each point with the latest position
      this.updateAxis("x", info.point, offset);
      this.updateAxis("y", info.point, offset);
      /**
       * Ideally we would leave the renderer to fire naturally at the end of
       * this frame but if the element is about to change layout as the result
       * of a re-render we want to ensure the browser can read the latest
       * bounding box to ensure the pointer and element don't fall out of sync.
       */
      this.visualElement.render();
      /**
       * This must fire after the render call as it might trigger a state
       * change which itself might trigger a layout update.
       */
      onDrag && onDrag(event, info);
    };
    const onSessionEnd = (event, info) => {
      this.latestPointerEvent = event;
      this.latestPanInfo = info;
      this.stop(event, info);
      this.latestPointerEvent = null;
      this.latestPanInfo = null;
    };
    const resumeAnimation = () =>
      eachAxis(
        (axis) =>
          this.getAnimationState(axis) === "paused" &&
          this.getAxisMotionValue(axis).animation?.play()
      );
    const { dragSnapToOrigin } = this.getProps();
    this.panSession = new PanSession(
      originEvent,
      {
        onSessionStart,
        onStart,
        onMove,
        onSessionEnd,
        resumeAnimation,
      },
      {
        transformPagePoint: this.visualElement.getTransformPagePoint(),
        dragSnapToOrigin,
        distanceThreshold,
        contextWindow: getContextWindow(this.visualElement),
      }
    );
  }
  /**
   * @internal
   */
  stop(event, panInfo) {
    const finalEvent = event || this.latestPointerEvent;
    const finalPanInfo = panInfo || this.latestPanInfo;
    const isDragging = this.isDragging;
    this.cancel();
    if (!isDragging || !finalPanInfo || !finalEvent) return;
    const { velocity } = finalPanInfo;
    this.startAnimation(velocity);
    const { onDragEnd } = this.getProps();
    if (onDragEnd) {
      frame.postRender(() => onDragEnd(finalEvent, finalPanInfo));
    }
  }
  /**
   * @internal
   */
  cancel() {
    this.isDragging = false;
    const { projection, animationState } = this.visualElement;
    if (projection) {
      projection.isAnimationBlocked = false;
    }
    this.panSession && this.panSession.end();
    this.panSession = undefined;
    const { dragPropagation } = this.getProps();
    if (!dragPropagation && this.openDragLock) {
      this.openDragLock();
      this.openDragLock = null;
    }
    animationState && animationState.setActive("whileDrag", false);
  }
  updateAxis(axis, _point, offset) {
    const { drag } = this.getProps();
    // If we're not dragging this axis, do an early return.
    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;
    const axisValue = this.getAxisMotionValue(axis);
    let next = this.originPoint[axis] + offset[axis];
    // Apply constraints
    if (this.constraints && this.constraints[axis]) {
      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next);
  }
  resolveConstraints() {
    const { dragConstraints, dragElastic } = this.getProps();
    const layout =
      this.visualElement.projection && !this.visualElement.projection.layout
        ? this.visualElement.projection.measure(false)
        : this.visualElement.projection?.layout;
    const prevConstraints = this.constraints;
    if (dragConstraints && isRefObject(dragConstraints)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout) {
        this.constraints = calcRelativeConstraints(
          layout.layoutBox,
          dragConstraints
        );
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic);
    /**
     * If we're outputting to external MotionValues, we want to rebase the measured constraints
     * from viewport-relative to component-relative.
     */
    if (
      prevConstraints !== this.constraints &&
      layout &&
      this.constraints &&
      !this.hasMutatedConstraints
    ) {
      eachAxis((axis) => {
        if (this.constraints !== false && this.getAxisMotionValue(axis)) {
          this.constraints[axis] = rebaseAxisConstraints(
            layout.layoutBox[axis],
            this.constraints[axis]
          );
        }
      });
    }
  }
  resolveRefConstraints() {
    const { dragConstraints: constraints, onMeasureDragConstraints } =
      this.getProps();
    if (!constraints || !isRefObject(constraints)) return false;
    const constraintsElement = constraints.current;
    const { projection } = this.visualElement;
    // TODO
    if (!projection || !projection.layout) return false;
    const constraintsBox = measurePageBox(
      constraintsElement,
      projection.root,
      this.visualElement.getTransformPagePoint()
    );
    let measuredConstraints = calcViewportConstraints(
      projection.layout.layoutBox,
      constraintsBox
    );
    /**
     * If there's an onMeasureDragConstraints listener we call it and
     * if different constraints are returned, set constraints to that
     */
    if (onMeasureDragConstraints) {
      const userConstraints = onMeasureDragConstraints(
        convertBoxToBoundingBox(measuredConstraints)
      );
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  }
  startAnimation(velocity) {
    const {
      drag,
      dragMomentum,
      dragElastic,
      dragTransition,
      dragSnapToOrigin,
      onDragTransitionEnd,
    } = this.getProps();
    const constraints = this.constraints || {};
    const momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag, this.currentDirection)) {
        return;
      }
      let transition = (constraints && constraints[axis]) || {};
      if (dragSnapToOrigin) transition = { min: 0, max: 0 };
      /**
       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame
       * of spring animations so we should look into adding a disable spring option to `inertia`.
       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`
       * using the value of `dragElastic`.
       */
      const bounceStiffness = dragElastic ? 200 : 1000000;
      const bounceDamping = dragElastic ? 40 : 10000000;
      const inertia = {
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition,
      };
      // If we're not animating on an externally-provided `MotionValue` we can use the
      // component's animation controls which will handle interactions with whileHover (etc),
      // otherwise we just have to animate the `MotionValue` itself.
      return this.startAxisValueAnimation(axis, inertia);
    });
    // Run all animations and then resolve the new drag constraints.
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  }
  startAxisValueAnimation(axis, transition) {
    const axisValue = this.getAxisMotionValue(axis);
    addValueToWillChange(this.visualElement, axis);
    return axisValue.start(
      animateMotionValue(
        axis,
        axisValue,
        0,
        transition,
        this.visualElement,
        false
      )
    );
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).stop());
  }
  pauseAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());
  }
  getAnimationState(axis) {
    return this.getAxisMotionValue(axis).animation?.state;
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(axis) {
    const dragKey = `_drag${axis.toUpperCase()}`;
    const props = this.visualElement.getProps();
    const externalMotionValue = props[dragKey];
    return externalMotionValue
      ? externalMotionValue
      : this.visualElement.getValue(
          axis,
          (props.initial ? props.initial[axis] : undefined) || 0
        );
  }
  snapToCursor(point) {
    eachAxis((axis) => {
      const { drag } = this.getProps();
      // If we're not dragging this axis, do an early return.
      if (!shouldDrag(axis, drag, this.currentDirection)) return;
      const { projection } = this.visualElement;
      const axisValue = this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        const { min, max } = projection.layout.layoutBox[axis];
        axisValue.set(point[axis] - mixNumber$1(min, max, 0.5));
      }
    });
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current) return;
    const { drag, dragConstraints } = this.getProps();
    const { projection } = this.visualElement;
    if (!isRefObject(dragConstraints) || !projection || !this.constraints)
      return;
    /**
     * Stop current animations as there can be visual glitching if we try to do
     * this mid-animation
     */
    this.stopAnimation();
    /**
     * Record the relative position of the dragged element relative to the
     * constraints box and save as a progress value.
     */
    const boxProgress = { x: 0, y: 0 };
    eachAxis((axis) => {
      const axisValue = this.getAxisMotionValue(axis);
      if (axisValue && this.constraints !== false) {
        const latest = axisValue.get();
        boxProgress[axis] = calcOrigin(
          { min: latest, max: latest },
          this.constraints[axis]
        );
      }
    });
    /**
     * Update the layout of this element and resolve the latest drag constraints
     */
    const { transformTemplate } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate
      ? transformTemplate({}, "")
      : "none";
    projection.root && projection.root.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    /**
     * For each axis, calculate the current progress of the layout axis
     * within the new constraints.
     */
    eachAxis((axis) => {
      if (!shouldDrag(axis, drag, null)) return;
      /**
       * Calculate a new transform based on the previous box progress
       */
      const axisValue = this.getAxisMotionValue(axis);
      const { min, max } = this.constraints[axis];
      axisValue.set(mixNumber$1(min, max, boxProgress[axis]));
    });
  }
  addListeners() {
    if (!this.visualElement.current) return;
    elementDragControls.set(this.visualElement, this);
    const element = this.visualElement.current;
    /**
     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.
     */
    const stopPointerListener = addPointerEvent(
      element,
      "pointerdown",
      (event) => {
        const { drag, dragListener = true } = this.getProps();
        drag && dragListener && this.start(event);
      }
    );
    const measureDragConstraints = () => {
      const { dragConstraints } = this.getProps();
      if (isRefObject(dragConstraints) && dragConstraints.current) {
        this.constraints = this.resolveRefConstraints();
      }
    };
    const { projection } = this.visualElement;
    const stopMeasureLayoutListener = projection.addEventListener(
      "measure",
      measureDragConstraints
    );
    if (projection && !projection.layout) {
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
    }
    frame.read(measureDragConstraints);
    /**
     * Attach a window resize listener to scale the draggable target within its defined
     * constraints as the window resizes.
     */
    const stopResizeListener = addDomEvent(window, "resize", () =>
      this.scalePositionWithinConstraints()
    );
    /**
     * If the element's layout changes, calculate the delta and apply that to
     * the drag gesture's origin point.
     */
    const stopLayoutUpdateListener = projection.addEventListener(
      "didUpdate",
      ({ delta, hasLayoutChanged }) => {
        if (this.isDragging && hasLayoutChanged) {
          eachAxis((axis) => {
            const motionValue = this.getAxisMotionValue(axis);
            if (!motionValue) return;
            this.originPoint[axis] += delta[axis].translate;
            motionValue.set(motionValue.get() + delta[axis].translate);
          });
          this.visualElement.render();
        }
      }
    );
    return () => {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
      stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    const props = this.visualElement.getProps();
    const {
      drag = false,
      dragDirectionLock = false,
      dragPropagation = false,
      dragConstraints = false,
      dragElastic = defaultElastic,
      dragMomentum = true,
    } = props;
    return {
      ...props,
      drag,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum,
    };
  }
}
function shouldDrag(direction, drag, currentDirection) {
  return (
    (drag === true || drag === direction) &&
    (currentDirection === null || currentDirection === direction)
  );
}
/**
 * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower
 * than the provided threshold, return `null`.
 *
 * @param offset - The x/y offset from origin.
 * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.
 */
function getCurrentDirection(offset, lockThreshold = 10) {
  let direction = null;
  if (Math.abs(offset.y) > lockThreshold) {
    direction = "y";
  } else if (Math.abs(offset.x) > lockThreshold) {
    direction = "x";
  }
  return direction;
}

class DragGesture extends Feature {
  constructor(node) {
    super(node);
    this.removeGroupControls = noop$1;
    this.removeListeners = noop$1;
    this.controls = new VisualElementDragControls(node);
  }
  mount() {
    // If we've been provided a DragControls for manual control over the drag gesture,
    // subscribe this component to it on mount.
    const { dragControls } = this.node.getProps();
    if (dragControls) {
      this.removeGroupControls = dragControls.subscribe(this.controls);
    }
    this.removeListeners = this.controls.addListeners() || noop$1;
  }
  unmount() {
    this.removeGroupControls();
    this.removeListeners();
  }
}

const asyncHandler = (handler) => (event, info) => {
  if (handler) {
    frame.postRender(() => handler(event, info));
  }
};
class PanGesture extends Feature {
  constructor() {
    super(...arguments);
    this.removePointerDownListener = noop$1;
  }
  onPointerDown(pointerDownEvent) {
    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
      transformPagePoint: this.node.getTransformPagePoint(),
      contextWindow: getContextWindow(this.node),
    });
  }
  createPanHandlers() {
    const { onPanSessionStart, onPanStart, onPan, onPanEnd } =
      this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart),
      onStart: asyncHandler(onPanStart),
      onMove: onPan,
      onEnd: (event, info) => {
        delete this.session;
        if (onPanEnd) {
          frame.postRender(() => onPanEnd(event, info));
        }
      },
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent(
      this.node.current,
      "pointerdown",
      (event) => this.onPointerDown(event)
    );
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener();
    this.session && this.session.end();
  }
}

/**
 * This should only ever be modified on the client otherwise it'll
 * persist through server requests. If we need instanced states we
 * could lazy-init via root.
 */
const globalProjectionState = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: true,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: false,
};

function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min) return 0;
  return (pixels / (axis.max - axis.min)) * 100;
}
/**
 * We always correct borderRadius as a percentage rather than pixels to reduce paints.
 * For example, if you are projecting a box that is 100px wide with a 10px borderRadius
 * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%
 * borderRadius in both states. If we animate between the two in pixels that will trigger
 * a paint each time. If we animate between the two in percentage we'll avoid a paint.
 */
const correctBorderRadius = {
  correct: (latest, node) => {
    if (!node.target) return latest;
    /**
     * If latest is a string, if it's a percentage we can return immediately as it's
     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.
     */
    if (typeof latest === "string") {
      if (px.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    /**
     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that
     * pixel value as a percentage of each axis
     */
    const x = pixelsToPercent(latest, node.target.x);
    const y = pixelsToPercent(latest, node.target.y);
    return `${x}% ${y}%`;
  },
};

const correctBoxShadow = {
  correct: (latest, { treeScale, projectionDelta }) => {
    const original = latest;
    const shadow = complex.parse(latest);
    // TODO: Doesn't support multiple shadows
    if (shadow.length > 5) return original;
    const template = complex.createTransformer(latest);
    const offset = typeof shadow[0] !== "number" ? 1 : 0;
    // Calculate the overall context scale
    const xScale = projectionDelta.x.scale * treeScale.x;
    const yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset] /= xScale;
    shadow[1 + offset] /= yScale;
    /**
     * Ideally we'd correct x and y scales individually, but because blur and
     * spread apply to both we have to take a scale average and apply that instead.
     * We could potentially improve the outcome of this by incorporating the ratio between
     * the two scales.
     */
    const averageScale = mixNumber$1(xScale, yScale, 0.5);
    // Blur
    if (typeof shadow[2 + offset] === "number")
      shadow[2 + offset] /= averageScale;
    // Spread
    if (typeof shadow[3 + offset] === "number")
      shadow[3 + offset] /= averageScale;
    return template(shadow);
  },
};

/**
 * Track whether we've taken any snapshots yet. If not,
 * we can safely skip notification of didUpdate.
 *
 * Difficult to capture in a test but to prevent flickering
 * we must set this to true either on update or unmount.
 * Running `next-env/layout-id` in Safari will show this behaviour if broken.
 */
let hasTakenAnySnapshot = false;
class MeasureLayoutWithContext extends reactExports.Component {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    const { visualElement, layoutGroup, switchLayoutGroup, layoutId } =
      this.props;
    const { projection } = visualElement;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup.group) layoutGroup.group.add(projection);
      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
        switchLayoutGroup.register(projection);
      }
      if (hasTakenAnySnapshot) {
        projection.root.didUpdate();
      }
      projection.addEventListener("animationComplete", () => {
        this.safeToRemove();
      });
      projection.setOptions({
        ...projection.options,
        onExitComplete: () => this.safeToRemove(),
      });
    }
    globalProjectionState.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(prevProps) {
    const { layoutDependency, visualElement, drag, isPresent } = this.props;
    const { projection } = visualElement;
    if (!projection) return null;
    /**
     * TODO: We use this data in relegate to determine whether to
     * promote a previous element. There's no guarantee its presence data
     * will have updated by this point - if a bug like this arises it will
     * have to be that we markForRelegation and then find a new lead some other way,
     * perhaps in didUpdate
     */
    projection.isPresent = isPresent;
    hasTakenAnySnapshot = true;
    if (
      drag ||
      prevProps.layoutDependency !== layoutDependency ||
      layoutDependency === undefined ||
      prevProps.isPresent !== isPresent
    ) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent) {
      if (isPresent) {
        projection.promote();
      } else if (!projection.relegate()) {
        /**
         * If there's another stack member taking over from this one,
         * it's in charge of the exit animation and therefore should
         * be in charge of the safe to remove. Otherwise we call it here.
         */
        frame.postRender(() => {
          const stack = projection.getStack();
          if (!stack || !stack.members.length) {
            this.safeToRemove();
          }
        });
      }
    }
    return null;
  }
  componentDidUpdate() {
    const { projection } = this.props.visualElement;
    if (projection) {
      projection.root.didUpdate();
      microtask.postRender(() => {
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      });
    }
  }
  componentWillUnmount() {
    const {
      visualElement,
      layoutGroup,
      switchLayoutGroup: promoteContext,
    } = this.props;
    const { projection } = visualElement;
    hasTakenAnySnapshot = true;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup && layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext && promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  }
  safeToRemove() {
    const { safeToRemove } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
}
function MeasureLayout(props) {
  const [isPresent, safeToRemove] = usePresence$1();
  const layoutGroup = reactExports.useContext(LayoutGroupContext);
  return jsxRuntimeExports.jsx(MeasureLayoutWithContext, {
    ...props,
    layoutGroup: layoutGroup,
    switchLayoutGroup: reactExports.useContext(SwitchLayoutGroupContext),
    isPresent: isPresent,
    safeToRemove: safeToRemove,
  });
}
const defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius",
    ],
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow,
};

function animateSingleValue(value, keyframes, options) {
  const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
  motionValue$1.start(
    animateMotionValue("", motionValue$1, keyframes, options)
  );
  return motionValue$1.animation;
}

const compareByDepth = (a, b) => a.depth - b.depth;

class FlatTree {
  constructor() {
    this.children = [];
    this.isDirty = false;
  }
  add(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  }
  remove(child) {
    removeItem(this.children, child);
    this.isDirty = true;
  }
  forEach(callback) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback);
  }
}

/**
 * Timeout defined in ms
 */
function delay(callback, timeout) {
  const start = time.now();
  const checkElapsed = ({ timestamp }) => {
    const elapsed = timestamp - start;
    if (elapsed >= timeout) {
      cancelFrame(checkElapsed);
      callback(elapsed - timeout);
    }
  };
  frame.setup(checkElapsed, true);
  return () => cancelFrame(checkElapsed);
}

const borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
const numBorders = borders.length;
const asNumber = (value) =>
  typeof value === "string" ? parseFloat(value) : value;
const isPx = (value) => typeof value === "number" || px.test(value);
function mixValues(
  target,
  follow,
  lead,
  progress,
  shouldCrossfadeOpacity,
  isOnlyMember
) {
  if (shouldCrossfadeOpacity) {
    target.opacity = mixNumber$1(
      0,
      lead.opacity ?? 1,
      easeCrossfadeIn(progress)
    );
    target.opacityExit = mixNumber$1(
      follow.opacity ?? 1,
      0,
      easeCrossfadeOut(progress)
    );
  } else if (isOnlyMember) {
    target.opacity = mixNumber$1(
      follow.opacity ?? 1,
      lead.opacity ?? 1,
      progress
    );
  }
  /**
   * Mix border radius
   */
  for (let i = 0; i < numBorders; i++) {
    const borderLabel = `border${borders[i]}Radius`;
    let followRadius = getRadius(follow, borderLabel);
    let leadRadius = getRadius(lead, borderLabel);
    if (followRadius === undefined && leadRadius === undefined) continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    const canMix =
      followRadius === 0 ||
      leadRadius === 0 ||
      isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target[borderLabel] = Math.max(
        mixNumber$1(asNumber(followRadius), asNumber(leadRadius), progress),
        0
      );
      if (percent.test(leadRadius) || percent.test(followRadius)) {
        target[borderLabel] += "%";
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  /**
   * Mix rotation
   */
  if (follow.rotate || lead.rotate) {
    target.rotate = mixNumber$1(follow.rotate || 0, lead.rotate || 0, progress);
  }
}
function getRadius(values, radiusName) {
  return values[radiusName] !== undefined
    ? values[radiusName]
    : values.borderRadius;
}
// /**
//  * We only want to mix the background color if there's a follow element
//  * that we're not crossfading opacity between. For instance with switch
//  * AnimateSharedLayout animations, this helps the illusion of a continuous
//  * element being animated but also cuts down on the number of paints triggered
//  * for elements where opacity is doing that work for us.
//  */
// if (
//     !hasFollowElement &&
//     latestLeadValues.backgroundColor &&
//     latestFollowValues.backgroundColor
// ) {
//     /**
//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.
//      * We could probably create a mixer that runs at the start of the animation but
//      * the idea behind the crossfader is that it runs dynamically between two potentially
//      * changing targets (ie opacity or borderRadius may be animating independently via variants)
//      */
//     leadState.backgroundColor = followState.backgroundColor = mixColor(
//         latestFollowValues.backgroundColor as string,
//         latestLeadValues.backgroundColor as string
//     )(p)
// }
const easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);
const easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop$1);
function compress(min, max, easing) {
  return (p) => {
    // Could replace ifs with clamp
    if (p < min) return 0;
    if (p > max) return 1;
    return easing(progress(min, max, p));
  };
}

/**
 * Reset an axis to the provided origin box.
 *
 * This is a mutative operation.
 */
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
/**
 * Reset a box to the provided origin box.
 *
 * This is a mutative operation.
 */
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x);
  copyAxisInto(box.y, originBox.y);
}
/**
 * Reset a delta to the provided origin box.
 *
 * This is a mutative operation.
 */
function copyAxisDeltaInto(delta, originDelta) {
  delta.translate = originDelta.translate;
  delta.scale = originDelta.scale;
  delta.originPoint = originDelta.originPoint;
  delta.origin = originDelta.origin;
}

/**
 * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse
 */
function removePointDelta(point, translate, scale, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale, originPoint);
  if (boxScale !== undefined) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
/**
 * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse
 */
function removeAxisDelta(
  axis,
  translate = 0,
  scale = 1,
  origin = 0.5,
  boxScale,
  originAxis = axis,
  sourceAxis = axis
) {
  if (percent.test(translate)) {
    translate = parseFloat(translate);
    const relativeProgress = mixNumber$1(
      sourceAxis.min,
      sourceAxis.max,
      translate / 100
    );
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== "number") return;
  let originPoint = mixNumber$1(originAxis.min, originAxis.max, origin);
  if (axis === originAxis) originPoint -= translate;
  axis.min = removePointDelta(
    axis.min,
    translate,
    scale,
    originPoint,
    boxScale
  );
  axis.max = removePointDelta(
    axis.max,
    translate,
    scale,
    originPoint,
    boxScale
  );
}
/**
 * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse
 * and acts as a bridge between motion values and removeAxisDelta
 */
function removeAxisTransforms(
  axis,
  transforms,
  [key, scaleKey, originKey],
  origin,
  sourceAxis
) {
  removeAxisDelta(
    axis,
    transforms[key],
    transforms[scaleKey],
    transforms[originKey],
    transforms.scale,
    origin,
    sourceAxis
  );
}
/**
 * The names of the motion values we want to apply as translation, scale and origin.
 */
const xKeys = ["x", "scaleX", "originX"];
const yKeys = ["y", "scaleY", "originY"];
/**
 * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse
 * and acts as a bridge between motion values and removeAxisDelta
 */
function removeBoxTransforms(box, transforms, originBox, sourceBox) {
  removeAxisTransforms(
    box.x,
    transforms,
    xKeys,
    originBox ? originBox.x : undefined,
    sourceBox ? sourceBox.x : undefined
  );
  removeAxisTransforms(
    box.y,
    transforms,
    yKeys,
    originBox ? originBox.y : undefined,
    sourceBox ? sourceBox.y : undefined
  );
}

function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function axisEquals(a, b) {
  return a.min === b.min && a.max === b.max;
}
function boxEquals(a, b) {
  return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);
}
function axisEqualsRounded(a, b) {
  return (
    Math.round(a.min) === Math.round(b.min) &&
    Math.round(a.max) === Math.round(b.max)
  );
}
function boxEqualsRounded(a, b) {
  return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);
}
function aspectRatio(box) {
  return calcLength(box.x) / calcLength(box.y);
}
function axisDeltaEquals(a, b) {
  return (
    a.translate === b.translate &&
    a.scale === b.scale &&
    a.originPoint === b.originPoint
  );
}

class NodeStack {
  constructor() {
    this.members = [];
  }
  add(node) {
    addUniqueItem(this.members, node);
    node.scheduleRender();
  }
  remove(node) {
    removeItem(this.members, node);
    if (node === this.prevLead) {
      this.prevLead = undefined;
    }
    if (node === this.lead) {
      const prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  }
  relegate(node) {
    const indexOfNode = this.members.findIndex((member) => node === member);
    if (indexOfNode === 0) return false;
    /**
     * Find the next projection node that is present
     */
    let prevLead;
    for (let i = indexOfNode; i >= 0; i--) {
      const member = this.members[i];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  }
  promote(node, preserveFollowOpacity) {
    const prevLead = this.lead;
    if (node === prevLead) return;
    this.prevLead = prevLead;
    this.lead = node;
    node.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node.scheduleRender();
      node.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node.snapshot = prevLead.snapshot;
        node.snapshot.latestValues =
          prevLead.animationValues || prevLead.latestValues;
      }
      if (node.root && node.root.isUpdating) {
        node.isLayoutDirty = true;
      }
      const { crossfade } = node.options;
      if (crossfade === false) {
        prevLead.hide();
      }
      /**
       * TODO:
       *   - Test border radius when previous node was deleted
       *   - boxShadow mixing
       *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)
       *   - Shared between element A in transformed container and element B (transform stays the same or changes)
       *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)
       * ---
       *   - Crossfade opacity of root nodes
       *   - layoutId changes after animation
       *   - layoutId changes mid animation
       */
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node) => {
      const { options, resumingFrom } = node;
      options.onExitComplete && options.onExitComplete();
      if (resumingFrom) {
        resumingFrom.options.onExitComplete &&
          resumingFrom.options.onExitComplete();
      }
    });
  }
  scheduleRender() {
    this.members.forEach((node) => {
      node.instance && node.scheduleRender(false);
    });
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = undefined;
    }
  }
}

function buildProjectionTransform(delta, treeScale, latestTransform) {
  let transform = "";
  /**
   * The translations we use to calculate are always relative to the viewport coordinate space.
   * But when we apply scales, we also scale the coordinate space of an element and its children.
   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need
   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.
   */
  const xTranslate = delta.x.translate / treeScale.x;
  const yTranslate = delta.y.translate / treeScale.y;
  const zTranslate = latestTransform?.z || 0;
  if (xTranslate || yTranslate || zTranslate) {
    transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;
  }
  /**
   * Apply scale correction for the tree transform.
   * This will apply scale to the screen-orientated axes.
   */
  if (treeScale.x !== 1 || treeScale.y !== 1) {
    transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
  }
  if (latestTransform) {
    const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } =
      latestTransform;
    if (transformPerspective)
      transform = `perspective(${transformPerspective}px) ${transform}`;
    if (rotate) transform += `rotate(${rotate}deg) `;
    if (rotateX) transform += `rotateX(${rotateX}deg) `;
    if (rotateY) transform += `rotateY(${rotateY}deg) `;
    if (skewX) transform += `skewX(${skewX}deg) `;
    if (skewY) transform += `skewY(${skewY}deg) `;
  }
  /**
   * Apply scale to match the size of the element to the size we want it.
   * This will apply scale to the element-orientated axes.
   */
  const elementScaleX = delta.x.scale * treeScale.x;
  const elementScaleY = delta.y.scale * treeScale.y;
  if (elementScaleX !== 1 || elementScaleY !== 1) {
    transform += `scale(${elementScaleX}, ${elementScaleY})`;
  }
  return transform || "none";
}

const transformAxes = ["", "X", "Y", "Z"];
/**
 * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1
 * which has a noticeable difference in spring animations
 */
const animationTarget = 1000;
let id = 0;
function resetDistortingTransform(
  key,
  visualElement,
  values,
  sharedAnimationValues
) {
  const { latestValues } = visualElement;
  // Record the distorting transform and then temporarily set it to 0
  if (latestValues[key]) {
    values[key] = latestValues[key];
    visualElement.setStaticValue(key, 0);
    if (sharedAnimationValues) {
      sharedAnimationValues[key] = 0;
    }
  }
}
function cancelTreeOptimisedTransformAnimations(projectionNode) {
  projectionNode.hasCheckedOptimisedAppear = true;
  if (projectionNode.root === projectionNode) return;
  const { visualElement } = projectionNode.options;
  if (!visualElement) return;
  const appearId = getOptimisedAppearId(visualElement);
  if (window.MotionHasOptimisedAnimation(appearId, "transform")) {
    const { layout, layoutId } = projectionNode.options;
    window.MotionCancelOptimisedAnimation(
      appearId,
      "transform",
      frame,
      !(layout || layoutId)
    );
  }
  const { parent } = projectionNode;
  if (parent && !parent.hasCheckedOptimisedAppear) {
    cancelTreeOptimisedTransformAnimations(parent);
  }
}
function createProjectionNode({
  attachResizeListener,
  defaultParent,
  measureScroll,
  checkIsScrollRoot,
  resetTransform,
}) {
  return class ProjectionNode {
    constructor(latestValues = {}, parent = defaultParent?.()) {
      /**
       * A unique ID generated for every projection node.
       */
      this.id = id++;
      /**
       * An id that represents a unique session instigated by startUpdate.
       */
      this.animationId = 0;
      this.animationCommitId = 0;
      /**
       * A Set containing all this component's children. This is used to iterate
       * through the children.
       *
       * TODO: This could be faster to iterate as a flat array stored on the root node.
       */
      this.children = new Set();
      /**
       * Options for the node. We use this to configure what kind of layout animations
       * we should perform (if any).
       */
      this.options = {};
      /**
       * We use this to detect when its safe to shut down part of a projection tree.
       * We have to keep projecting children for scale correction and relative projection
       * until all their parents stop performing layout animations.
       */
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      /**
       * Flag to true if we think this layout has been changed. We can't always know this,
       * currently we set it to true every time a component renders, or if it has a layoutDependency
       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup
       * and if one node is dirtied, they all are.
       */
      this.isLayoutDirty = false;
      /**
       * Flag to true if we think the projection calculations for this node needs
       * recalculating as a result of an updated transform or layout animation.
       */
      this.isProjectionDirty = false;
      /**
       * Flag to true if the layout *or* transform has changed. This then gets propagated
       * throughout the projection tree, forcing any element below to recalculate on the next frame.
       */
      this.isSharedProjectionDirty = false;
      /**
       * Flag transform dirty. This gets propagated throughout the whole tree but is only
       * respected by shared nodes.
       */
      this.isTransformDirty = false;
      /**
       * Block layout updates for instant layout transitions throughout the tree.
       */
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      /**
       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`
       * call.
       */
      this.isUpdating = false;
      /**
       * If this is an SVG element we currently disable projection transforms
       */
      this.isSVG = false;
      /**
       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset
       * its projection styles.
       */
      this.needsReset = false;
      /**
       * Flags whether this node should have its transform reset prior to measuring.
       */
      this.shouldResetTransform = false;
      /**
       * Store whether this node has been checked for optimised appear animations. As
       * effects fire bottom-up, and we want to look up the tree for appear animations,
       * this makes sure we only check each path once, stopping at nodes that
       * have already been checked.
       */
      this.hasCheckedOptimisedAppear = false;
      /**
       * An object representing the calculated contextual/accumulated/tree scale.
       * This will be used to scale calculcated projection transforms, as these are
       * calculated in screen-space but need to be scaled for elements to layoutly
       * make it to their calculated destinations.
       *
       * TODO: Lazy-init
       */
      this.treeScale = { x: 1, y: 1 };
      /**
       *
       */
      this.eventHandlers = new Map();
      this.hasTreeAnimated = false;
      // Note: Currently only running on root node
      this.updateScheduled = false;
      this.scheduleUpdate = () => this.update();
      this.projectionUpdateScheduled = false;
      this.checkUpdateFailed = () => {
        if (this.isUpdating) {
          this.isUpdating = false;
          this.clearAllSnapshots();
        }
      };
      /**
       * This is a multi-step process as shared nodes might be of different depths. Nodes
       * are sorted by depth order, so we need to resolve the entire tree before moving to
       * the next step.
       */
      this.updateProjection = () => {
        this.projectionUpdateScheduled = false;
        this.nodes.forEach(propagateDirtyNodes);
        this.nodes.forEach(resolveTargetDelta);
        this.nodes.forEach(calcProjection);
        this.nodes.forEach(cleanDirtyNodes);
      };
      /**
       * Frame calculations
       */
      this.resolvedRelativeTargetAt = 0.0;
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      /**
       * Shared layout
       */
      // TODO Only running on root node
      this.sharedNodes = new Map();
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? [...parent.path, parent] : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      for (let i = 0; i < this.path.length; i++) {
        this.path[i].shouldResetTransform = true;
      }
      if (this.root === this) this.nodes = new FlatTree();
    }
    addEventListener(name, handler) {
      if (!this.eventHandlers.has(name)) {
        this.eventHandlers.set(name, new SubscriptionManager());
      }
      return this.eventHandlers.get(name).add(handler);
    }
    notifyListeners(name, ...args) {
      const subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager && subscriptionManager.notify(...args);
    }
    hasListeners(name) {
      return this.eventHandlers.has(name);
    }
    /**
     * Lifecycles
     */
    mount(instance) {
      if (this.instance) return;
      this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);
      this.instance = instance;
      const { layoutId, layout, visualElement } = this.options;
      if (visualElement && !visualElement.current) {
        visualElement.mount(instance);
      }
      this.root.nodes.add(this);
      this.parent && this.parent.children.add(this);
      if (this.root.hasTreeAnimated && (layout || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        let cancelDelay;
        let innerWidth = 0;
        const resizeUnblockUpdate = () =>
          (this.root.updateBlockedByResize = false);
        // Set initial innerWidth in a frame.read callback to batch the read
        frame.read(() => {
          innerWidth = window.innerWidth;
        });
        attachResizeListener(instance, () => {
          const newInnerWidth = window.innerWidth;
          if (newInnerWidth === innerWidth) return;
          innerWidth = newInnerWidth;
          this.root.updateBlockedByResize = true;
          cancelDelay && cancelDelay();
          cancelDelay = delay(resizeUnblockUpdate, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this);
      }
      // Only register the handler if it requires layout animation
      if (
        this.options.animate !== false &&
        visualElement &&
        (layoutId || layout)
      ) {
        this.addEventListener(
          "didUpdate",
          ({
            delta,
            hasLayoutChanged,
            hasRelativeLayoutChanged,
            layout: newLayout,
          }) => {
            if (this.isTreeAnimationBlocked()) {
              this.target = undefined;
              this.relativeTarget = undefined;
              return;
            }
            // TODO: Check here if an animation exists
            const layoutTransition =
              this.options.transition ||
              visualElement.getDefaultTransition() ||
              defaultLayoutTransition;
            const { onLayoutAnimationStart, onLayoutAnimationComplete } =
              visualElement.getProps();
            /**
             * The target layout of the element might stay the same,
             * but its position relative to its parent has changed.
             */
            const hasTargetChanged =
              !this.targetLayout ||
              !boxEqualsRounded(this.targetLayout, newLayout);
            /*
             * Note: Disabled to fix relative animations always triggering new
             * layout animations. If this causes further issues, we can try
             * a different approach to detecting relative target changes.
             */
            // || hasRelativeLayoutChanged
            /**
             * If the layout hasn't seemed to have changed, it might be that the
             * element is visually in the same place in the document but its position
             * relative to its parent has indeed changed. So here we check for that.
             */
            const hasOnlyRelativeTargetChanged =
              !hasLayoutChanged && hasRelativeLayoutChanged;
            if (
              this.options.layoutRoot ||
              this.resumeFrom ||
              hasOnlyRelativeTargetChanged ||
              (hasLayoutChanged && (hasTargetChanged || !this.currentAnimation))
            ) {
              if (this.resumeFrom) {
                this.resumingFrom = this.resumeFrom;
                this.resumingFrom.resumingFrom = undefined;
              }
              const animationOptions = {
                ...getValueTransition(layoutTransition, "layout"),
                onPlay: onLayoutAnimationStart,
                onComplete: onLayoutAnimationComplete,
              };
              if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
                animationOptions.delay = 0;
                animationOptions.type = false;
              }
              this.startAnimation(animationOptions);
              /**
               * Set animation origin after starting animation to avoid layout jump
               * caused by stopping previous layout animation
               */
              this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
            } else {
              /**
               * If the layout hasn't changed and we have an animation that hasn't started yet,
               * finish it immediately. Otherwise it will be animating from a location
               * that was probably never commited to screen and look like a jumpy box.
               */
              if (!hasLayoutChanged) {
                finishAnimation(this);
              }
              if (this.isLead() && this.options.onExitComplete) {
                this.options.onExitComplete();
              }
            }
            this.targetLayout = newLayout;
          }
        );
      }
    }
    unmount() {
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      const stack = this.getStack();
      stack && stack.remove(this);
      this.parent && this.parent.children.delete(this);
      this.instance = undefined;
      this.eventHandlers.clear();
      cancelFrame(this.updateProjection);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return (
        this.isAnimationBlocked ||
        (this.parent && this.parent.isTreeAnimationBlocked()) ||
        false
      );
    }
    // Note: currently only running on root node
    startUpdate() {
      if (this.isUpdateBlocked()) return;
      this.isUpdating = true;
      this.nodes && this.nodes.forEach(resetSkewAndRotation);
      this.animationId++;
    }
    getTransformTemplate() {
      const { visualElement } = this.options;
      return visualElement && visualElement.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = true) {
      this.root.hasTreeAnimated = true;
      if (this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      /**
       * If we're running optimised appear animations then these must be
       * cancelled before measuring the DOM. This is so we can measure
       * the true layout of the element rather than the WAAPI animation
       * which will be unaffected by the resetSkewAndRotate step.
       *
       * Note: This is a DOM write. Worst case scenario is this is sandwiched
       * between other snapshot reads which will cause unnecessary style recalculations.
       * This has to happen here though, as we don't yet know which nodes will need
       * snapshots in startUpdate(), but we only want to cancel optimised animations
       * if a layout animation measurement is actually going to be affected by them.
       */
      if (
        window.MotionCancelOptimisedAnimation &&
        !this.hasCheckedOptimisedAppear
      ) {
        cancelTreeOptimisedTransformAnimations(this);
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty) return;
      this.isLayoutDirty = true;
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        node.shouldResetTransform = true;
        node.updateScroll("snapshot");
        if (node.options.layoutRoot) {
          node.willUpdate(false);
        }
      }
      const { layoutId, layout } = this.options;
      if (layoutId === undefined && !layout) return;
      const transformTemplate = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate
        ? transformTemplate(this.latestValues, "")
        : undefined;
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    }
    update() {
      this.updateScheduled = false;
      const updateWasBlocked = this.isUpdateBlocked();
      // When doing an instant transition, we skip the layout update,
      // but should still clean up the measurements so that the next
      // snapshot could be taken correctly.
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      /**
       * If this is a repeat of didUpdate then ignore the animation.
       */
      if (this.animationId <= this.animationCommitId) {
        this.nodes.forEach(clearIsLayoutDirty);
        return;
      }
      this.animationCommitId = this.animationId;
      if (!this.isUpdating) {
        this.nodes.forEach(clearIsLayoutDirty);
      } else {
        this.isUpdating = false;
        /**
         * Write
         */
        this.nodes.forEach(resetTransformStyle);
        /**
         * Read ==================
         */
        // Update layout measurements of updated children
        this.nodes.forEach(updateLayout);
        /**
         * Write
         */
        // Notify listeners that the layout is updated
        this.nodes.forEach(notifyLayoutUpdate);
      }
      this.clearAllSnapshots();
      /**
       * Manually flush any pending updates. Ideally
       * we could leave this to the following requestAnimationFrame but this seems
       * to leave a flash of incorrectly styled content.
       */
      const now = time.now();
      frameData.delta = clamp$1(0, 1000 / 60, now - frameData.timestamp);
      frameData.timestamp = now;
      frameData.isProcessing = true;
      frameSteps.update.process(frameData);
      frameSteps.preRender.process(frameData);
      frameSteps.render.process(frameData);
      frameData.isProcessing = false;
    }
    didUpdate() {
      if (!this.updateScheduled) {
        this.updateScheduled = true;
        microtask.read(this.scheduleUpdate);
      }
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    }
    scheduleUpdateProjection() {
      if (!this.projectionUpdateScheduled) {
        this.projectionUpdateScheduled = true;
        frame.preRender(this.updateProjection, false, true);
      }
    }
    scheduleCheckAfterUnmount() {
      /**
       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,
       * we manually call didUpdate to give a chance to the siblings to animate.
       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.
       */
      frame.postRender(() => {
        if (this.isLayoutDirty) {
          this.root.didUpdate();
        } else {
          this.root.checkUpdateFailed();
        }
      });
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      if (this.snapshot || !this.instance) return;
      this.snapshot = this.measure();
      if (
        this.snapshot &&
        !calcLength(this.snapshot.measuredBox.x) &&
        !calcLength(this.snapshot.measuredBox.y)
      ) {
        this.snapshot = undefined;
      }
    }
    updateLayout() {
      if (!this.instance) return;
      this.updateScroll();
      if (
        !(this.options.alwaysMeasureLayout && this.isLead()) &&
        !this.isLayoutDirty
      ) {
        return;
      }
      /**
       * When a node is mounted, it simply resumes from the prevLead's
       * snapshot instead of taking a new one, but the ancestors scroll
       * might have updated while the prevLead is unmounted. We need to
       * update the scroll again to make sure the layout we measure is
       * up to date.
       */
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (let i = 0; i < this.path.length; i++) {
          const node = this.path[i];
          node.updateScroll();
        }
      }
      const prevLayout = this.layout;
      this.layout = this.measure(false);
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = undefined;
      this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement } = this.options;
      visualElement &&
        visualElement.notify(
          "LayoutMeasure",
          this.layout.layoutBox,
          prevLayout ? prevLayout.layoutBox : undefined
        );
    }
    updateScroll(phase = "measure") {
      let needsMeasurement = Boolean(
        this.options.layoutScroll && this.instance
      );
      if (
        this.scroll &&
        this.scroll.animationId === this.root.animationId &&
        this.scroll.phase === phase
      ) {
        needsMeasurement = false;
      }
      if (needsMeasurement && this.instance) {
        const isRoot = checkIsScrollRoot(this.instance);
        this.scroll = {
          animationId: this.root.animationId,
          phase,
          isRoot,
          offset: measureScroll(this.instance),
          wasRoot: this.scroll ? this.scroll.isRoot : isRoot,
        };
      }
    }
    resetTransform() {
      if (!resetTransform) return;
      const isResetRequested =
        this.isLayoutDirty ||
        this.shouldResetTransform ||
        this.options.alwaysMeasureLayout;
      const hasProjection =
        this.projectionDelta && !isDeltaZero(this.projectionDelta);
      const transformTemplate = this.getTransformTemplate();
      const transformTemplateValue = transformTemplate
        ? transformTemplate(this.latestValues, "")
        : undefined;
      const transformTemplateHasChanged =
        transformTemplateValue !== this.prevTransformTemplateValue;
      if (
        isResetRequested &&
        this.instance &&
        (hasProjection ||
          hasTransform(this.latestValues) ||
          transformTemplateHasChanged)
      ) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    }
    measure(removeTransform = true) {
      const pageBox = this.measurePageBox();
      let layoutBox = this.removeElementScroll(pageBox);
      /**
       * Measurements taken during the pre-render stage
       * still have transforms applied so we remove them
       * via calculation.
       */
      if (removeTransform) {
        layoutBox = this.removeTransform(layoutBox);
      }
      roundBox(layoutBox);
      return {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id,
      };
    }
    measurePageBox() {
      const { visualElement } = this.options;
      if (!visualElement) return createBox();
      const box = visualElement.measureViewportBox();
      const wasInScrollRoot =
        this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);
      if (!wasInScrollRoot) {
        // Remove viewport scroll to give page-relative coordinates
        const { scroll } = this.root;
        if (scroll) {
          translateAxis(box.x, scroll.offset.x);
          translateAxis(box.y, scroll.offset.y);
        }
      }
      return box;
    }
    removeElementScroll(box) {
      const boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      if (this.scroll?.wasRoot) {
        return boxWithoutScroll;
      }
      /**
       * Performance TODO: Keep a cumulative scroll offset down the tree
       * rather than loop back up the path.
       */
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        const { scroll, options } = node;
        if (node !== this.root && scroll && options.layoutScroll) {
          /**
           * If this is a new scroll root, we want to remove all previous scrolls
           * from the viewport box.
           */
          if (scroll.wasRoot) {
            copyBoxInto(boxWithoutScroll, box);
          }
          translateAxis(boxWithoutScroll.x, scroll.offset.x);
          translateAxis(boxWithoutScroll.y, scroll.offset.y);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = false) {
      const withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        if (
          !transformOnly &&
          node.options.layoutScroll &&
          node.scroll &&
          node !== node.root
        ) {
          transformBox(withTransforms, {
            x: -node.scroll.offset.x,
            y: -node.scroll.offset.y,
          });
        }
        if (!hasTransform(node.latestValues)) continue;
        transformBox(withTransforms, node.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    }
    removeTransform(box) {
      const boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        if (!node.instance) continue;
        if (!hasTransform(node.latestValues)) continue;
        hasScale(node.latestValues) && node.updateSnapshot();
        const sourceBox = createBox();
        const nodeBox = node.measurePageBox();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(
          boxWithoutTransform,
          node.latestValues,
          node.snapshot ? node.snapshot.layoutBox : undefined,
          sourceBox
        );
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    }
    setTargetDelta(delta) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
      this.isProjectionDirty = true;
    }
    setOptions(options) {
      this.options = {
        ...this.options,
        ...options,
        crossfade: options.crossfade !== undefined ? options.crossfade : true,
      };
    }
    clearMeasurements() {
      this.scroll = undefined;
      this.layout = undefined;
      this.snapshot = undefined;
      this.prevTransformTemplateValue = undefined;
      this.targetDelta = undefined;
      this.target = undefined;
      this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      if (!this.relativeParent) return;
      /**
       * If the parent target isn't up-to-date, force it to update.
       * This is an unfortunate de-optimisation as it means any updating relative
       * projection will cause all the relative parents to recalculate back
       * up the tree.
       */
      if (
        this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp
      ) {
        this.relativeParent.resolveTargetDelta(true);
      }
    }
    resolveTargetDelta(forceRecalculation = false) {
      /**
       * Once the dirty status of nodes has been spread through the tree, we also
       * need to check if we have a shared node of a different depth that has itself
       * been dirtied.
       */
      const lead = this.getLead();
      this.isProjectionDirty ||
        (this.isProjectionDirty = lead.isProjectionDirty);
      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
      this.isSharedProjectionDirty ||
        (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      /**
       * We don't use transform for this step of processing so we don't
       * need to check whether any nodes have changed transform.
       */
      const canSkip = !(
        forceRecalculation ||
        (isShared && this.isSharedProjectionDirty) ||
        this.isProjectionDirty ||
        this.parent?.isProjectionDirty ||
        this.attemptToResolveRelativeTarget ||
        this.root.updateBlockedByResize
      );
      if (canSkip) return;
      const { layout, layoutId } = this.options;
      /**
       * If we have no layout, we can't perform projection, so early return
       */
      if (!this.layout || !(layout || layoutId)) return;
      this.resolvedRelativeTargetAt = frameData.timestamp;
      /**
       * If we don't have a targetDelta but do have a layout, we can attempt to resolve
       * a relativeParent. This will allow a component to perform scale correction
       * even if no animation has started.
       */
      if (!this.targetDelta && !this.relativeTarget) {
        const relativeParent = this.getClosestProjectingParent();
        if (
          relativeParent &&
          relativeParent.layout &&
          this.animationProgress !== 1
        ) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(
            this.relativeTargetOrigin,
            this.layout.layoutBox,
            relativeParent.layout.layoutBox
          );
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = undefined;
        }
      }
      /**
       * If we have no relative target or no target delta our target isn't valid
       * for this frame.
       */
      if (!this.relativeTarget && !this.targetDelta) return;
      /**
       * Lazy-init target data structure
       */
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      /**
       * If we've got a relative box for this component, resolve it into a target relative to the parent.
       */
      if (
        this.relativeTarget &&
        this.relativeTargetOrigin &&
        this.relativeParent &&
        this.relativeParent.target
      ) {
        this.forceRelativeParentToResolveTarget();
        calcRelativeBox(
          this.target,
          this.relativeTarget,
          this.relativeParent.target
        );
        /**
         * If we've only got a targetDelta, resolve it into a target
         */
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          // TODO: This is creating a new object every frame
          this.target = this.applyTransform(this.layout.layoutBox);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        /**
         * If no target, use own layout as target
         */
        copyBoxInto(this.target, this.layout.layoutBox);
      }
      /**
       * If we've been told to attempt to resolve a relative target, do so.
       */
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        const relativeParent = this.getClosestProjectingParent();
        if (
          relativeParent &&
          Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) &&
          !relativeParent.options.layoutScroll &&
          relativeParent.target &&
          this.animationProgress !== 1
        ) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(
            this.relativeTargetOrigin,
            this.target,
            relativeParent.target
          );
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = undefined;
        }
      }
    }
    getClosestProjectingParent() {
      if (
        !this.parent ||
        hasScale(this.parent.latestValues) ||
        has2DTranslate(this.parent.latestValues)
      ) {
        return undefined;
      }
      if (this.parent.isProjecting()) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    }
    isProjecting() {
      return Boolean(
        (this.relativeTarget || this.targetDelta || this.options.layoutRoot) &&
          this.layout
      );
    }
    calcProjection() {
      const lead = this.getLead();
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      let canSkip = true;
      /**
       * If this is a normal layout animation and neither this node nor its nearest projecting
       * is dirty then we can't skip.
       */
      if (this.isProjectionDirty || this.parent?.isProjectionDirty) {
        canSkip = false;
      }
      /**
       * If this is a shared layout animation and this node's shared projection is dirty then
       * we can't skip.
       */
      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
        canSkip = false;
      }
      /**
       * If we have resolved the target this frame we must recalculate the
       * projection to ensure it visually represents the internal calculations.
       */
      if (this.resolvedRelativeTargetAt === frameData.timestamp) {
        canSkip = false;
      }
      if (canSkip) return;
      const { layout, layoutId } = this.options;
      /**
       * If this section of the tree isn't animating we can
       * delete our target sources for the following frame.
       */
      this.isTreeAnimating = Boolean(
        (this.parent && this.parent.isTreeAnimating) ||
          this.currentAnimation ||
          this.pendingAnimation
      );
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = undefined;
      }
      if (!this.layout || !(layout || layoutId)) return;
      /**
       * Reset the corrected box with the latest values from box, as we're then going
       * to perform mutative operations on it.
       */
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
      /**
       * Record previous tree scales before updating.
       */
      const prevTreeScaleX = this.treeScale.x;
      const prevTreeScaleY = this.treeScale.y;
      /**
       * Apply all the parent deltas to this box to produce the corrected box. This
       * is the layout box, as it will appear on screen as a result of the transforms of its parents.
       */
      applyTreeDeltas(
        this.layoutCorrected,
        this.treeScale,
        this.path,
        isShared
      );
      /**
       * If this layer needs to perform scale correction but doesn't have a target,
       * use the layout as the target.
       */
      if (
        lead.layout &&
        !lead.target &&
        (this.treeScale.x !== 1 || this.treeScale.y !== 1)
      ) {
        lead.target = lead.layout.layoutBox;
        lead.targetWithTransforms = createBox();
      }
      const { target } = lead;
      if (!target) {
        /**
         * If we don't have a target to project into, but we were previously
         * projecting, we want to remove the stored transform and schedule
         * a render to ensure the elements reflect the removed transform.
         */
        if (this.prevProjectionDelta) {
          this.createProjectionDeltas();
          this.scheduleRender();
        }
        return;
      }
      if (!this.projectionDelta || !this.prevProjectionDelta) {
        this.createProjectionDeltas();
      } else {
        copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);
        copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);
      }
      /**
       * Update the delta between the corrected box and the target box before user-set transforms were applied.
       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate
       * for our layout reprojection, but still allow them to be scaled correctly by the user.
       * It might be that to simplify this we may want to accept that user-set scale is also corrected
       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting
       * to allow people to choose whether these styles are corrected based on just the
       * layout reprojection or the final bounding box.
       */
      calcBoxDelta(
        this.projectionDelta,
        this.layoutCorrected,
        target,
        this.latestValues
      );
      if (
        this.treeScale.x !== prevTreeScaleX ||
        this.treeScale.y !== prevTreeScaleY ||
        !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||
        !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)
      ) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target);
      }
    }
    hide() {
      this.isVisible = false;
      // TODO: Schedule render
    }
    show() {
      this.isVisible = true;
      // TODO: Schedule render
    }
    scheduleRender(notifyAll = true) {
      this.options.visualElement?.scheduleRender();
      if (notifyAll) {
        const stack = this.getStack();
        stack && stack.scheduleRender();
      }
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = undefined;
      }
    }
    createProjectionDeltas() {
      this.prevProjectionDelta = createDelta();
      this.projectionDelta = createDelta();
      this.projectionDeltaWithTransform = createDelta();
    }
    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
      const snapshot = this.snapshot;
      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
      const mixedValues = { ...this.latestValues };
      const targetDelta = createDelta();
      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
        this.relativeTarget = this.relativeTargetOrigin = undefined;
      }
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      const relativeLayout = createBox();
      const snapshotSource = snapshot ? snapshot.source : undefined;
      const layoutSource = this.layout ? this.layout.source : undefined;
      const isSharedLayoutAnimation = snapshotSource !== layoutSource;
      const stack = this.getStack();
      const isOnlyMember = !stack || stack.members.length <= 1;
      const shouldCrossfadeOpacity = Boolean(
        isSharedLayoutAnimation &&
          !isOnlyMember &&
          this.options.crossfade === true &&
          !this.path.some(hasOpacityCrossfade)
      );
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        const progress = latest / 1000;
        mixAxisDelta(targetDelta.x, delta.x, progress);
        mixAxisDelta(targetDelta.y, delta.y, progress);
        this.setTargetDelta(targetDelta);
        if (
          this.relativeTarget &&
          this.relativeTargetOrigin &&
          this.layout &&
          this.relativeParent &&
          this.relativeParent.layout
        ) {
          calcRelativePosition(
            relativeLayout,
            this.layout.layoutBox,
            this.relativeParent.layout.layoutBox
          );
          mixBox(
            this.relativeTarget,
            this.relativeTargetOrigin,
            relativeLayout,
            progress
          );
          /**
           * If this is an unchanged relative target we can consider the
           * projection not dirty.
           */
          if (
            prevRelativeTarget &&
            boxEquals(this.relativeTarget, prevRelativeTarget)
          ) {
            this.isProjectionDirty = false;
          }
          if (!prevRelativeTarget) prevRelativeTarget = createBox();
          copyBoxInto(prevRelativeTarget, this.relativeTarget);
        }
        if (isSharedLayoutAnimation) {
          this.animationValues = mixedValues;
          mixValues(
            mixedValues,
            snapshotLatestValues,
            this.latestValues,
            progress,
            shouldCrossfadeOpacity,
            isOnlyMember
          );
        }
        this.root.scheduleUpdateProjection();
        this.scheduleRender();
        this.animationProgress = progress;
      };
      this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);
    }
    startAnimation(options) {
      this.notifyListeners("animationStart");
      this.currentAnimation?.stop();
      this.resumingFrom?.currentAnimation?.stop();
      if (this.pendingAnimation) {
        cancelFrame(this.pendingAnimation);
        this.pendingAnimation = undefined;
      }
      /**
       * Start the animation in the next frame to have a frame with progress 0,
       * where the target is the same as when the animation started, so we can
       * calculate the relative positions correctly for instant transitions.
       */
      this.pendingAnimation = frame.update(() => {
        globalProjectionState.hasAnimatedSinceResize = true;
        this.motionValue || (this.motionValue = motionValue(0));
        this.currentAnimation = animateSingleValue(
          this.motionValue,
          [0, 1000],
          {
            ...options,
            velocity: 0,
            isSync: true,
            onUpdate: (latest) => {
              this.mixTargetDelta(latest);
              options.onUpdate && options.onUpdate(latest);
            },
            onStop: () => {},
            onComplete: () => {
              options.onComplete && options.onComplete();
              this.completeAnimation();
            },
          }
        );
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = this.currentAnimation;
        }
        this.pendingAnimation = undefined;
      });
    }
    completeAnimation() {
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = undefined;
        this.resumingFrom.preserveOpacity = undefined;
      }
      const stack = this.getStack();
      stack && stack.exitAnimationComplete();
      this.resumingFrom =
        this.currentAnimation =
        this.animationValues =
          undefined;
      this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      if (this.currentAnimation) {
        this.mixTargetDelta && this.mixTargetDelta(animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    }
    applyTransformsToTarget() {
      const lead = this.getLead();
      let { targetWithTransforms, target, layout, latestValues } = lead;
      if (!targetWithTransforms || !target || !layout) return;
      /**
       * If we're only animating position, and this element isn't the lead element,
       * then instead of projecting into the lead box we instead want to calculate
       * a new target that aligns the two boxes but maintains the layout shape.
       */
      if (
        this !== lead &&
        this.layout &&
        layout &&
        shouldAnimatePositionOnly(
          this.options.animationType,
          this.layout.layoutBox,
          layout.layoutBox
        )
      ) {
        target = this.target || createBox();
        const xLength = calcLength(this.layout.layoutBox.x);
        target.x.min = lead.target.x.min;
        target.x.max = target.x.min + xLength;
        const yLength = calcLength(this.layout.layoutBox.y);
        target.y.min = lead.target.y.min;
        target.y.max = target.y.min + yLength;
      }
      copyBoxInto(targetWithTransforms, target);
      /**
       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.
       * This is the final box that we will then project into by calculating a transform delta and
       * applying it to the corrected box.
       */
      transformBox(targetWithTransforms, latestValues);
      /**
       * Update the delta between the corrected box and the final target box, after
       * user-set transforms are applied to it. This will be used by the renderer to
       * create a transform style that will reproject the element from its layout layout
       * into the desired bounding box.
       */
      calcBoxDelta(
        this.projectionDeltaWithTransform,
        this.layoutCorrected,
        targetWithTransforms,
        latestValues
      );
    }
    registerSharedNode(layoutId, node) {
      if (!this.sharedNodes.has(layoutId)) {
        this.sharedNodes.set(layoutId, new NodeStack());
      }
      const stack = this.sharedNodes.get(layoutId);
      stack.add(node);
      const config = node.options.initialPromotionConfig;
      node.promote({
        transition: config ? config.transition : undefined,
        preserveFollowOpacity:
          config && config.shouldPreserveFollowOpacity
            ? config.shouldPreserveFollowOpacity(node)
            : undefined,
      });
    }
    isLead() {
      const stack = this.getStack();
      return stack ? stack.lead === this : true;
    }
    getLead() {
      const { layoutId } = this.options;
      return layoutId ? this.getStack()?.lead || this : this;
    }
    getPrevLead() {
      const { layoutId } = this.options;
      return layoutId ? this.getStack()?.prevLead : undefined;
    }
    getStack() {
      const { layoutId } = this.options;
      if (layoutId) return this.root.sharedNodes.get(layoutId);
    }
    promote({ needsReset, transition, preserveFollowOpacity } = {}) {
      const stack = this.getStack();
      if (stack) stack.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = undefined;
        this.needsReset = true;
      }
      if (transition) this.setOptions({ transition });
    }
    relegate() {
      const stack = this.getStack();
      if (stack) {
        return stack.relegate(this);
      } else {
        return false;
      }
    }
    resetSkewAndRotation() {
      const { visualElement } = this.options;
      if (!visualElement) return;
      // If there's no detected skew or rotation values, we can early return without a forced render.
      let hasDistortingTransform = false;
      /**
       * An unrolled check for rotation values. Most elements don't have any rotation and
       * skipping the nested loop and new object creation is 50% faster.
       */
      const { latestValues } = visualElement;
      if (
        latestValues.z ||
        latestValues.rotate ||
        latestValues.rotateX ||
        latestValues.rotateY ||
        latestValues.rotateZ ||
        latestValues.skewX ||
        latestValues.skewY
      ) {
        hasDistortingTransform = true;
      }
      // If there's no distorting values, we don't need to do any more.
      if (!hasDistortingTransform) return;
      const resetValues = {};
      if (latestValues.z) {
        resetDistortingTransform(
          "z",
          visualElement,
          resetValues,
          this.animationValues
        );
      }
      // Check the skew and rotate value of all axes and reset to 0
      for (let i = 0; i < transformAxes.length; i++) {
        resetDistortingTransform(
          `rotate${transformAxes[i]}`,
          visualElement,
          resetValues,
          this.animationValues
        );
        resetDistortingTransform(
          `skew${transformAxes[i]}`,
          visualElement,
          resetValues,
          this.animationValues
        );
      }
      // Force a render of this element to apply the transform with all skews and rotations
      // set to 0.
      visualElement.render();
      // Put back all the values we reset
      for (const key in resetValues) {
        visualElement.setStaticValue(key, resetValues[key]);
        if (this.animationValues) {
          this.animationValues[key] = resetValues[key];
        }
      }
      // Schedule a render for the next frame. This ensures we won't visually
      // see the element with the reset rotate value applied.
      visualElement.scheduleRender();
    }
    applyProjectionStyles(
      targetStyle, // CSSStyleDeclaration - doesn't allow numbers to be assigned to properties
      styleProp
    ) {
      if (!this.instance || this.isSVG) return;
      if (!this.isVisible) {
        targetStyle.visibility = "hidden";
        return;
      }
      const transformTemplate = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = false;
        targetStyle.visibility = "";
        targetStyle.opacity = "";
        targetStyle.pointerEvents =
          resolveMotionValue(styleProp?.pointerEvents) || "";
        targetStyle.transform = transformTemplate
          ? transformTemplate(this.latestValues, "")
          : "none";
        return;
      }
      const lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        if (this.options.layoutId) {
          targetStyle.opacity =
            this.latestValues.opacity !== undefined
              ? this.latestValues.opacity
              : 1;
          targetStyle.pointerEvents =
            resolveMotionValue(styleProp?.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          targetStyle.transform = transformTemplate
            ? transformTemplate({}, "")
            : "none";
          this.hasProjected = false;
        }
        return;
      }
      targetStyle.visibility = "";
      const valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      let transform = buildProjectionTransform(
        this.projectionDeltaWithTransform,
        this.treeScale,
        valuesToRender
      );
      if (transformTemplate) {
        transform = transformTemplate(valuesToRender, transform);
      }
      targetStyle.transform = transform;
      const { x, y } = this.projectionDelta;
      targetStyle.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
      if (lead.animationValues) {
        /**
         * If the lead component is animating, assign this either the entering/leaving
         * opacity
         */
        targetStyle.opacity =
          lead === this
            ? valuesToRender.opacity ?? this.latestValues.opacity ?? 1
            : this.preserveOpacity
            ? this.latestValues.opacity
            : valuesToRender.opacityExit;
      } else {
        /**
         * Or we're not animating at all, set the lead component to its layout
         * opacity and other components to hidden.
         */
        targetStyle.opacity =
          lead === this
            ? valuesToRender.opacity !== undefined
              ? valuesToRender.opacity
              : ""
            : valuesToRender.opacityExit !== undefined
            ? valuesToRender.opacityExit
            : 0;
      }
      /**
       * Apply scale correction
       */
      for (const key in scaleCorrectors) {
        if (valuesToRender[key] === undefined) continue;
        const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];
        /**
         * Only apply scale correction to the value if we have an
         * active projection transform. Otherwise these values become
         * vulnerable to distortion if the element changes size without
         * a corresponding layout animation.
         */
        const corrected =
          transform === "none"
            ? valuesToRender[key]
            : correct(valuesToRender[key], lead);
        if (applyTo) {
          const num = applyTo.length;
          for (let i = 0; i < num; i++) {
            targetStyle[applyTo[i]] = corrected;
          }
        } else {
          // If this is a CSS variable, set it directly on the instance.
          // Replacing this function from creating styles to setting them
          // would be a good place to remove per frame object creation
          if (isCSSVariable) {
            this.options.visualElement.renderState.vars[key] = corrected;
          } else {
            targetStyle[key] = corrected;
          }
        }
      }
      /**
       * Disable pointer events on follow components. This is to ensure
       * that if a follow component covers a lead component it doesn't block
       * pointer events on the lead.
       */
      if (this.options.layoutId) {
        targetStyle.pointerEvents =
          lead === this
            ? resolveMotionValue(styleProp?.pointerEvents) || ""
            : "none";
      }
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = undefined;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((node) => node.currentAnimation?.stop());
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node) {
  node.updateLayout();
}
function notifyLayoutUpdate(node) {
  const snapshot = node.resumeFrom?.snapshot || node.snapshot;
  if (
    node.isLead() &&
    node.layout &&
    snapshot &&
    node.hasListeners("didUpdate")
  ) {
    const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;
    const { animationType } = node.options;
    const isShared = snapshot.source !== node.layout.source;
    // TODO Maybe we want to also resize the layout snapshot so we don't trigger
    // animations for instance if layout="size" and an element has only changed position
    if (animationType === "size") {
      eachAxis((axis) => {
        const axisSnapshot = isShared
          ? snapshot.measuredBox[axis]
          : snapshot.layoutBox[axis];
        const length = calcLength(axisSnapshot);
        axisSnapshot.min = layout[axis].min;
        axisSnapshot.max = axisSnapshot.min + length;
      });
    } else if (
      shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)
    ) {
      eachAxis((axis) => {
        const axisSnapshot = isShared
          ? snapshot.measuredBox[axis]
          : snapshot.layoutBox[axis];
        const length = calcLength(layout[axis]);
        axisSnapshot.max = axisSnapshot.min + length;
        /**
         * Ensure relative target gets resized and rerendererd
         */
        if (node.relativeTarget && !node.currentAnimation) {
          node.isProjectionDirty = true;
          node.relativeTarget[axis].max =
            node.relativeTarget[axis].min + length;
        }
      });
    }
    const layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);
    const visualDelta = createDelta();
    if (isShared) {
      calcBoxDelta(
        visualDelta,
        node.applyTransform(measuredLayout, true),
        snapshot.measuredBox
      );
    } else {
      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);
    }
    const hasLayoutChanged = !isDeltaZero(layoutDelta);
    let hasRelativeLayoutChanged = false;
    if (!node.resumeFrom) {
      const relativeParent = node.getClosestProjectingParent();
      /**
       * If the relativeParent is itself resuming from a different element then
       * the relative snapshot is not relavent
       */
      if (relativeParent && !relativeParent.resumeFrom) {
        const { snapshot: parentSnapshot, layout: parentLayout } =
          relativeParent;
        if (parentSnapshot && parentLayout) {
          const relativeSnapshot = createBox();
          calcRelativePosition(
            relativeSnapshot,
            snapshot.layoutBox,
            parentSnapshot.layoutBox
          );
          const relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);
          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
            hasRelativeLayoutChanged = true;
          }
          if (relativeParent.options.layoutRoot) {
            node.relativeTarget = relativeLayout;
            node.relativeTargetOrigin = relativeSnapshot;
            node.relativeParent = relativeParent;
          }
        }
      }
    }
    node.notifyListeners("didUpdate", {
      layout,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeLayoutChanged,
    });
  } else if (node.isLead()) {
    const { onExitComplete } = node.options;
    onExitComplete && onExitComplete();
  }
  /**
   * Clearing transition
   * TODO: Investigate why this transition is being passed in as {type: false } from Framer
   * and why we need it at all
   */
  node.options.transition = undefined;
}
function propagateDirtyNodes(node) {
  if (!node.parent) return;
  /**
   * If this node isn't projecting, propagate isProjectionDirty. It will have
   * no performance impact but it will allow the next child that *is* projecting
   * but *isn't* dirty to just check its parent to see if *any* ancestor needs
   * correcting.
   */
  if (!node.isProjecting()) {
    node.isProjectionDirty = node.parent.isProjectionDirty;
  }
  /**
   * Propagate isSharedProjectionDirty and isTransformDirty
   * throughout the whole tree. A future revision can take another look at
   * this but for safety we still recalcualte shared nodes.
   */
  node.isSharedProjectionDirty ||
    (node.isSharedProjectionDirty = Boolean(
      node.isProjectionDirty ||
        node.parent.isProjectionDirty ||
        node.parent.isSharedProjectionDirty
    ));
  node.isTransformDirty ||
    (node.isTransformDirty = node.parent.isTransformDirty);
}
function cleanDirtyNodes(node) {
  node.isProjectionDirty =
    node.isSharedProjectionDirty =
    node.isTransformDirty =
      false;
}
function clearSnapshot(node) {
  node.clearSnapshot();
}
function clearMeasurements(node) {
  node.clearMeasurements();
}
function clearIsLayoutDirty(node) {
  node.isLayoutDirty = false;
}
function resetTransformStyle(node) {
  const { visualElement } = node.options;
  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
    visualElement.notify("BeforeLayoutMeasure");
  }
  node.resetTransform();
}
function finishAnimation(node) {
  node.finishAnimation();
  node.targetDelta = node.relativeTarget = node.target = undefined;
  node.isProjectionDirty = true;
}
function resolveTargetDelta(node) {
  node.resolveTargetDelta();
}
function calcProjection(node) {
  node.calcProjection();
}
function resetSkewAndRotation(node) {
  node.resetSkewAndRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p) {
  output.translate = mixNumber$1(delta.translate, 0, p);
  output.scale = mixNumber$1(delta.scale, 1, p);
  output.origin = delta.origin;
  output.originPoint = delta.originPoint;
}
function mixAxis(output, from, to, p) {
  output.min = mixNumber$1(from.min, to.min, p);
  output.max = mixNumber$1(from.max, to.max, p);
}
function mixBox(output, from, to, p) {
  mixAxis(output.x, from.x, to.x, p);
  mixAxis(output.y, from.y, to.y, p);
}
function hasOpacityCrossfade(node) {
  return node.animationValues && node.animationValues.opacityExit !== undefined;
}
const defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1],
};
const userAgentContains = (string) =>
  typeof navigator !== "undefined" &&
  navigator.userAgent &&
  navigator.userAgent.toLowerCase().includes(string);
/**
 * Measured bounding boxes must be rounded in Safari and
 * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements
 * can appear to jump.
 */
const roundPoint =
  userAgentContains("applewebkit/") && !userAgentContains("chrome/")
    ? Math.round
    : noop$1;
function roundAxis(axis) {
  // Round to the nearest .5 pixels to support subpixel layouts
  axis.min = roundPoint(axis.min);
  axis.max = roundPoint(axis.max);
}
function roundBox(box) {
  roundAxis(box.x);
  roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout) {
  return (
    animationType === "position" ||
    (animationType === "preserve-aspect" &&
      !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2))
  );
}
function checkNodeWasScrollRoot(node) {
  return node !== node.root && node.scroll?.wasRoot;
}

const DocumentProjectionNode = createProjectionNode({
  attachResizeListener: (ref, notify) => addDomEvent(ref, "resize", notify),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop,
  }),
  checkIsScrollRoot: () => true,
});

const rootProjectionNode = {
  current: undefined,
};
const HTMLProjectionNode = createProjectionNode({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop,
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      const documentNode = new DocumentProjectionNode({});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value) => {
    instance.style.transform = value !== undefined ? value : "none";
  },
  checkIsScrollRoot: (instance) =>
    Boolean(window.getComputedStyle(instance).position === "fixed"),
});

const drag = {
  pan: {
    Feature: PanGesture,
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout,
  },
};

function handleHoverEvent(node, event, lifecycle) {
  const { props } = node;
  if (node.animationState && props.whileHover) {
    node.animationState.setActive("whileHover", lifecycle === "Start");
  }
  const eventName = "onHover" + lifecycle;
  const callback = props[eventName];
  if (callback) {
    frame.postRender(() => callback(event, extractEventInfo(event)));
  }
}
class HoverGesture extends Feature {
  mount() {
    const { current } = this.node;
    if (!current) return;
    this.unmount = hover(current, (_element, startEvent) => {
      handleHoverEvent(this.node, startEvent, "Start");
      return (endEvent) => handleHoverEvent(this.node, endEvent, "End");
    });
  }
  unmount() {}
}

class FocusGesture extends Feature {
  constructor() {
    super(...arguments);
    this.isActive = false;
  }
  onFocus() {
    let isFocusVisible = false;
    /**
     * If this element doesn't match focus-visible then don't
     * apply whileHover. But, if matches throws that focus-visible
     * is not a valid selector then in that browser outline styles will be applied
     * to the element by default and we want to match that behaviour with whileFocus.
     */
    try {
      isFocusVisible = this.node.current.matches(":focus-visible");
    } catch (e) {
      isFocusVisible = true;
    }
    if (!isFocusVisible || !this.node.animationState) return;
    this.node.animationState.setActive("whileFocus", true);
    this.isActive = true;
  }
  onBlur() {
    if (!this.isActive || !this.node.animationState) return;
    this.node.animationState.setActive("whileFocus", false);
    this.isActive = false;
  }
  mount() {
    this.unmount = pipe(
      addDomEvent(this.node.current, "focus", () => this.onFocus()),
      addDomEvent(this.node.current, "blur", () => this.onBlur())
    );
  }
  unmount() {}
}

function handlePressEvent(node, event, lifecycle) {
  const { props } = node;
  if (node.current instanceof HTMLButtonElement && node.current.disabled) {
    return;
  }
  if (node.animationState && props.whileTap) {
    node.animationState.setActive("whileTap", lifecycle === "Start");
  }
  const eventName = "onTap" + (lifecycle === "End" ? "" : lifecycle);
  const callback = props[eventName];
  if (callback) {
    frame.postRender(() => callback(event, extractEventInfo(event)));
  }
}
class PressGesture extends Feature {
  mount() {
    const { current } = this.node;
    if (!current) return;
    this.unmount = press(
      current,
      (_element, startEvent) => {
        handlePressEvent(this.node, startEvent, "Start");
        return (endEvent, { success }) =>
          handlePressEvent(this.node, endEvent, success ? "End" : "Cancel");
      },
      { useGlobalTarget: this.node.props.globalTapTarget }
    );
  }
  unmount() {}
}

/**
 * Map an IntersectionHandler callback to an element. We only ever make one handler for one
 * element, so even though these handlers might all be triggered by different
 * observers, we can keep them in the same map.
 */
const observerCallbacks = new WeakMap();
/**
 * Multiple observers can be created for multiple element/document roots. Each with
 * different settings. So here we store dictionaries of observers to each root,
 * using serialised settings (threshold/margin) as lookup keys.
 */
const observers = new WeakMap();
const fireObserverCallback = (entry) => {
  const callback = observerCallbacks.get(entry.target);
  callback && callback(entry);
};
const fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options }) {
  const lookupRoot = root || document;
  /**
   * If we don't have an observer lookup map for this root, create one.
   */
  if (!observers.has(lookupRoot)) {
    observers.set(lookupRoot, {});
  }
  const rootObservers = observers.get(lookupRoot);
  const key = JSON.stringify(options);
  /**
   * If we don't have an observer for this combination of root and settings,
   * create one.
   */
  if (!rootObservers[key]) {
    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, {
      root,
      ...options,
    });
  }
  return rootObservers[key];
}
function observeIntersection(element, options, callback) {
  const rootInteresectionObserver = initIntersectionObserver(options);
  observerCallbacks.set(element, callback);
  rootInteresectionObserver.observe(element);
  return () => {
    observerCallbacks.delete(element);
    rootInteresectionObserver.unobserve(element);
  };
}

const thresholdNames = {
  some: 0,
  all: 1,
};
class InViewFeature extends Feature {
  constructor() {
    super(...arguments);
    this.hasEnteredView = false;
    this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport = {} } = this.node.getProps();
    const { root, margin: rootMargin, amount = "some", once } = viewport;
    const options = {
      root: root ? root.current : undefined,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount],
    };
    const onIntersectionUpdate = (entry) => {
      const { isIntersecting } = entry;
      /**
       * If there's been no change in the viewport state, early return.
       */
      if (this.isInView === isIntersecting) return;
      this.isInView = isIntersecting;
      /**
       * Handle hasEnteredView. If this is only meant to run once, and
       * element isn't visible, early return. Otherwise set hasEnteredView to true.
       */
      if (once && !isIntersecting && this.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        this.hasEnteredView = true;
      }
      if (this.node.animationState) {
        this.node.animationState.setActive("whileInView", isIntersecting);
      }
      /**
       * Use the latest committed props rather than the ones in scope
       * when this observer is created
       */
      const { onViewportEnter, onViewportLeave } = this.node.getProps();
      const callback = isIntersecting ? onViewportEnter : onViewportLeave;
      callback && callback(entry);
    };
    return observeIntersection(
      this.node.current,
      options,
      onIntersectionUpdate
    );
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver === "undefined") return;
    const { props, prevProps } = this.node;
    const hasOptionsChanged = ["amount", "margin", "root"].some(
      hasViewportOptionChanged(props, prevProps)
    );
    if (hasOptionsChanged) {
      this.startObserver();
    }
  }
  unmount() {}
}
function hasViewportOptionChanged(
  { viewport = {} },
  { viewport: prevViewport = {} } = {}
) {
  return (name) => viewport[name] !== prevViewport[name];
}

const gestureAnimations = {
  inView: {
    Feature: InViewFeature,
  },
  tap: {
    Feature: PressGesture,
  },
  focus: {
    Feature: FocusGesture,
  },
  hover: {
    Feature: HoverGesture,
  },
};

const layout = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout,
  },
};

const featureBundle = {
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout,
};

const motion = /*@__PURE__*/ createMotionProxy(
  featureBundle,
  createDomVisualElement
);

var reactDomExports = requireReactDom();
const ReactDOM = /*@__PURE__*/ getDefaultExportFromCjs(reactDomExports);

function __insertCSS(code) {
  if (typeof document == "undefined") return;
  let head = document.head || document.getElementsByTagName("head")[0];
  let style = document.createElement("style");
  style.type = "text/css";
  head.appendChild(style);
  style.styleSheet
    ? (style.styleSheet.cssText = code)
    : style.appendChild(document.createTextNode(code));
}

const getAsset = (type) => {
  switch (type) {
    case "success":
      return SuccessIcon;
    case "info":
      return InfoIcon;
    case "warning":
      return WarningIcon;
    case "error":
      return ErrorIcon;
    default:
      return null;
  }
};
const bars = Array(12).fill(0);
const Loader = ({ visible, className }) => {
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: ["sonner-loading-wrapper", className]
        .filter(Boolean)
        .join(" "),
      "data-visible": visible,
    },
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: "sonner-spinner",
      },
      bars.map((_, i) =>
        /*#__PURE__*/ React.createElement("div", {
          className: "sonner-loading-bar",
          key: `spinner-bar-${i}`,
        })
      )
    )
  );
};
const SuccessIcon = /*#__PURE__*/ React.createElement(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20",
  },
  /*#__PURE__*/ React.createElement("path", {
    fillRule: "evenodd",
    d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",
    clipRule: "evenodd",
  })
);
const WarningIcon = /*#__PURE__*/ React.createElement(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "currentColor",
    height: "20",
    width: "20",
  },
  /*#__PURE__*/ React.createElement("path", {
    fillRule: "evenodd",
    d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z",
    clipRule: "evenodd",
  })
);
const InfoIcon = /*#__PURE__*/ React.createElement(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20",
  },
  /*#__PURE__*/ React.createElement("path", {
    fillRule: "evenodd",
    d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",
    clipRule: "evenodd",
  })
);
const ErrorIcon = /*#__PURE__*/ React.createElement(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20",
  },
  /*#__PURE__*/ React.createElement("path", {
    fillRule: "evenodd",
    d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z",
    clipRule: "evenodd",
  })
);
const CloseIcon = /*#__PURE__*/ React.createElement(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "12",
    height: "12",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round",
  },
  /*#__PURE__*/ React.createElement("line", {
    x1: "18",
    y1: "6",
    x2: "6",
    y2: "18",
  }),
  /*#__PURE__*/ React.createElement("line", {
    x1: "6",
    y1: "6",
    x2: "18",
    y2: "18",
  })
);

const useIsDocumentHidden = () => {
  const [isDocumentHidden, setIsDocumentHidden] = React.useState(
    document.hidden
  );
  React.useEffect(() => {
    const callback = () => {
      setIsDocumentHidden(document.hidden);
    };
    document.addEventListener("visibilitychange", callback);
    return () => window.removeEventListener("visibilitychange", callback);
  }, []);
  return isDocumentHidden;
};

let toastsCounter = 1;
class Observer {
  constructor() {
    // We use arrow functions to maintain the correct `this` reference
    this.subscribe = (subscriber) => {
      this.subscribers.push(subscriber);
      return () => {
        const index = this.subscribers.indexOf(subscriber);
        this.subscribers.splice(index, 1);
      };
    };
    this.publish = (data) => {
      this.subscribers.forEach((subscriber) => subscriber(data));
    };
    this.addToast = (data) => {
      this.publish(data);
      this.toasts = [...this.toasts, data];
    };
    this.create = (data) => {
      var _data_id;
      const { message, ...rest } = data;
      const id =
        typeof (data == null ? void 0 : data.id) === "number" ||
        ((_data_id = data.id) == null ? void 0 : _data_id.length) > 0
          ? data.id
          : toastsCounter++;
      const alreadyExists = this.toasts.find((toast) => {
        return toast.id === id;
      });
      const dismissible =
        data.dismissible === undefined ? true : data.dismissible;
      if (this.dismissedToasts.has(id)) {
        this.dismissedToasts.delete(id);
      }
      if (alreadyExists) {
        this.toasts = this.toasts.map((toast) => {
          if (toast.id === id) {
            this.publish({
              ...toast,
              ...data,
              id,
              title: message,
            });
            return {
              ...toast,
              ...data,
              id,
              dismissible,
              title: message,
            };
          }
          return toast;
        });
      } else {
        this.addToast({
          title: message,
          ...rest,
          dismissible,
          id,
        });
      }
      return id;
    };
    this.dismiss = (id) => {
      if (id) {
        this.dismissedToasts.add(id);
        requestAnimationFrame(() =>
          this.subscribers.forEach((subscriber) =>
            subscriber({
              id,
              dismiss: true,
            })
          )
        );
      } else {
        this.toasts.forEach((toast) => {
          this.subscribers.forEach((subscriber) =>
            subscriber({
              id: toast.id,
              dismiss: true,
            })
          );
        });
      }
      return id;
    };
    this.message = (message, data) => {
      return this.create({
        ...data,
        message,
      });
    };
    this.error = (message, data) => {
      return this.create({
        ...data,
        message,
        type: "error",
      });
    };
    this.success = (message, data) => {
      return this.create({
        ...data,
        type: "success",
        message,
      });
    };
    this.info = (message, data) => {
      return this.create({
        ...data,
        type: "info",
        message,
      });
    };
    this.warning = (message, data) => {
      return this.create({
        ...data,
        type: "warning",
        message,
      });
    };
    this.loading = (message, data) => {
      return this.create({
        ...data,
        type: "loading",
        message,
      });
    };
    this.promise = (promise, data) => {
      if (!data) {
        // Nothing to show
        return;
      }
      let id = undefined;
      if (data.loading !== undefined) {
        id = this.create({
          ...data,
          promise,
          type: "loading",
          message: data.loading,
          description:
            typeof data.description !== "function"
              ? data.description
              : undefined,
        });
      }
      const p = Promise.resolve(
        promise instanceof Function ? promise() : promise
      );
      let shouldDismiss = id !== undefined;
      let result;
      const originalPromise = p
        .then(async (response) => {
          result = ["resolve", response];
          const isReactElementResponse = React.isValidElement(response);
          if (isReactElementResponse) {
            shouldDismiss = false;
            this.create({
              id,
              type: "default",
              message: response,
            });
          } else if (isHttpResponse(response) && !response.ok) {
            shouldDismiss = false;
            const promiseData =
              typeof data.error === "function"
                ? await data.error(`HTTP error! status: ${response.status}`)
                : data.error;
            const description =
              typeof data.description === "function"
                ? await data.description(
                    `HTTP error! status: ${response.status}`
                  )
                : data.description;
            const isExtendedResult =
              typeof promiseData === "object" &&
              !React.isValidElement(promiseData);
            const toastSettings = isExtendedResult
              ? promiseData
              : {
                  message: promiseData,
                };
            this.create({
              id,
              type: "error",
              description,
              ...toastSettings,
            });
          } else if (response instanceof Error) {
            shouldDismiss = false;
            const promiseData =
              typeof data.error === "function"
                ? await data.error(response)
                : data.error;
            const description =
              typeof data.description === "function"
                ? await data.description(response)
                : data.description;
            const isExtendedResult =
              typeof promiseData === "object" &&
              !React.isValidElement(promiseData);
            const toastSettings = isExtendedResult
              ? promiseData
              : {
                  message: promiseData,
                };
            this.create({
              id,
              type: "error",
              description,
              ...toastSettings,
            });
          } else if (data.success !== undefined) {
            shouldDismiss = false;
            const promiseData =
              typeof data.success === "function"
                ? await data.success(response)
                : data.success;
            const description =
              typeof data.description === "function"
                ? await data.description(response)
                : data.description;
            const isExtendedResult =
              typeof promiseData === "object" &&
              !React.isValidElement(promiseData);
            const toastSettings = isExtendedResult
              ? promiseData
              : {
                  message: promiseData,
                };
            this.create({
              id,
              type: "success",
              description,
              ...toastSettings,
            });
          }
        })
        .catch(async (error) => {
          result = ["reject", error];
          if (data.error !== undefined) {
            shouldDismiss = false;
            const promiseData =
              typeof data.error === "function"
                ? await data.error(error)
                : data.error;
            const description =
              typeof data.description === "function"
                ? await data.description(error)
                : data.description;
            const isExtendedResult =
              typeof promiseData === "object" &&
              !React.isValidElement(promiseData);
            const toastSettings = isExtendedResult
              ? promiseData
              : {
                  message: promiseData,
                };
            this.create({
              id,
              type: "error",
              description,
              ...toastSettings,
            });
          }
        })
        .finally(() => {
          if (shouldDismiss) {
            // Toast is still in load state (and will be indefinitely — dismiss it)
            this.dismiss(id);
            id = undefined;
          }
          data.finally == null ? void 0 : data.finally.call(data);
        });
      const unwrap = () =>
        new Promise((resolve, reject) =>
          originalPromise
            .then(() =>
              result[0] === "reject" ? reject(result[1]) : resolve(result[1])
            )
            .catch(reject)
        );
      if (typeof id !== "string" && typeof id !== "number") {
        // cannot Object.assign on undefined
        return {
          unwrap,
        };
      } else {
        return Object.assign(id, {
          unwrap,
        });
      }
    };
    this.custom = (jsx, data) => {
      const id = (data == null ? void 0 : data.id) || toastsCounter++;
      this.create({
        jsx: jsx(id),
        id,
        ...data,
      });
      return id;
    };
    this.getActiveToasts = () => {
      return this.toasts.filter((toast) => !this.dismissedToasts.has(toast.id));
    };
    this.subscribers = [];
    this.toasts = [];
    this.dismissedToasts = new Set();
  }
}
const ToastState = new Observer();
// bind this to the toast function
const toastFunction = (message, data) => {
  const id = (data == null ? void 0 : data.id) || toastsCounter++;
  ToastState.addToast({
    title: message,
    ...data,
    id,
  });
  return id;
};
const isHttpResponse = (data) => {
  return (
    data &&
    typeof data === "object" &&
    "ok" in data &&
    typeof data.ok === "boolean" &&
    "status" in data &&
    typeof data.status === "number"
  );
};
const basicToast = toastFunction;
const getHistory = () => ToastState.toasts;
const getToasts = () => ToastState.getActiveToasts();
// We use `Object.assign` to maintain the correct types as we would lose them otherwise
const toast = Object.assign(
  basicToast,
  {
    success: ToastState.success,
    info: ToastState.info,
    warning: ToastState.warning,
    error: ToastState.error,
    custom: ToastState.custom,
    message: ToastState.message,
    promise: ToastState.promise,
    dismiss: ToastState.dismiss,
    loading: ToastState.loading,
  },
  {
    getHistory,
    getToasts,
  }
);

__insertCSS(
  "[data-sonner-toaster][dir=ltr],html[dir=ltr]{--toast-icon-margin-start:-3px;--toast-icon-margin-end:4px;--toast-svg-margin-start:-1px;--toast-svg-margin-end:0px;--toast-button-margin-start:auto;--toast-button-margin-end:0;--toast-close-button-start:0;--toast-close-button-end:unset;--toast-close-button-transform:translate(-35%, -35%)}[data-sonner-toaster][dir=rtl],html[dir=rtl]{--toast-icon-margin-start:4px;--toast-icon-margin-end:-3px;--toast-svg-margin-start:0px;--toast-svg-margin-end:-1px;--toast-button-margin-start:0;--toast-button-margin-end:auto;--toast-close-button-start:unset;--toast-close-button-end:0;--toast-close-button-transform:translate(35%, -35%)}[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1:hsl(0, 0%, 99%);--gray2:hsl(0, 0%, 97.3%);--gray3:hsl(0, 0%, 95.1%);--gray4:hsl(0, 0%, 93%);--gray5:hsl(0, 0%, 90.9%);--gray6:hsl(0, 0%, 88.7%);--gray7:hsl(0, 0%, 85.8%);--gray8:hsl(0, 0%, 78%);--gray9:hsl(0, 0%, 56.1%);--gray10:hsl(0, 0%, 52.3%);--gray11:hsl(0, 0%, 43.5%);--gray12:hsl(0, 0%, 9%);--border-radius:8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:0;z-index:999999999;transition:transform .4s ease}@media (hover:none) and (pointer:coarse){[data-sonner-toaster][data-lifted=true]{transform:none}}[data-sonner-toaster][data-x-position=right]{right:var(--offset-right)}[data-sonner-toaster][data-x-position=left]{left:var(--offset-left)}[data-sonner-toaster][data-x-position=center]{left:50%;transform:translateX(-50%)}[data-sonner-toaster][data-y-position=top]{top:var(--offset-top)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--offset-bottom)}[data-sonner-toast]{--y:translateY(100%);--lift-amount:calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:0;overflow-wrap:anywhere}[data-sonner-toast][data-styled=true]{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px rgba(0,0,0,.1);width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-y-position=top]{top:0;--y:translateY(-100%);--lift:1;--lift-amount:calc(1 * var(--gap))}[data-sonner-toast][data-y-position=bottom]{bottom:0;--y:translateY(100%);--lift:-1;--lift-amount:calc(var(--lift) * var(--gap))}[data-sonner-toast][data-styled=true] [data-description]{font-weight:400;line-height:1.4;color:#3f3f3f}[data-rich-colors=true][data-sonner-toast][data-styled=true] [data-description]{color:inherit}[data-sonner-toaster][data-sonner-theme=dark] [data-description]{color:#e8e8e8}[data-sonner-toast][data-styled=true] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast][data-styled=true] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}[data-sonner-toast][data-promise=true] [data-icon]>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}[data-sonner-toast][data-styled=true] [data-icon]>*{flex-shrink:0}[data-sonner-toast][data-styled=true] [data-icon] svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}[data-sonner-toast][data-styled=true] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;font-weight:500;cursor:pointer;outline:0;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}[data-sonner-toast][data-styled=true] [data-button]:focus-visible{box-shadow:0 0 0 2px rgba(0,0,0,.4)}[data-sonner-toast][data-styled=true] [data-button]:first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}[data-sonner-toast][data-styled=true] [data-cancel]{color:var(--normal-text);background:rgba(0,0,0,.08)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-styled=true] [data-cancel]{background:rgba(255,255,255,.3)}[data-sonner-toast][data-styled=true] [data-close-button]{position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;color:var(--gray12);background:var(--normal-bg);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast][data-styled=true] [data-close-button]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-styled=true] [data-disabled=true]{cursor:not-allowed}[data-sonner-toast][data-styled=true]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping=true]::before{content:'';position:absolute;left:-100%;right:-100%;height:100%;z-index:-1}[data-sonner-toast][data-y-position=top][data-swiping=true]::before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position=bottom][data-swiping=true]::before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping=false][data-removed=true]::before{content:'';position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast][data-expanded=true]::after{content:'';position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted=true]{--y:translateY(0);opacity:1}[data-sonner-toast][data-expanded=false][data-front=false]{--scale:var(--toasts-before) * 0.05 + 1;--y:translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity .4s}[data-sonner-toast][data-x-position=right]{right:0}[data-sonner-toast][data-x-position=left]{left:0}[data-sonner-toast][data-expanded=false][data-front=false][data-styled=true]>*{opacity:0}[data-sonner-toast][data-visible=false]{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted=true][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed=true][data-front=true][data-swipe-out=false]{--y:translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=false]{--y:translateY(40%);opacity:0;transition:transform .5s,opacity .2s}[data-sonner-toast][data-removed=true][data-front=false]::before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount-y,0)) translateX(var(--swipe-amount-x,0));transition:none}[data-sonner-toast][data-swiped=true]{user-select:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation-duration:.2s;animation-timing-function:ease-out;animation-fill-mode:forwards}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=left]{animation-name:swipe-out-left}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=right]{animation-name:swipe-out-right}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=up]{animation-name:swipe-out-up}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=down]{animation-name:swipe-out-down}@keyframes swipe-out-left{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) - 100%));opacity:0}}@keyframes swipe-out-right{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) + 100%));opacity:0}}@keyframes swipe-out-up{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) - 100%));opacity:0}}@keyframes swipe-out-down{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) + 100%));opacity:0}}@media (max-width:600px){[data-sonner-toaster]{position:fixed;right:var(--mobile-offset-right);left:var(--mobile-offset-left);width:100%}[data-sonner-toaster][dir=rtl]{left:calc(var(--mobile-offset-left) * -1)}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset-left) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset-left)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--mobile-offset-bottom)}[data-sonner-toaster][data-y-position=top]{top:var(--mobile-offset-top)}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset-left);right:var(--mobile-offset-right);transform:none}}[data-sonner-toaster][data-sonner-theme=light]{--normal-bg:#fff;--normal-border:var(--gray4);--normal-text:var(--gray12);--success-bg:hsl(143, 85%, 96%);--success-border:hsl(145, 92%, 87%);--success-text:hsl(140, 100%, 27%);--info-bg:hsl(208, 100%, 97%);--info-border:hsl(221, 91%, 93%);--info-text:hsl(210, 92%, 45%);--warning-bg:hsl(49, 100%, 97%);--warning-border:hsl(49, 91%, 84%);--warning-text:hsl(31, 92%, 45%);--error-bg:hsl(359, 100%, 97%);--error-border:hsl(359, 100%, 94%);--error-text:hsl(360, 100%, 45%)}[data-sonner-toaster][data-sonner-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12)}[data-sonner-toaster][data-sonner-theme=dark]{--normal-bg:#000;--normal-bg-hover:hsl(0, 0%, 12%);--normal-border:hsl(0, 0%, 20%);--normal-border-hover:hsl(0, 0%, 25%);--normal-text:var(--gray1);--success-bg:hsl(150, 100%, 6%);--success-border:hsl(147, 100%, 12%);--success-text:hsl(150, 86%, 65%);--info-bg:hsl(215, 100%, 6%);--info-border:hsl(223, 43%, 17%);--info-text:hsl(216, 87%, 65%);--warning-bg:hsl(64, 100%, 6%);--warning-border:hsl(60, 100%, 9%);--warning-text:hsl(46, 87%, 65%);--error-bg:hsl(358, 76%, 10%);--error-border:hsl(357, 89%, 16%);--error-text:hsl(358, 100%, 81%)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]{background:var(--normal-bg);border-color:var(--normal-border);color:var(--normal-text)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]:hover{background:var(--normal-bg-hover);border-color:var(--normal-border-hover)}[data-rich-colors=true][data-sonner-toast][data-type=success]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size:16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:first-child{animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}100%{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}100%{opacity:.15}}@media (prefers-reduced-motion){.sonner-loading-bar,[data-sonner-toast],[data-sonner-toast]>*{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}"
);

function isAction(action) {
  return action.label !== undefined;
}

// Visible toasts amount
const VISIBLE_TOASTS_AMOUNT = 3;
// Viewport padding
const VIEWPORT_OFFSET = "24px";
// Mobile viewport padding
const MOBILE_VIEWPORT_OFFSET = "16px";
// Default lifetime of a toasts (in ms)
const TOAST_LIFETIME = 4000;
// Default toast width
const TOAST_WIDTH = 356;
// Default gap between toasts
const GAP = 14;
// Threshold to dismiss a toast
const SWIPE_THRESHOLD = 45;
// Equal to exit animation duration
const TIME_BEFORE_UNMOUNT = 200;
function cn$1(...classes) {
  return classes.filter(Boolean).join(" ");
}
function getDefaultSwipeDirections(position) {
  const [y, x] = position.split("-");
  const directions = [];
  if (y) {
    directions.push(y);
  }
  if (x) {
    directions.push(x);
  }
  return directions;
}
const Toast = (props) => {
  var _toast_classNames,
    _toast_classNames1,
    _toast_classNames2,
    _toast_classNames3,
    _toast_classNames4,
    _toast_classNames5,
    _toast_classNames6,
    _toast_classNames7,
    _toast_classNames8;
  const {
    invert: ToasterInvert,
    toast,
    unstyled,
    interacting,
    setHeights,
    visibleToasts,
    heights,
    index,
    toasts,
    expanded,
    removeToast,
    defaultRichColors,
    closeButton: closeButtonFromToaster,
    style,
    cancelButtonStyle,
    actionButtonStyle,
    className = "",
    descriptionClassName = "",
    duration: durationFromToaster,
    position,
    gap,
    expandByDefault,
    classNames,
    icons,
    closeButtonAriaLabel = "Close toast",
  } = props;
  const [swipeDirection, setSwipeDirection] = React.useState(null);
  const [swipeOutDirection, setSwipeOutDirection] = React.useState(null);
  const [mounted, setMounted] = React.useState(false);
  const [removed, setRemoved] = React.useState(false);
  const [swiping, setSwiping] = React.useState(false);
  const [swipeOut, setSwipeOut] = React.useState(false);
  const [isSwiped, setIsSwiped] = React.useState(false);
  const [offsetBeforeRemove, setOffsetBeforeRemove] = React.useState(0);
  const [initialHeight, setInitialHeight] = React.useState(0);
  const remainingTime = React.useRef(
    toast.duration || durationFromToaster || TOAST_LIFETIME
  );
  const dragStartTime = React.useRef(null);
  const toastRef = React.useRef(null);
  const isFront = index === 0;
  const isVisible = index + 1 <= visibleToasts;
  const toastType = toast.type;
  const dismissible = toast.dismissible !== false;
  const toastClassname = toast.className || "";
  const toastDescriptionClassname = toast.descriptionClassName || "";
  // Height index is used to calculate the offset as it gets updated before the toast array, which means we can calculate the new layout faster.
  const heightIndex = React.useMemo(
    () => heights.findIndex((height) => height.toastId === toast.id) || 0,
    [heights, toast.id]
  );
  const closeButton = React.useMemo(() => {
    var _toast_closeButton;
    return (_toast_closeButton = toast.closeButton) != null
      ? _toast_closeButton
      : closeButtonFromToaster;
  }, [toast.closeButton, closeButtonFromToaster]);
  const duration = React.useMemo(
    () => toast.duration || durationFromToaster || TOAST_LIFETIME,
    [toast.duration, durationFromToaster]
  );
  const closeTimerStartTimeRef = React.useRef(0);
  const offset = React.useRef(0);
  const lastCloseTimerStartTimeRef = React.useRef(0);
  const pointerStartRef = React.useRef(null);
  const [y, x] = position.split("-");
  const toastsHeightBefore = React.useMemo(() => {
    return heights.reduce((prev, curr, reducerIndex) => {
      // Calculate offset up until current toast
      if (reducerIndex >= heightIndex) {
        return prev;
      }
      return prev + curr.height;
    }, 0);
  }, [heights, heightIndex]);
  const isDocumentHidden = useIsDocumentHidden();
  const invert = toast.invert || ToasterInvert;
  const disabled = toastType === "loading";
  offset.current = React.useMemo(
    () => heightIndex * gap + toastsHeightBefore,
    [heightIndex, toastsHeightBefore]
  );
  React.useEffect(() => {
    remainingTime.current = duration;
  }, [duration]);
  React.useEffect(() => {
    // Trigger enter animation without using CSS animation
    setMounted(true);
  }, []);
  React.useEffect(() => {
    const toastNode = toastRef.current;
    if (toastNode) {
      const height = toastNode.getBoundingClientRect().height;
      // Add toast height to heights array after the toast is mounted
      setInitialHeight(height);
      setHeights((h) => [
        {
          toastId: toast.id,
          height,
          position: toast.position,
        },
        ...h,
      ]);
      return () =>
        setHeights((h) => h.filter((height) => height.toastId !== toast.id));
    }
  }, [setHeights, toast.id]);
  React.useLayoutEffect(() => {
    // Keep height up to date with the content in case it updates
    if (!mounted) return;
    const toastNode = toastRef.current;
    const originalHeight = toastNode.style.height;
    toastNode.style.height = "auto";
    const newHeight = toastNode.getBoundingClientRect().height;
    toastNode.style.height = originalHeight;
    setInitialHeight(newHeight);
    setHeights((heights) => {
      const alreadyExists = heights.find(
        (height) => height.toastId === toast.id
      );
      if (!alreadyExists) {
        return [
          {
            toastId: toast.id,
            height: newHeight,
            position: toast.position,
          },
          ...heights,
        ];
      } else {
        return heights.map((height) =>
          height.toastId === toast.id
            ? {
                ...height,
                height: newHeight,
              }
            : height
        );
      }
    });
  }, [
    mounted,
    toast.title,
    toast.description,
    setHeights,
    toast.id,
    toast.jsx,
    toast.action,
    toast.cancel,
  ]);
  const deleteToast = React.useCallback(() => {
    // Save the offset for the exit swipe animation
    setRemoved(true);
    setOffsetBeforeRemove(offset.current);
    setHeights((h) => h.filter((height) => height.toastId !== toast.id));
    setTimeout(() => {
      removeToast(toast);
    }, TIME_BEFORE_UNMOUNT);
  }, [toast, removeToast, setHeights, offset]);
  React.useEffect(() => {
    if (
      (toast.promise && toastType === "loading") ||
      toast.duration === Infinity ||
      toast.type === "loading"
    )
      return;
    let timeoutId;
    // Pause the timer on each hover
    const pauseTimer = () => {
      if (lastCloseTimerStartTimeRef.current < closeTimerStartTimeRef.current) {
        // Get the elapsed time since the timer started
        const elapsedTime =
          new Date().getTime() - closeTimerStartTimeRef.current;
        remainingTime.current = remainingTime.current - elapsedTime;
      }
      lastCloseTimerStartTimeRef.current = new Date().getTime();
    };
    const startTimer = () => {
      // setTimeout(, Infinity) behaves as if the delay is 0.
      // As a result, the toast would be closed immediately, giving the appearance that it was never rendered.
      // See: https://github.com/denysdovhan/wtfjs?tab=readme-ov-file#an-infinite-timeout
      if (remainingTime.current === Infinity) return;
      closeTimerStartTimeRef.current = new Date().getTime();
      // Let the toast know it has started
      timeoutId = setTimeout(() => {
        toast.onAutoClose == null
          ? void 0
          : toast.onAutoClose.call(toast, toast);
        deleteToast();
      }, remainingTime.current);
    };
    if (expanded || interacting || isDocumentHidden) {
      pauseTimer();
    } else {
      startTimer();
    }
    return () => clearTimeout(timeoutId);
  }, [expanded, interacting, toast, toastType, isDocumentHidden, deleteToast]);
  React.useEffect(() => {
    if (toast.delete) {
      deleteToast();
      toast.onDismiss == null ? void 0 : toast.onDismiss.call(toast, toast);
    }
  }, [deleteToast, toast.delete]);
  function getLoadingIcon() {
    var _toast_classNames;
    if (icons == null ? void 0 : icons.loading) {
      var _toast_classNames1;
      return /*#__PURE__*/ React.createElement(
        "div",
        {
          className: cn$1(
            classNames == null ? void 0 : classNames.loader,
            toast == null
              ? void 0
              : (_toast_classNames1 = toast.classNames) == null
              ? void 0
              : _toast_classNames1.loader,
            "sonner-loader"
          ),
          "data-visible": toastType === "loading",
        },
        icons.loading
      );
    }
    return /*#__PURE__*/ React.createElement(Loader, {
      className: cn$1(
        classNames == null ? void 0 : classNames.loader,
        toast == null
          ? void 0
          : (_toast_classNames = toast.classNames) == null
          ? void 0
          : _toast_classNames.loader
      ),
      visible: toastType === "loading",
    });
  }
  const icon =
    toast.icon ||
    (icons == null ? void 0 : icons[toastType]) ||
    getAsset(toastType);
  var _toast_richColors, _icons_close;
  return /*#__PURE__*/ React.createElement(
    "li",
    {
      tabIndex: 0,
      ref: toastRef,
      className: cn$1(
        className,
        toastClassname,
        classNames == null ? void 0 : classNames.toast,
        toast == null
          ? void 0
          : (_toast_classNames = toast.classNames) == null
          ? void 0
          : _toast_classNames.toast,
        classNames == null ? void 0 : classNames.default,
        classNames == null ? void 0 : classNames[toastType],
        toast == null
          ? void 0
          : (_toast_classNames1 = toast.classNames) == null
          ? void 0
          : _toast_classNames1[toastType]
      ),
      "data-sonner-toast": "",
      "data-rich-colors":
        (_toast_richColors = toast.richColors) != null
          ? _toast_richColors
          : defaultRichColors,
      "data-styled": !Boolean(toast.jsx || toast.unstyled || unstyled),
      "data-mounted": mounted,
      "data-promise": Boolean(toast.promise),
      "data-swiped": isSwiped,
      "data-removed": removed,
      "data-visible": isVisible,
      "data-y-position": y,
      "data-x-position": x,
      "data-index": index,
      "data-front": isFront,
      "data-swiping": swiping,
      "data-dismissible": dismissible,
      "data-type": toastType,
      "data-invert": invert,
      "data-swipe-out": swipeOut,
      "data-swipe-direction": swipeOutDirection,
      "data-expanded": Boolean(expanded || (expandByDefault && mounted)),
      "data-testid": toast.testId,
      style: {
        "--index": index,
        "--toasts-before": index,
        "--z-index": toasts.length - index,
        "--offset": `${removed ? offsetBeforeRemove : offset.current}px`,
        "--initial-height": expandByDefault ? "auto" : `${initialHeight}px`,
        ...style,
        ...toast.style,
      },
      onDragEnd: () => {
        setSwiping(false);
        setSwipeDirection(null);
        pointerStartRef.current = null;
      },
      onPointerDown: (event) => {
        if (event.button === 2) return; // Return early on right click
        if (disabled || !dismissible) return;
        dragStartTime.current = new Date();
        setOffsetBeforeRemove(offset.current);
        // Ensure we maintain correct pointer capture even when going outside of the toast (e.g. when swiping)
        event.target.setPointerCapture(event.pointerId);
        if (event.target.tagName === "BUTTON") return;
        setSwiping(true);
        pointerStartRef.current = {
          x: event.clientX,
          y: event.clientY,
        };
      },
      onPointerUp: () => {
        var _toastRef_current, _toastRef_current1, _dragStartTime_current;
        if (swipeOut || !dismissible) return;
        pointerStartRef.current = null;
        const swipeAmountX = Number(
          ((_toastRef_current = toastRef.current) == null
            ? void 0
            : _toastRef_current.style
                .getPropertyValue("--swipe-amount-x")
                .replace("px", "")) || 0
        );
        const swipeAmountY = Number(
          ((_toastRef_current1 = toastRef.current) == null
            ? void 0
            : _toastRef_current1.style
                .getPropertyValue("--swipe-amount-y")
                .replace("px", "")) || 0
        );
        const timeTaken =
          new Date().getTime() -
          ((_dragStartTime_current = dragStartTime.current) == null
            ? void 0
            : _dragStartTime_current.getTime());
        const swipeAmount =
          swipeDirection === "x" ? swipeAmountX : swipeAmountY;
        const velocity = Math.abs(swipeAmount) / timeTaken;
        if (Math.abs(swipeAmount) >= SWIPE_THRESHOLD || velocity > 0.11) {
          setOffsetBeforeRemove(offset.current);
          toast.onDismiss == null ? void 0 : toast.onDismiss.call(toast, toast);
          if (swipeDirection === "x") {
            setSwipeOutDirection(swipeAmountX > 0 ? "right" : "left");
          } else {
            setSwipeOutDirection(swipeAmountY > 0 ? "down" : "up");
          }
          deleteToast();
          setSwipeOut(true);
          return;
        } else {
          var _toastRef_current2, _toastRef_current3;
          (_toastRef_current2 = toastRef.current) == null
            ? void 0
            : _toastRef_current2.style.setProperty("--swipe-amount-x", `0px`);
          (_toastRef_current3 = toastRef.current) == null
            ? void 0
            : _toastRef_current3.style.setProperty("--swipe-amount-y", `0px`);
        }
        setIsSwiped(false);
        setSwiping(false);
        setSwipeDirection(null);
      },
      onPointerMove: (event) => {
        var _window_getSelection, // Apply transform using both x and y values
          _toastRef_current,
          _toastRef_current1;
        if (!pointerStartRef.current || !dismissible) return;
        const isHighlighted =
          ((_window_getSelection = window.getSelection()) == null
            ? void 0
            : _window_getSelection.toString().length) > 0;
        if (isHighlighted) return;
        const yDelta = event.clientY - pointerStartRef.current.y;
        const xDelta = event.clientX - pointerStartRef.current.x;
        var _props_swipeDirections;
        const swipeDirections =
          (_props_swipeDirections = props.swipeDirections) != null
            ? _props_swipeDirections
            : getDefaultSwipeDirections(position);
        // Determine swipe direction if not already locked
        if (!swipeDirection && (Math.abs(xDelta) > 1 || Math.abs(yDelta) > 1)) {
          setSwipeDirection(Math.abs(xDelta) > Math.abs(yDelta) ? "x" : "y");
        }
        let swipeAmount = {
          x: 0,
          y: 0,
        };
        const getDampening = (delta) => {
          const factor = Math.abs(delta) / 20;
          return 1 / (1.5 + factor);
        };
        // Only apply swipe in the locked direction
        if (swipeDirection === "y") {
          // Handle vertical swipes
          if (
            swipeDirections.includes("top") ||
            swipeDirections.includes("bottom")
          ) {
            if (
              (swipeDirections.includes("top") && yDelta < 0) ||
              (swipeDirections.includes("bottom") && yDelta > 0)
            ) {
              swipeAmount.y = yDelta;
            } else {
              // Smoothly transition to dampened movement
              const dampenedDelta = yDelta * getDampening(yDelta);
              // Ensure we don't jump when transitioning to dampened movement
              swipeAmount.y =
                Math.abs(dampenedDelta) < Math.abs(yDelta)
                  ? dampenedDelta
                  : yDelta;
            }
          }
        } else if (swipeDirection === "x") {
          // Handle horizontal swipes
          if (
            swipeDirections.includes("left") ||
            swipeDirections.includes("right")
          ) {
            if (
              (swipeDirections.includes("left") && xDelta < 0) ||
              (swipeDirections.includes("right") && xDelta > 0)
            ) {
              swipeAmount.x = xDelta;
            } else {
              // Smoothly transition to dampened movement
              const dampenedDelta = xDelta * getDampening(xDelta);
              // Ensure we don't jump when transitioning to dampened movement
              swipeAmount.x =
                Math.abs(dampenedDelta) < Math.abs(xDelta)
                  ? dampenedDelta
                  : xDelta;
            }
          }
        }
        if (Math.abs(swipeAmount.x) > 0 || Math.abs(swipeAmount.y) > 0) {
          setIsSwiped(true);
        }
        (_toastRef_current = toastRef.current) == null
          ? void 0
          : _toastRef_current.style.setProperty(
              "--swipe-amount-x",
              `${swipeAmount.x}px`
            );
        (_toastRef_current1 = toastRef.current) == null
          ? void 0
          : _toastRef_current1.style.setProperty(
              "--swipe-amount-y",
              `${swipeAmount.y}px`
            );
      },
    },
    closeButton && !toast.jsx && toastType !== "loading"
      ? /*#__PURE__*/ React.createElement(
          "button",
          {
            "aria-label": closeButtonAriaLabel,
            "data-disabled": disabled,
            "data-close-button": true,
            onClick:
              disabled || !dismissible
                ? () => {}
                : () => {
                    deleteToast();
                    toast.onDismiss == null
                      ? void 0
                      : toast.onDismiss.call(toast, toast);
                  },
            className: cn$1(
              classNames == null ? void 0 : classNames.closeButton,
              toast == null
                ? void 0
                : (_toast_classNames2 = toast.classNames) == null
                ? void 0
                : _toast_classNames2.closeButton
            ),
          },
          (_icons_close = icons == null ? void 0 : icons.close) != null
            ? _icons_close
            : CloseIcon
        )
      : null,
    (toastType || toast.icon || toast.promise) &&
      toast.icon !== null &&
      ((icons == null ? void 0 : icons[toastType]) !== null || toast.icon)
      ? /*#__PURE__*/ React.createElement(
          "div",
          {
            "data-icon": "",
            className: cn$1(
              classNames == null ? void 0 : classNames.icon,
              toast == null
                ? void 0
                : (_toast_classNames3 = toast.classNames) == null
                ? void 0
                : _toast_classNames3.icon
            ),
          },
          toast.promise || (toast.type === "loading" && !toast.icon)
            ? toast.icon || getLoadingIcon()
            : null,
          toast.type !== "loading" ? icon : null
        )
      : null,
    /*#__PURE__*/ React.createElement(
      "div",
      {
        "data-content": "",
        className: cn$1(
          classNames == null ? void 0 : classNames.content,
          toast == null
            ? void 0
            : (_toast_classNames4 = toast.classNames) == null
            ? void 0
            : _toast_classNames4.content
        ),
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          "data-title": "",
          className: cn$1(
            classNames == null ? void 0 : classNames.title,
            toast == null
              ? void 0
              : (_toast_classNames5 = toast.classNames) == null
              ? void 0
              : _toast_classNames5.title
          ),
        },
        toast.jsx
          ? toast.jsx
          : typeof toast.title === "function"
          ? toast.title()
          : toast.title
      ),
      toast.description
        ? /*#__PURE__*/ React.createElement(
            "div",
            {
              "data-description": "",
              className: cn$1(
                descriptionClassName,
                toastDescriptionClassname,
                classNames == null ? void 0 : classNames.description,
                toast == null
                  ? void 0
                  : (_toast_classNames6 = toast.classNames) == null
                  ? void 0
                  : _toast_classNames6.description
              ),
            },
            typeof toast.description === "function"
              ? toast.description()
              : toast.description
          )
        : null
    ),
    /*#__PURE__*/ React.isValidElement(toast.cancel)
      ? toast.cancel
      : toast.cancel && isAction(toast.cancel)
      ? /*#__PURE__*/ React.createElement(
          "button",
          {
            "data-button": true,
            "data-cancel": true,
            style: toast.cancelButtonStyle || cancelButtonStyle,
            onClick: (event) => {
              // We need to check twice because typescript
              if (!isAction(toast.cancel)) return;
              if (!dismissible) return;
              toast.cancel.onClick == null
                ? void 0
                : toast.cancel.onClick.call(toast.cancel, event);
              deleteToast();
            },
            className: cn$1(
              classNames == null ? void 0 : classNames.cancelButton,
              toast == null
                ? void 0
                : (_toast_classNames7 = toast.classNames) == null
                ? void 0
                : _toast_classNames7.cancelButton
            ),
          },
          toast.cancel.label
        )
      : null,
    /*#__PURE__*/ React.isValidElement(toast.action)
      ? toast.action
      : toast.action && isAction(toast.action)
      ? /*#__PURE__*/ React.createElement(
          "button",
          {
            "data-button": true,
            "data-action": true,
            style: toast.actionButtonStyle || actionButtonStyle,
            onClick: (event) => {
              // We need to check twice because typescript
              if (!isAction(toast.action)) return;
              toast.action.onClick == null
                ? void 0
                : toast.action.onClick.call(toast.action, event);
              if (event.defaultPrevented) return;
              deleteToast();
            },
            className: cn$1(
              classNames == null ? void 0 : classNames.actionButton,
              toast == null
                ? void 0
                : (_toast_classNames8 = toast.classNames) == null
                ? void 0
                : _toast_classNames8.actionButton
            ),
          },
          toast.action.label
        )
      : null
  );
};
function getDocumentDirection() {
  if (typeof window === "undefined") return "ltr";
  if (typeof document === "undefined") return "ltr"; // For Fresh purpose
  const dirAttribute = document.documentElement.getAttribute("dir");
  if (dirAttribute === "auto" || !dirAttribute) {
    return window.getComputedStyle(document.documentElement).direction;
  }
  return dirAttribute;
}
function assignOffset(defaultOffset, mobileOffset) {
  const styles = {};
  [defaultOffset, mobileOffset].forEach((offset, index) => {
    const isMobile = index === 1;
    const prefix = isMobile ? "--mobile-offset" : "--offset";
    const defaultValue = isMobile ? MOBILE_VIEWPORT_OFFSET : VIEWPORT_OFFSET;
    function assignAll(offset) {
      ["top", "right", "bottom", "left"].forEach((key) => {
        styles[`${prefix}-${key}`] =
          typeof offset === "number" ? `${offset}px` : offset;
      });
    }
    if (typeof offset === "number" || typeof offset === "string") {
      assignAll(offset);
    } else if (typeof offset === "object") {
      ["top", "right", "bottom", "left"].forEach((key) => {
        if (offset[key] === undefined) {
          styles[`${prefix}-${key}`] = defaultValue;
        } else {
          styles[`${prefix}-${key}`] =
            typeof offset[key] === "number" ? `${offset[key]}px` : offset[key];
        }
      });
    } else {
      assignAll(defaultValue);
    }
  });
  return styles;
}
const Toaster$1 = /*#__PURE__*/ React.forwardRef(function Toaster(props, ref) {
  const {
    id,
    invert,
    position = "bottom-right",
    hotkey = ["altKey", "KeyT"],
    expand,
    closeButton,
    className,
    offset,
    mobileOffset,
    theme = "light",
    richColors,
    duration,
    style,
    visibleToasts = VISIBLE_TOASTS_AMOUNT,
    toastOptions,
    dir = getDocumentDirection(),
    gap = GAP,
    icons,
    containerAriaLabel = "Notifications",
  } = props;
  const [toasts, setToasts] = React.useState([]);
  const filteredToasts = React.useMemo(() => {
    if (id) {
      return toasts.filter((toast) => toast.toasterId === id);
    }
    return toasts.filter((toast) => !toast.toasterId);
  }, [toasts, id]);
  const possiblePositions = React.useMemo(() => {
    return Array.from(
      new Set(
        [position].concat(
          filteredToasts
            .filter((toast) => toast.position)
            .map((toast) => toast.position)
        )
      )
    );
  }, [filteredToasts, position]);
  const [heights, setHeights] = React.useState([]);
  const [expanded, setExpanded] = React.useState(false);
  const [interacting, setInteracting] = React.useState(false);
  const [actualTheme, setActualTheme] = React.useState(
    theme !== "system"
      ? theme
      : typeof window !== "undefined"
      ? window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light"
      : "light"
  );
  const listRef = React.useRef(null);
  const hotkeyLabel = hotkey
    .join("+")
    .replace(/Key/g, "")
    .replace(/Digit/g, "");
  const lastFocusedElementRef = React.useRef(null);
  const isFocusWithinRef = React.useRef(false);
  const removeToast = React.useCallback((toastToRemove) => {
    setToasts((toasts) => {
      var _toasts_find;
      if (
        !((_toasts_find = toasts.find(
          (toast) => toast.id === toastToRemove.id
        )) == null
          ? void 0
          : _toasts_find.delete)
      ) {
        ToastState.dismiss(toastToRemove.id);
      }
      return toasts.filter(({ id }) => id !== toastToRemove.id);
    });
  }, []);
  React.useEffect(() => {
    return ToastState.subscribe((toast) => {
      if (toast.dismiss) {
        // Prevent batching of other state updates
        requestAnimationFrame(() => {
          setToasts((toasts) =>
            toasts.map((t) =>
              t.id === toast.id
                ? {
                    ...t,
                    delete: true,
                  }
                : t
            )
          );
        });
        return;
      }
      // Prevent batching, temp solution.
      setTimeout(() => {
        ReactDOM.flushSync(() => {
          setToasts((toasts) => {
            const indexOfExistingToast = toasts.findIndex(
              (t) => t.id === toast.id
            );
            // Update the toast if it already exists
            if (indexOfExistingToast !== -1) {
              return [
                ...toasts.slice(0, indexOfExistingToast),
                {
                  ...toasts[indexOfExistingToast],
                  ...toast,
                },
                ...toasts.slice(indexOfExistingToast + 1),
              ];
            }
            return [toast, ...toasts];
          });
        });
      });
    });
  }, [toasts]);
  React.useEffect(() => {
    if (theme !== "system") {
      setActualTheme(theme);
      return;
    }
    if (theme === "system") {
      // check if current preference is dark
      if (
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches
      ) {
        // it's currently dark
        setActualTheme("dark");
      } else {
        // it's not dark
        setActualTheme("light");
      }
    }
    if (typeof window === "undefined") return;
    const darkMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    try {
      // Chrome & Firefox
      darkMediaQuery.addEventListener("change", ({ matches }) => {
        if (matches) {
          setActualTheme("dark");
        } else {
          setActualTheme("light");
        }
      });
    } catch (error) {
      // Safari < 14
      darkMediaQuery.addListener(({ matches }) => {
        try {
          if (matches) {
            setActualTheme("dark");
          } else {
            setActualTheme("light");
          }
        } catch (e) {
          console.error(e);
        }
      });
    }
  }, [theme]);
  React.useEffect(() => {
    // Ensure expanded is always false when no toasts are present / only one left
    if (toasts.length <= 1) {
      setExpanded(false);
    }
  }, [toasts]);
  React.useEffect(() => {
    const handleKeyDown = (event) => {
      var _listRef_current;
      const isHotkeyPressed = hotkey.every(
        (key) => event[key] || event.code === key
      );
      if (isHotkeyPressed) {
        var _listRef_current1;
        setExpanded(true);
        (_listRef_current1 = listRef.current) == null
          ? void 0
          : _listRef_current1.focus();
      }
      if (
        event.code === "Escape" &&
        (document.activeElement === listRef.current ||
          ((_listRef_current = listRef.current) == null
            ? void 0
            : _listRef_current.contains(document.activeElement)))
      ) {
        setExpanded(false);
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [hotkey]);
  React.useEffect(() => {
    if (listRef.current) {
      return () => {
        if (lastFocusedElementRef.current) {
          lastFocusedElementRef.current.focus({
            preventScroll: true,
          });
          lastFocusedElementRef.current = null;
          isFocusWithinRef.current = false;
        }
      };
    }
  }, [listRef.current]);
  return (
    // Remove item from normal navigation flow, only available via hotkey
    /*#__PURE__*/ React.createElement(
      "section",
      {
        ref: ref,
        "aria-label": `${containerAriaLabel} ${hotkeyLabel}`,
        tabIndex: -1,
        "aria-live": "polite",
        "aria-relevant": "additions text",
        "aria-atomic": "false",
        suppressHydrationWarning: true,
      },
      possiblePositions.map((position, index) => {
        var _heights_;
        const [y, x] = position.split("-");
        if (!filteredToasts.length) return null;
        return /*#__PURE__*/ React.createElement(
          "ol",
          {
            key: position,
            dir: dir === "auto" ? getDocumentDirection() : dir,
            tabIndex: -1,
            ref: listRef,
            className: className,
            "data-sonner-toaster": true,
            "data-sonner-theme": actualTheme,
            "data-y-position": y,
            "data-x-position": x,
            style: {
              "--front-toast-height": `${
                ((_heights_ = heights[0]) == null
                  ? void 0
                  : _heights_.height) || 0
              }px`,
              "--width": `${TOAST_WIDTH}px`,
              "--gap": `${gap}px`,
              ...style,
              ...assignOffset(offset, mobileOffset),
            },
            onBlur: (event) => {
              if (
                isFocusWithinRef.current &&
                !event.currentTarget.contains(event.relatedTarget)
              ) {
                isFocusWithinRef.current = false;
                if (lastFocusedElementRef.current) {
                  lastFocusedElementRef.current.focus({
                    preventScroll: true,
                  });
                  lastFocusedElementRef.current = null;
                }
              }
            },
            onFocus: (event) => {
              const isNotDismissible =
                event.target instanceof HTMLElement &&
                event.target.dataset.dismissible === "false";
              if (isNotDismissible) return;
              if (!isFocusWithinRef.current) {
                isFocusWithinRef.current = true;
                lastFocusedElementRef.current = event.relatedTarget;
              }
            },
            onMouseEnter: () => setExpanded(true),
            onMouseMove: () => setExpanded(true),
            onMouseLeave: () => {
              // Avoid setting expanded to false when interacting with a toast, e.g. swiping
              if (!interacting) {
                setExpanded(false);
              }
            },
            onDragEnd: () => setExpanded(false),
            onPointerDown: (event) => {
              const isNotDismissible =
                event.target instanceof HTMLElement &&
                event.target.dataset.dismissible === "false";
              if (isNotDismissible) return;
              setInteracting(true);
            },
            onPointerUp: () => setInteracting(false),
          },
          filteredToasts
            .filter(
              (toast) =>
                (!toast.position && index === 0) || toast.position === position
            )
            .map((toast, index) => {
              var _toastOptions_duration, _toastOptions_closeButton;
              return /*#__PURE__*/ React.createElement(Toast, {
                key: toast.id,
                icons: icons,
                index: index,
                toast: toast,
                defaultRichColors: richColors,
                duration:
                  (_toastOptions_duration =
                    toastOptions == null ? void 0 : toastOptions.duration) !=
                  null
                    ? _toastOptions_duration
                    : duration,
                className:
                  toastOptions == null ? void 0 : toastOptions.className,
                descriptionClassName:
                  toastOptions == null
                    ? void 0
                    : toastOptions.descriptionClassName,
                invert: invert,
                visibleToasts: visibleToasts,
                closeButton:
                  (_toastOptions_closeButton =
                    toastOptions == null ? void 0 : toastOptions.closeButton) !=
                  null
                    ? _toastOptions_closeButton
                    : closeButton,
                interacting: interacting,
                position: position,
                style: toastOptions == null ? void 0 : toastOptions.style,
                unstyled: toastOptions == null ? void 0 : toastOptions.unstyled,
                classNames:
                  toastOptions == null ? void 0 : toastOptions.classNames,
                cancelButtonStyle:
                  toastOptions == null
                    ? void 0
                    : toastOptions.cancelButtonStyle,
                actionButtonStyle:
                  toastOptions == null
                    ? void 0
                    : toastOptions.actionButtonStyle,
                closeButtonAriaLabel:
                  toastOptions == null
                    ? void 0
                    : toastOptions.closeButtonAriaLabel,
                removeToast: removeToast,
                toasts: filteredToasts.filter(
                  (t) => t.position == toast.position
                ),
                heights: heights.filter((h) => h.position == toast.position),
                setHeights: setHeights,
                expandByDefault: expand,
                gap: gap,
                expanded: expanded,
                swipeDirections: props.swipeDirections,
              });
            })
        );
      })
    )
  );
});

// packages/react/compose-refs/src/compose-refs.tsx
function setRef(ref, value) {
  if (typeof ref === "function") {
    return ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
}
function composeRefs(...refs) {
  return (node) => {
    let hasCleanup = false;
    const cleanups = refs.map((ref) => {
      const cleanup = setRef(ref, node);
      if (!hasCleanup && typeof cleanup == "function") {
        hasCleanup = true;
      }
      return cleanup;
    });
    if (hasCleanup) {
      return () => {
        for (let i = 0; i < cleanups.length; i++) {
          const cleanup = cleanups[i];
          if (typeof cleanup == "function") {
            cleanup();
          } else {
            setRef(refs[i], null);
          }
        }
      };
    }
  };
}
function useComposedRefs(...refs) {
  return reactExports.useCallback(composeRefs(...refs), refs);
}

// src/slot.tsx
// @__NO_SIDE_EFFECTS__
function createSlot(ownerName) {
  const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);
  const Slot2 = reactExports.forwardRef((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    const childrenArray = reactExports.Children.toArray(children);
    const slottable = childrenArray.find(isSlottable);
    if (slottable) {
      const newElement = slottable.props.children;
      const newChildren = childrenArray.map((child) => {
        if (child === slottable) {
          if (reactExports.Children.count(newElement) > 1)
            return reactExports.Children.only(null);
          return reactExports.isValidElement(newElement)
            ? newElement.props.children
            : null;
        } else {
          return child;
        }
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(SlotClone, {
        ...slotProps,
        ref: forwardedRef,
        children: reactExports.isValidElement(newElement)
          ? reactExports.cloneElement(newElement, void 0, newChildren)
          : null,
      });
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(SlotClone, {
      ...slotProps,
      ref: forwardedRef,
      children,
    });
  });
  Slot2.displayName = `${ownerName}.Slot`;
  return Slot2;
}
var Slot$2 = /* @__PURE__ */ createSlot("Slot");
// @__NO_SIDE_EFFECTS__
function createSlotClone(ownerName) {
  const SlotClone = reactExports.forwardRef((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    if (reactExports.isValidElement(children)) {
      const childrenRef = getElementRef$1(children);
      const props2 = mergeProps(slotProps, children.props);
      if (children.type !== reactExports.Fragment) {
        props2.ref = forwardedRef
          ? composeRefs(forwardedRef, childrenRef)
          : childrenRef;
      }
      return reactExports.cloneElement(children, props2);
    }
    return reactExports.Children.count(children) > 1
      ? reactExports.Children.only(null)
      : null;
  });
  SlotClone.displayName = `${ownerName}.SlotClone`;
  return SlotClone;
}
var SLOTTABLE_IDENTIFIER = Symbol("radix.slottable");
function isSlottable(child) {
  return (
    reactExports.isValidElement(child) &&
    typeof child.type === "function" &&
    "__radixId" in child.type &&
    child.type.__radixId === SLOTTABLE_IDENTIFIER
  );
}
function mergeProps(slotProps, childProps) {
  const overrideProps = { ...childProps };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue) {
        overrideProps[propName] = (...args) => {
          const result = childPropValue(...args);
          slotPropValue(...args);
          return result;
        };
      } else if (slotPropValue) {
        overrideProps[propName] = slotPropValue;
      }
    } else if (propName === "style") {
      overrideProps[propName] = { ...slotPropValue, ...childPropValue };
    } else if (propName === "className") {
      overrideProps[propName] = [slotPropValue, childPropValue]
        .filter(Boolean)
        .join(" ");
    }
  }
  return { ...slotProps, ...overrideProps };
}
function getElementRef$1(element) {
  let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
}

function r(e) {
  var t,
    f,
    n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), (n += f));
    } else for (f in e) e[f] && (n && (n += " "), (n += f));
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r(e)) && (n && (n += " "), (n += t));
  return n;
}

const falsyToString = (value) =>
  typeof value === "boolean" ? `${value}` : value === 0 ? "0" : value;
const cx = clsx;
const cva = (base, config) => (props) => {
  var _config_compoundVariants;
  if ((config === null || config === void 0 ? void 0 : config.variants) == null)
    return cx(
      base,
      props === null || props === void 0 ? void 0 : props.class,
      props === null || props === void 0 ? void 0 : props.className
    );
  const { variants, defaultVariants } = config;
  const getVariantClassNames = Object.keys(variants).map((variant) => {
    const variantProp =
      props === null || props === void 0 ? void 0 : props[variant];
    const defaultVariantProp =
      defaultVariants === null || defaultVariants === void 0
        ? void 0
        : defaultVariants[variant];
    if (variantProp === null) return null;
    const variantKey =
      falsyToString(variantProp) || falsyToString(defaultVariantProp);
    return variants[variant][variantKey];
  });
  const propsWithoutUndefined =
    props &&
    Object.entries(props).reduce((acc, param) => {
      let [key, value] = param;
      if (value === undefined) {
        return acc;
      }
      acc[key] = value;
      return acc;
    }, {});
  const getCompoundVariantClassNames =
    config === null || config === void 0
      ? void 0
      : (_config_compoundVariants = config.compoundVariants) === null ||
        _config_compoundVariants === void 0
      ? void 0
      : _config_compoundVariants.reduce((acc, param) => {
          let {
            class: cvClass,
            className: cvClassName,
            ...compoundVariantOptions
          } = param;
          return Object.entries(compoundVariantOptions).every((param) => {
            let [key, value] = param;
            return Array.isArray(value)
              ? value.includes(
                  {
                    ...defaultVariants,
                    ...propsWithoutUndefined,
                  }[key]
                )
              : {
                  ...defaultVariants,
                  ...propsWithoutUndefined,
                }[key] === value;
          })
            ? [...acc, cvClass, cvClassName]
            : acc;
        }, []);
  return cx(
    base,
    getVariantClassNames,
    getCompoundVariantClassNames,
    props === null || props === void 0 ? void 0 : props.class,
    props === null || props === void 0 ? void 0 : props.className
  );
};

const CLASS_PART_SEPARATOR = "-";
const createClassGroupUtils = (config) => {
  const classMap = createClassMap(config);
  const { conflictingClassGroups, conflictingClassGroupModifiers } = config;
  const getClassGroupId = (className) => {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return (
      getGroupRecursive(classParts, classMap) ||
      getGroupIdForArbitraryProperty(className)
    );
  };
  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  };
  return {
    getClassGroupId,
    getConflictingClassGroupIds,
  };
};
const getGroupRecursive = (classParts, classPartObject) => {
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject
    ? getGroupRecursive(classParts.slice(1), nextClassPartObject)
    : undefined;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return undefined;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return classPartObject.validators.find(({ validator }) =>
    validator(classRest)
  )?.classGroupId;
};
const arbitraryPropertyRegex = /^\[(.+)\]$/;
const getGroupIdForArbitraryProperty = (className) => {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName =
      arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName?.substring(
      0,
      arbitraryPropertyClassName.indexOf(":")
    );
    if (property) {
      // I use two dots here because one dot is used as prefix for class groups in plugins
      return "arbitrary.." + property;
    }
  }
};
/**
 * Exported for testing only
 */
const createClassMap = (config) => {
  const { theme, classGroups } = config;
  const classMap = {
    nextPart: new Map(),
    validators: [],
  };
  for (const classGroupId in classGroups) {
    processClassesRecursively(
      classGroups[classGroupId],
      classMap,
      classGroupId,
      theme
    );
  }
  return classMap;
};
const processClassesRecursively = (
  classGroup,
  classPartObject,
  classGroupId,
  theme
) => {
  classGroup.forEach((classDefinition) => {
    if (typeof classDefinition === "string") {
      const classPartObjectToEdit =
        classDefinition === ""
          ? classPartObject
          : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(
          classDefinition(theme),
          classPartObject,
          classGroupId,
          theme
        );
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId,
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup]) => {
      processClassesRecursively(
        classGroup,
        getPart(classPartObject, key),
        classGroupId,
        theme
      );
    });
  });
};
const getPart = (classPartObject, path) => {
  let currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: new Map(),
        validators: [],
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
};
const isThemeGetter = (func) => func.isThemeGetter;

// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance
const createLruCache = (maxCacheSize) => {
  if (maxCacheSize < 1) {
    return {
      get: () => undefined,
      set: () => {},
    };
  }
  let cacheSize = 0;
  let cache = new Map();
  let previousCache = new Map();
  const update = (key, value) => {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = new Map();
    }
  };
  return {
    get(key) {
      let value = cache.get(key);
      if (value !== undefined) {
        return value;
      }
      if ((value = previousCache.get(key)) !== undefined) {
        update(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update(key, value);
      }
    },
  };
};
const IMPORTANT_MODIFIER = "!";
const MODIFIER_SEPARATOR = ":";
const MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;
const createParseClassName = (config) => {
  const { prefix, experimentalParseClassName } = config;
  /**
   * Parse class name into parts.
   *
   * Inspired by `splitAtTopLevelOnly` used in Tailwind CSS
   * @see https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js
   */
  let parseClassName = (className) => {
    const modifiers = [];
    let bracketDepth = 0;
    let parenDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index = 0; index < className.length; index++) {
      let currentCharacter = className[index];
      if (bracketDepth === 0 && parenDepth === 0) {
        if (currentCharacter === MODIFIER_SEPARATOR) {
          modifiers.push(className.slice(modifierStart, index));
          modifierStart = index + MODIFIER_SEPARATOR_LENGTH;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      } else if (currentCharacter === "(") {
        parenDepth++;
      } else if (currentCharacter === ")") {
        parenDepth--;
      }
    }
    const baseClassNameWithImportantModifier =
      modifiers.length === 0 ? className : className.substring(modifierStart);
    const baseClassName = stripImportantModifier(
      baseClassNameWithImportantModifier
    );
    const hasImportantModifier =
      baseClassName !== baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition =
      postfixModifierPosition && postfixModifierPosition > modifierStart
        ? postfixModifierPosition - modifierStart
        : undefined;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition,
    };
  };
  if (prefix) {
    const fullPrefix = prefix + MODIFIER_SEPARATOR;
    const parseClassNameOriginal = parseClassName;
    parseClassName = (className) =>
      className.startsWith(fullPrefix)
        ? parseClassNameOriginal(className.substring(fullPrefix.length))
        : {
            isExternal: true,
            modifiers: [],
            hasImportantModifier: false,
            baseClassName: className,
            maybePostfixModifierPosition: undefined,
          };
  }
  if (experimentalParseClassName) {
    const parseClassNameOriginal = parseClassName;
    parseClassName = (className) =>
      experimentalParseClassName({
        className,
        parseClassName: parseClassNameOriginal,
      });
  }
  return parseClassName;
};
const stripImportantModifier = (baseClassName) => {
  if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {
    return baseClassName.substring(0, baseClassName.length - 1);
  }
  /**
   * In Tailwind CSS v3 the important modifier was at the start of the base class name. This is still supported for legacy reasons.
   * @see https://github.com/dcastil/tailwind-merge/issues/513#issuecomment-2614029864
   */
  if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {
    return baseClassName.substring(1);
  }
  return baseClassName;
};

/**
 * Sorts modifiers according to following schema:
 * - Predefined modifiers are sorted alphabetically
 * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it
 */
const createSortModifiers = (config) => {
  const orderSensitiveModifiers = Object.fromEntries(
    config.orderSensitiveModifiers.map((modifier) => [modifier, true])
  );
  const sortModifiers = (modifiers) => {
    if (modifiers.length <= 1) {
      return modifiers;
    }
    const sortedModifiers = [];
    let unsortedModifiers = [];
    modifiers.forEach((modifier) => {
      const isPositionSensitive =
        modifier[0] === "[" || orderSensitiveModifiers[modifier];
      if (isPositionSensitive) {
        sortedModifiers.push(...unsortedModifiers.sort(), modifier);
        unsortedModifiers = [];
      } else {
        unsortedModifiers.push(modifier);
      }
    });
    sortedModifiers.push(...unsortedModifiers.sort());
    return sortedModifiers;
  };
  return sortModifiers;
};
const createConfigUtils = (config) => ({
  cache: createLruCache(config.cacheSize),
  parseClassName: createParseClassName(config),
  sortModifiers: createSortModifiers(config),
  ...createClassGroupUtils(config),
});
const SPLIT_CLASSES_REGEX = /\s+/;
const mergeClassList = (classList, configUtils) => {
  const {
    parseClassName,
    getClassGroupId,
    getConflictingClassGroupIds,
    sortModifiers,
  } = configUtils;
  /**
   * Set of classGroupIds in following format:
   * `{importantModifier}{variantModifiers}{classGroupId}`
   * @example 'float'
   * @example 'hover:focus:bg-color'
   * @example 'md:!pr'
   */
  const classGroupsInConflict = [];
  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
  let result = "";
  for (let index = classNames.length - 1; index >= 0; index -= 1) {
    const originalClassName = classNames[index];
    const {
      isExternal,
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition,
    } = parseClassName(originalClassName);
    if (isExternal) {
      result = originalClassName + (result.length > 0 ? " " + result : result);
      continue;
    }
    let hasPostfixModifier = !!maybePostfixModifierPosition;
    let classGroupId = getClassGroupId(
      hasPostfixModifier
        ? baseClassName.substring(0, maybePostfixModifierPosition)
        : baseClassName
    );
    if (!classGroupId) {
      if (!hasPostfixModifier) {
        // Not a Tailwind class
        result =
          originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        // Not a Tailwind class
        result =
          originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(":");
    const modifierId = hasImportantModifier
      ? variantModifier + IMPORTANT_MODIFIER
      : variantModifier;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.includes(classId)) {
      // Tailwind class omitted due to conflict
      continue;
    }
    classGroupsInConflict.push(classId);
    const conflictGroups = getConflictingClassGroupIds(
      classGroupId,
      hasPostfixModifier
    );
    for (let i = 0; i < conflictGroups.length; ++i) {
      const group = conflictGroups[i];
      classGroupsInConflict.push(modifierId + group);
    }
    // Tailwind class not in conflict
    result = originalClassName + (result.length > 0 ? " " + result : result);
  }
  return result;
};

/**
 * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.
 *
 * Specifically:
 * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js
 * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts
 *
 * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)
 */
function twJoin() {
  let index = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index < arguments.length) {
    if ((argument = arguments[index++])) {
      if ((resolvedValue = toValue(argument))) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
const toValue = (mix) => {
  if (typeof mix === "string") {
    return mix;
  }
  let resolvedValue;
  let string = "";
  for (let k = 0; k < mix.length; k++) {
    if (mix[k]) {
      if ((resolvedValue = toValue(mix[k]))) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
};
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce(
      (previousConfig, createConfigCurrent) =>
        createConfigCurrent(previousConfig),
      createConfigFirst()
    );
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
const fromTheme = (key) => {
  const themeGetter = (theme) => theme[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
};
const arbitraryValueRegex = /^\[(?:(\w[\w-]*):)?(.+)\]$/i;
const arbitraryVariableRegex = /^\((?:(\w[\w-]*):)?(.+)\)$/i;
const fractionRegex = /^\d+\/\d+$/;
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex =
  /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\(.+\)$/;
// Shadow always begins with x and y offset separated by underscore optionally prepended by inset
const shadowRegex =
  /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex =
  /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
const isFraction = (value) => fractionRegex.test(value);
const isNumber = (value) => !!value && !Number.isNaN(Number(value));
const isInteger = (value) => !!value && Number.isInteger(Number(value));
const isPercent = (value) =>
  value.endsWith("%") && isNumber(value.slice(0, -1));
const isTshirtSize = (value) => tshirtUnitRegex.test(value);
const isAny = () => true;
const isLengthOnly = (value) =>
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
const isNever = () => false;
const isShadow = (value) => shadowRegex.test(value);
const isImage = (value) => imageRegex.test(value);
const isAnyNonArbitrary = (value) =>
  !isArbitraryValue(value) && !isArbitraryVariable(value);
const isArbitrarySize = (value) =>
  getIsArbitraryValue(value, isLabelSize, isNever);
const isArbitraryValue = (value) => arbitraryValueRegex.test(value);
const isArbitraryLength = (value) =>
  getIsArbitraryValue(value, isLabelLength, isLengthOnly);
const isArbitraryNumber = (value) =>
  getIsArbitraryValue(value, isLabelNumber, isNumber);
const isArbitraryPosition = (value) =>
  getIsArbitraryValue(value, isLabelPosition, isNever);
const isArbitraryImage = (value) =>
  getIsArbitraryValue(value, isLabelImage, isImage);
const isArbitraryShadow = (value) =>
  getIsArbitraryValue(value, isLabelShadow, isShadow);
const isArbitraryVariable = (value) => arbitraryVariableRegex.test(value);
const isArbitraryVariableLength = (value) =>
  getIsArbitraryVariable(value, isLabelLength);
const isArbitraryVariableFamilyName = (value) =>
  getIsArbitraryVariable(value, isLabelFamilyName);
const isArbitraryVariablePosition = (value) =>
  getIsArbitraryVariable(value, isLabelPosition);
const isArbitraryVariableSize = (value) =>
  getIsArbitraryVariable(value, isLabelSize);
const isArbitraryVariableImage = (value) =>
  getIsArbitraryVariable(value, isLabelImage);
const isArbitraryVariableShadow = (value) =>
  getIsArbitraryVariable(value, isLabelShadow, true);
// Helpers
const getIsArbitraryValue = (value, testLabel, testValue) => {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return testLabel(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
};
const getIsArbitraryVariable = (
  value,
  testLabel,
  shouldMatchNoLabel = false
) => {
  const result = arbitraryVariableRegex.exec(value);
  if (result) {
    if (result[1]) {
      return testLabel(result[1]);
    }
    return shouldMatchNoLabel;
  }
  return false;
};
// Labels
const isLabelPosition = (label) =>
  label === "position" || label === "percentage";
const isLabelImage = (label) => label === "image" || label === "url";
const isLabelSize = (label) =>
  label === "length" || label === "size" || label === "bg-size";
const isLabelLength = (label) => label === "length";
const isLabelNumber = (label) => label === "number";
const isLabelFamilyName = (label) => label === "family-name";
const isLabelShadow = (label) => label === "shadow";
const getDefaultConfig = () => {
  /**
   * Theme getters for theme variable namespaces
   * @see https://tailwindcss.com/docs/theme#theme-variable-namespaces
   */
  /***/
  const themeColor = fromTheme("color");
  const themeFont = fromTheme("font");
  const themeText = fromTheme("text");
  const themeFontWeight = fromTheme("font-weight");
  const themeTracking = fromTheme("tracking");
  const themeLeading = fromTheme("leading");
  const themeBreakpoint = fromTheme("breakpoint");
  const themeContainer = fromTheme("container");
  const themeSpacing = fromTheme("spacing");
  const themeRadius = fromTheme("radius");
  const themeShadow = fromTheme("shadow");
  const themeInsetShadow = fromTheme("inset-shadow");
  const themeTextShadow = fromTheme("text-shadow");
  const themeDropShadow = fromTheme("drop-shadow");
  const themeBlur = fromTheme("blur");
  const themePerspective = fromTheme("perspective");
  const themeAspect = fromTheme("aspect");
  const themeEase = fromTheme("ease");
  const themeAnimate = fromTheme("animate");
  /**
   * Helpers to avoid repeating the same scales
   *
   * We use functions that create a new array every time they're called instead of static arrays.
   * This ensures that users who modify any scale by mutating the array (e.g. with `array.push(element)`) don't accidentally mutate arrays in other parts of the config.
   */
  /***/
  const scaleBreak = () => [
    "auto",
    "avoid",
    "all",
    "avoid-page",
    "page",
    "left",
    "right",
    "column",
  ];
  const scalePosition = () => [
    "center",
    "top",
    "bottom",
    "left",
    "right",
    "top-left",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "left-top",
    "top-right",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "right-top",
    "bottom-right",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "right-bottom",
    "bottom-left",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "left-bottom",
  ];
  const scalePositionWithArbitrary = () => [
    ...scalePosition(),
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
  const scaleOverscroll = () => ["auto", "contain", "none"];
  const scaleUnambiguousSpacing = () => [
    isArbitraryVariable,
    isArbitraryValue,
    themeSpacing,
  ];
  const scaleInset = () => [
    isFraction,
    "full",
    "auto",
    ...scaleUnambiguousSpacing(),
  ];
  const scaleGridTemplateColsRows = () => [
    isInteger,
    "none",
    "subgrid",
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleGridColRowStartAndEnd = () => [
    "auto",
    {
      span: ["full", isInteger, isArbitraryVariable, isArbitraryValue],
    },
    isInteger,
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleGridColRowStartOrEnd = () => [
    isInteger,
    "auto",
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleGridAutoColsRows = () => [
    "auto",
    "min",
    "max",
    "fr",
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleAlignPrimaryAxis = () => [
    "start",
    "end",
    "center",
    "between",
    "around",
    "evenly",
    "stretch",
    "baseline",
    "center-safe",
    "end-safe",
  ];
  const scaleAlignSecondaryAxis = () => [
    "start",
    "end",
    "center",
    "stretch",
    "center-safe",
    "end-safe",
  ];
  const scaleMargin = () => ["auto", ...scaleUnambiguousSpacing()];
  const scaleSizing = () => [
    isFraction,
    "auto",
    "full",
    "dvw",
    "dvh",
    "lvw",
    "lvh",
    "svw",
    "svh",
    "min",
    "max",
    "fit",
    ...scaleUnambiguousSpacing(),
  ];
  const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];
  const scaleBgPosition = () => [
    ...scalePosition(),
    isArbitraryVariablePosition,
    isArbitraryPosition,
    {
      position: [isArbitraryVariable, isArbitraryValue],
    },
  ];
  const scaleBgRepeat = () => [
    "no-repeat",
    {
      repeat: ["", "x", "y", "space", "round"],
    },
  ];
  const scaleBgSize = () => [
    "auto",
    "cover",
    "contain",
    isArbitraryVariableSize,
    isArbitrarySize,
    {
      size: [isArbitraryVariable, isArbitraryValue],
    },
  ];
  const scaleGradientStopPosition = () => [
    isPercent,
    isArbitraryVariableLength,
    isArbitraryLength,
  ];
  const scaleRadius = () => [
    // Deprecated since Tailwind CSS v4.0.0
    "",
    "none",
    "full",
    themeRadius,
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleBorderWidth = () => [
    "",
    isNumber,
    isArbitraryVariableLength,
    isArbitraryLength,
  ];
  const scaleLineStyle = () => ["solid", "dashed", "dotted", "double"];
  const scaleBlendMode = () => [
    "normal",
    "multiply",
    "screen",
    "overlay",
    "darken",
    "lighten",
    "color-dodge",
    "color-burn",
    "hard-light",
    "soft-light",
    "difference",
    "exclusion",
    "hue",
    "saturation",
    "color",
    "luminosity",
  ];
  const scaleMaskImagePosition = () => [
    isNumber,
    isPercent,
    isArbitraryVariablePosition,
    isArbitraryPosition,
  ];
  const scaleBlur = () => [
    // Deprecated since Tailwind CSS v4.0.0
    "",
    "none",
    themeBlur,
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleRotate = () => [
    "none",
    isNumber,
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleScale = () => [
    "none",
    isNumber,
    isArbitraryVariable,
    isArbitraryValue,
  ];
  const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue];
  const scaleTranslate = () => [
    isFraction,
    "full",
    ...scaleUnambiguousSpacing(),
  ];
  return {
    cacheSize: 500,
    theme: {
      animate: ["spin", "ping", "pulse", "bounce"],
      aspect: ["video"],
      blur: [isTshirtSize],
      breakpoint: [isTshirtSize],
      color: [isAny],
      container: [isTshirtSize],
      "drop-shadow": [isTshirtSize],
      ease: ["in", "out", "in-out"],
      font: [isAnyNonArbitrary],
      "font-weight": [
        "thin",
        "extralight",
        "light",
        "normal",
        "medium",
        "semibold",
        "bold",
        "extrabold",
        "black",
      ],
      "inset-shadow": [isTshirtSize],
      leading: ["none", "tight", "snug", "normal", "relaxed", "loose"],
      perspective: [
        "dramatic",
        "near",
        "normal",
        "midrange",
        "distant",
        "none",
      ],
      radius: [isTshirtSize],
      shadow: [isTshirtSize],
      spacing: ["px", isNumber],
      text: [isTshirtSize],
      "text-shadow": [isTshirtSize],
      tracking: ["tighter", "tight", "normal", "wide", "wider", "widest"],
    },
    classGroups: {
      // --------------
      // --- Layout ---
      // --------------
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [
        {
          aspect: [
            "auto",
            "square",
            isFraction,
            isArbitraryValue,
            isArbitraryVariable,
            themeAspect,
          ],
        },
      ],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       * @deprecated since Tailwind CSS v4.0.0
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [
        {
          columns: [
            isNumber,
            isArbitraryValue,
            isArbitraryVariable,
            themeContainer,
          ],
        },
      ],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [
        {
          "break-after": scaleBreak(),
        },
      ],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [
        {
          "break-before": scaleBreak(),
        },
      ],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [
        {
          "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"],
        },
      ],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [
        {
          "box-decoration": ["slice", "clone"],
        },
      ],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [
        {
          box: ["border", "content"],
        },
      ],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: [
        "block",
        "inline-block",
        "inline",
        "flex",
        "inline-flex",
        "table",
        "inline-table",
        "table-caption",
        "table-cell",
        "table-column",
        "table-column-group",
        "table-footer-group",
        "table-header-group",
        "table-row-group",
        "table-row",
        "flow-root",
        "grid",
        "inline-grid",
        "contents",
        "list-item",
        "hidden",
      ],
      /**
       * Screen Reader Only
       * @see https://tailwindcss.com/docs/display#screen-reader-only
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [
        {
          float: ["right", "left", "none", "start", "end"],
        },
      ],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [
        {
          clear: ["left", "right", "both", "none", "start", "end"],
        },
      ],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [
        {
          object: ["contain", "cover", "fill", "none", "scale-down"],
        },
      ],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [
        {
          object: scalePositionWithArbitrary(),
        },
      ],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [
        {
          overflow: scaleOverflow(),
        },
      ],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [
        {
          "overflow-x": scaleOverflow(),
        },
      ],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [
        {
          "overflow-y": scaleOverflow(),
        },
      ],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [
        {
          overscroll: scaleOverscroll(),
        },
      ],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [
        {
          "overscroll-x": scaleOverscroll(),
        },
      ],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [
        {
          "overscroll-y": scaleOverscroll(),
        },
      ],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [
        {
          inset: scaleInset(),
        },
      ],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [
        {
          "inset-x": scaleInset(),
        },
      ],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [
        {
          "inset-y": scaleInset(),
        },
      ],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [
        {
          start: scaleInset(),
        },
      ],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [
        {
          end: scaleInset(),
        },
      ],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [
        {
          top: scaleInset(),
        },
      ],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [
        {
          right: scaleInset(),
        },
      ],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [
        {
          bottom: scaleInset(),
        },
      ],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [
        {
          left: scaleInset(),
        },
      ],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [
        {
          z: [isInteger, "auto", isArbitraryVariable, isArbitraryValue],
        },
      ],
      // ------------------------
      // --- Flexbox and Grid ---
      // ------------------------
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [
        {
          basis: [
            isFraction,
            "full",
            "auto",
            themeContainer,
            ...scaleUnambiguousSpacing(),
          ],
        },
      ],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [
        {
          flex: ["row", "row-reverse", "col", "col-reverse"],
        },
      ],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [
        {
          flex: ["nowrap", "wrap", "wrap-reverse"],
        },
      ],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [
        {
          flex: [
            isNumber,
            isFraction,
            "auto",
            "initial",
            "none",
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [
        {
          grow: ["", isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [
        {
          shrink: ["", isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [
        {
          order: [
            isInteger,
            "first",
            "last",
            "none",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [
        {
          "grid-cols": scaleGridTemplateColsRows(),
        },
      ],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [
        {
          col: scaleGridColRowStartAndEnd(),
        },
      ],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [
        {
          "col-start": scaleGridColRowStartOrEnd(),
        },
      ],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [
        {
          "col-end": scaleGridColRowStartOrEnd(),
        },
      ],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [
        {
          "grid-rows": scaleGridTemplateColsRows(),
        },
      ],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [
        {
          row: scaleGridColRowStartAndEnd(),
        },
      ],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [
        {
          "row-start": scaleGridColRowStartOrEnd(),
        },
      ],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [
        {
          "row-end": scaleGridColRowStartOrEnd(),
        },
      ],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [
        {
          "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"],
        },
      ],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [
        {
          "auto-cols": scaleGridAutoColsRows(),
        },
      ],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [
        {
          "auto-rows": scaleGridAutoColsRows(),
        },
      ],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [
        {
          gap: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [
        {
          "gap-x": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [
        {
          "gap-y": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [
        {
          justify: [...scaleAlignPrimaryAxis(), "normal"],
        },
      ],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [
        {
          "justify-items": [...scaleAlignSecondaryAxis(), "normal"],
        },
      ],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [
        {
          "justify-self": ["auto", ...scaleAlignSecondaryAxis()],
        },
      ],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [
        {
          content: ["normal", ...scaleAlignPrimaryAxis()],
        },
      ],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [
        {
          items: [
            ...scaleAlignSecondaryAxis(),
            {
              baseline: ["", "last"],
            },
          ],
        },
      ],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [
        {
          self: [
            "auto",
            ...scaleAlignSecondaryAxis(),
            {
              baseline: ["", "last"],
            },
          ],
        },
      ],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [
        {
          "place-content": scaleAlignPrimaryAxis(),
        },
      ],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [
        {
          "place-items": [...scaleAlignSecondaryAxis(), "baseline"],
        },
      ],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [
        {
          "place-self": ["auto", ...scaleAlignSecondaryAxis()],
        },
      ],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [
        {
          p: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [
        {
          px: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [
        {
          py: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [
        {
          ps: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [
        {
          pe: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [
        {
          pt: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [
        {
          pr: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [
        {
          pb: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [
        {
          pl: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [
        {
          m: scaleMargin(),
        },
      ],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [
        {
          mx: scaleMargin(),
        },
      ],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [
        {
          my: scaleMargin(),
        },
      ],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [
        {
          ms: scaleMargin(),
        },
      ],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [
        {
          me: scaleMargin(),
        },
      ],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [
        {
          mt: scaleMargin(),
        },
      ],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [
        {
          mr: scaleMargin(),
        },
      ],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [
        {
          mb: scaleMargin(),
        },
      ],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [
        {
          ml: scaleMargin(),
        },
      ],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-x": [
        {
          "space-x": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-y": [
        {
          "space-y": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-y-reverse": ["space-y-reverse"],
      // --------------
      // --- Sizing ---
      // --------------
      /**
       * Size
       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height
       */
      size: [
        {
          size: scaleSizing(),
        },
      ],
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [
        {
          w: [themeContainer, "screen", ...scaleSizing()],
        },
      ],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [
        {
          "min-w": [
            themeContainer,
            "screen" /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */,
            "none",
            ...scaleSizing(),
          ],
        },
      ],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [
        {
          "max-w": [
            themeContainer,
            "screen",
            "none" /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */,
            "prose" /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */,
            {
              screen: [themeBreakpoint],
            },
            ...scaleSizing(),
          ],
        },
      ],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [
        {
          h: ["screen", "lh", ...scaleSizing()],
        },
      ],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [
        {
          "min-h": ["screen", "lh", "none", ...scaleSizing()],
        },
      ],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [
        {
          "max-h": ["screen", "lh", ...scaleSizing()],
        },
      ],
      // ------------------
      // --- Typography ---
      // ------------------
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [
        {
          text: [
            "base",
            themeText,
            isArbitraryVariableLength,
            isArbitraryLength,
          ],
        },
      ],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [
        {
          font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber],
        },
      ],
      /**
       * Font Stretch
       * @see https://tailwindcss.com/docs/font-stretch
       */
      "font-stretch": [
        {
          "font-stretch": [
            "ultra-condensed",
            "extra-condensed",
            "condensed",
            "semi-condensed",
            "normal",
            "semi-expanded",
            "expanded",
            "extra-expanded",
            "ultra-expanded",
            isPercent,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [
        {
          font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont],
        },
      ],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [
        {
          tracking: [themeTracking, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [
        {
          "line-clamp": [
            isNumber,
            "none",
            isArbitraryVariable,
            isArbitraryNumber,
          ],
        },
      ],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [
        {
          leading: [
            /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
            themeLeading,
            ...scaleUnambiguousSpacing(),
          ],
        },
      ],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [
        {
          "list-image": ["none", isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [
        {
          list: ["inside", "outside"],
        },
      ],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [
        {
          list: [
            "disc",
            "decimal",
            "none",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [
        {
          text: ["left", "center", "right", "justify", "start", "end"],
        },
      ],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://v3.tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [
        {
          placeholder: scaleColor(),
        },
      ],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [
        {
          text: scaleColor(),
        },
      ],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": [
        "underline",
        "overline",
        "line-through",
        "no-underline",
      ],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [
        {
          decoration: [...scaleLineStyle(), "wavy"],
        },
      ],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [
        {
          decoration: [
            isNumber,
            "from-font",
            "auto",
            isArbitraryVariable,
            isArbitraryLength,
          ],
        },
      ],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [
        {
          decoration: scaleColor(),
        },
      ],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [
        {
          "underline-offset": [
            isNumber,
            "auto",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [
        {
          text: ["wrap", "nowrap", "balance", "pretty"],
        },
      ],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [
        {
          indent: scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [
        {
          align: [
            "baseline",
            "top",
            "middle",
            "bottom",
            "text-top",
            "text-bottom",
            "sub",
            "super",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [
        {
          whitespace: [
            "normal",
            "nowrap",
            "pre",
            "pre-line",
            "pre-wrap",
            "break-spaces",
          ],
        },
      ],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [
        {
          break: ["normal", "words", "all", "keep"],
        },
      ],
      /**
       * Overflow Wrap
       * @see https://tailwindcss.com/docs/overflow-wrap
       */
      wrap: [
        {
          wrap: ["break-word", "anywhere", "normal"],
        },
      ],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [
        {
          hyphens: ["none", "manual", "auto"],
        },
      ],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [
        {
          content: ["none", isArbitraryVariable, isArbitraryValue],
        },
      ],
      // -------------------
      // --- Backgrounds ---
      // -------------------
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [
        {
          bg: ["fixed", "local", "scroll"],
        },
      ],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [
        {
          "bg-clip": ["border", "padding", "content", "text"],
        },
      ],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [
        {
          "bg-origin": ["border", "padding", "content"],
        },
      ],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [
        {
          bg: scaleBgPosition(),
        },
      ],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [
        {
          bg: scaleBgRepeat(),
        },
      ],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [
        {
          bg: scaleBgSize(),
        },
      ],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [
        {
          bg: [
            "none",
            {
              linear: [
                {
                  to: ["t", "tr", "r", "br", "b", "bl", "l", "tl"],
                },
                isInteger,
                isArbitraryVariable,
                isArbitraryValue,
              ],
              radial: ["", isArbitraryVariable, isArbitraryValue],
              conic: [isInteger, isArbitraryVariable, isArbitraryValue],
            },
            isArbitraryVariableImage,
            isArbitraryImage,
          ],
        },
      ],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [
        {
          bg: scaleColor(),
        },
      ],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [
        {
          from: scaleGradientStopPosition(),
        },
      ],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [
        {
          via: scaleGradientStopPosition(),
        },
      ],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [
        {
          to: scaleGradientStopPosition(),
        },
      ],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [
        {
          from: scaleColor(),
        },
      ],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [
        {
          via: scaleColor(),
        },
      ],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [
        {
          to: scaleColor(),
        },
      ],
      // ---------------
      // --- Borders ---
      // ---------------
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [
        {
          rounded: scaleRadius(),
        },
      ],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [
        {
          "rounded-s": scaleRadius(),
        },
      ],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [
        {
          "rounded-e": scaleRadius(),
        },
      ],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [
        {
          "rounded-t": scaleRadius(),
        },
      ],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [
        {
          "rounded-r": scaleRadius(),
        },
      ],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [
        {
          "rounded-b": scaleRadius(),
        },
      ],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [
        {
          "rounded-l": scaleRadius(),
        },
      ],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [
        {
          "rounded-ss": scaleRadius(),
        },
      ],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [
        {
          "rounded-se": scaleRadius(),
        },
      ],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [
        {
          "rounded-ee": scaleRadius(),
        },
      ],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [
        {
          "rounded-es": scaleRadius(),
        },
      ],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [
        {
          "rounded-tl": scaleRadius(),
        },
      ],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [
        {
          "rounded-tr": scaleRadius(),
        },
      ],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [
        {
          "rounded-br": scaleRadius(),
        },
      ],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [
        {
          "rounded-bl": scaleRadius(),
        },
      ],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [
        {
          border: scaleBorderWidth(),
        },
      ],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [
        {
          "border-x": scaleBorderWidth(),
        },
      ],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [
        {
          "border-y": scaleBorderWidth(),
        },
      ],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [
        {
          "border-s": scaleBorderWidth(),
        },
      ],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [
        {
          "border-e": scaleBorderWidth(),
        },
      ],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [
        {
          "border-t": scaleBorderWidth(),
        },
      ],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [
        {
          "border-r": scaleBorderWidth(),
        },
      ],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [
        {
          "border-b": scaleBorderWidth(),
        },
      ],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [
        {
          "border-l": scaleBorderWidth(),
        },
      ],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-x": [
        {
          "divide-x": scaleBorderWidth(),
        },
      ],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-y": [
        {
          "divide-y": scaleBorderWidth(),
        },
      ],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [
        {
          border: [...scaleLineStyle(), "hidden", "none"],
        },
      ],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style
       */
      "divide-style": [
        {
          divide: [...scaleLineStyle(), "hidden", "none"],
        },
      ],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [
        {
          border: scaleColor(),
        },
      ],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [
        {
          "border-x": scaleColor(),
        },
      ],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [
        {
          "border-y": scaleColor(),
        },
      ],
      /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-s": [
        {
          "border-s": scaleColor(),
        },
      ],
      /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-e": [
        {
          "border-e": scaleColor(),
        },
      ],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [
        {
          "border-t": scaleColor(),
        },
      ],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [
        {
          "border-r": scaleColor(),
        },
      ],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [
        {
          "border-b": scaleColor(),
        },
      ],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [
        {
          "border-l": scaleColor(),
        },
      ],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [
        {
          divide: scaleColor(),
        },
      ],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [
        {
          outline: [...scaleLineStyle(), "none", "hidden"],
        },
      ],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [
        {
          "outline-offset": [isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [
        {
          outline: ["", isNumber, isArbitraryVariableLength, isArbitraryLength],
        },
      ],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [
        {
          outline: scaleColor(),
        },
      ],
      // ---------------
      // --- Effects ---
      // ---------------
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [
        {
          shadow: [
            // Deprecated since Tailwind CSS v4.0.0
            "",
            "none",
            themeShadow,
            isArbitraryVariableShadow,
            isArbitraryShadow,
          ],
        },
      ],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color
       */
      "shadow-color": [
        {
          shadow: scaleColor(),
        },
      ],
      /**
       * Inset Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow
       */
      "inset-shadow": [
        {
          "inset-shadow": [
            "none",
            themeInsetShadow,
            isArbitraryVariableShadow,
            isArbitraryShadow,
          ],
        },
      ],
      /**
       * Inset Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color
       */
      "inset-shadow-color": [
        {
          "inset-shadow": scaleColor(),
        },
      ],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring
       */
      "ring-w": [
        {
          ring: scaleBorderWidth(),
        },
      ],
      /**
       * Ring Width Inset
       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color
       */
      "ring-color": [
        {
          ring: scaleColor(),
        },
      ],
      /**
       * Ring Offset Width
       * @see https://v3.tailwindcss.com/docs/ring-offset-width
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-offset-w": [
        {
          "ring-offset": [isNumber, isArbitraryLength],
        },
      ],
      /**
       * Ring Offset Color
       * @see https://v3.tailwindcss.com/docs/ring-offset-color
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-offset-color": [
        {
          "ring-offset": scaleColor(),
        },
      ],
      /**
       * Inset Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring
       */
      "inset-ring-w": [
        {
          "inset-ring": scaleBorderWidth(),
        },
      ],
      /**
       * Inset Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color
       */
      "inset-ring-color": [
        {
          "inset-ring": scaleColor(),
        },
      ],
      /**
       * Text Shadow
       * @see https://tailwindcss.com/docs/text-shadow
       */
      "text-shadow": [
        {
          "text-shadow": [
            "none",
            themeTextShadow,
            isArbitraryVariableShadow,
            isArbitraryShadow,
          ],
        },
      ],
      /**
       * Text Shadow Color
       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color
       */
      "text-shadow-color": [
        {
          "text-shadow": scaleColor(),
        },
      ],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [
        {
          opacity: [isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [
        {
          "mix-blend": [...scaleBlendMode(), "plus-darker", "plus-lighter"],
        },
      ],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [
        {
          "bg-blend": scaleBlendMode(),
        },
      ],
      /**
       * Mask Clip
       * @see https://tailwindcss.com/docs/mask-clip
       */
      "mask-clip": [
        {
          "mask-clip": [
            "border",
            "padding",
            "content",
            "fill",
            "stroke",
            "view",
          ],
        },
        "mask-no-clip",
      ],
      /**
       * Mask Composite
       * @see https://tailwindcss.com/docs/mask-composite
       */
      "mask-composite": [
        {
          mask: ["add", "subtract", "intersect", "exclude"],
        },
      ],
      /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */
      "mask-image-linear-pos": [
        {
          "mask-linear": [isNumber],
        },
      ],
      "mask-image-linear-from-pos": [
        {
          "mask-linear-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-linear-to-pos": [
        {
          "mask-linear-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-linear-from-color": [
        {
          "mask-linear-from": scaleColor(),
        },
      ],
      "mask-image-linear-to-color": [
        {
          "mask-linear-to": scaleColor(),
        },
      ],
      "mask-image-t-from-pos": [
        {
          "mask-t-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-t-to-pos": [
        {
          "mask-t-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-t-from-color": [
        {
          "mask-t-from": scaleColor(),
        },
      ],
      "mask-image-t-to-color": [
        {
          "mask-t-to": scaleColor(),
        },
      ],
      "mask-image-r-from-pos": [
        {
          "mask-r-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-r-to-pos": [
        {
          "mask-r-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-r-from-color": [
        {
          "mask-r-from": scaleColor(),
        },
      ],
      "mask-image-r-to-color": [
        {
          "mask-r-to": scaleColor(),
        },
      ],
      "mask-image-b-from-pos": [
        {
          "mask-b-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-b-to-pos": [
        {
          "mask-b-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-b-from-color": [
        {
          "mask-b-from": scaleColor(),
        },
      ],
      "mask-image-b-to-color": [
        {
          "mask-b-to": scaleColor(),
        },
      ],
      "mask-image-l-from-pos": [
        {
          "mask-l-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-l-to-pos": [
        {
          "mask-l-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-l-from-color": [
        {
          "mask-l-from": scaleColor(),
        },
      ],
      "mask-image-l-to-color": [
        {
          "mask-l-to": scaleColor(),
        },
      ],
      "mask-image-x-from-pos": [
        {
          "mask-x-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-x-to-pos": [
        {
          "mask-x-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-x-from-color": [
        {
          "mask-x-from": scaleColor(),
        },
      ],
      "mask-image-x-to-color": [
        {
          "mask-x-to": scaleColor(),
        },
      ],
      "mask-image-y-from-pos": [
        {
          "mask-y-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-y-to-pos": [
        {
          "mask-y-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-y-from-color": [
        {
          "mask-y-from": scaleColor(),
        },
      ],
      "mask-image-y-to-color": [
        {
          "mask-y-to": scaleColor(),
        },
      ],
      "mask-image-radial": [
        {
          "mask-radial": [isArbitraryVariable, isArbitraryValue],
        },
      ],
      "mask-image-radial-from-pos": [
        {
          "mask-radial-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-radial-to-pos": [
        {
          "mask-radial-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-radial-from-color": [
        {
          "mask-radial-from": scaleColor(),
        },
      ],
      "mask-image-radial-to-color": [
        {
          "mask-radial-to": scaleColor(),
        },
      ],
      "mask-image-radial-shape": [
        {
          "mask-radial": ["circle", "ellipse"],
        },
      ],
      "mask-image-radial-size": [
        {
          "mask-radial": [
            {
              closest: ["side", "corner"],
              farthest: ["side", "corner"],
            },
          ],
        },
      ],
      "mask-image-radial-pos": [
        {
          "mask-radial-at": scalePosition(),
        },
      ],
      "mask-image-conic-pos": [
        {
          "mask-conic": [isNumber],
        },
      ],
      "mask-image-conic-from-pos": [
        {
          "mask-conic-from": scaleMaskImagePosition(),
        },
      ],
      "mask-image-conic-to-pos": [
        {
          "mask-conic-to": scaleMaskImagePosition(),
        },
      ],
      "mask-image-conic-from-color": [
        {
          "mask-conic-from": scaleColor(),
        },
      ],
      "mask-image-conic-to-color": [
        {
          "mask-conic-to": scaleColor(),
        },
      ],
      /**
       * Mask Mode
       * @see https://tailwindcss.com/docs/mask-mode
       */
      "mask-mode": [
        {
          mask: ["alpha", "luminance", "match"],
        },
      ],
      /**
       * Mask Origin
       * @see https://tailwindcss.com/docs/mask-origin
       */
      "mask-origin": [
        {
          "mask-origin": [
            "border",
            "padding",
            "content",
            "fill",
            "stroke",
            "view",
          ],
        },
      ],
      /**
       * Mask Position
       * @see https://tailwindcss.com/docs/mask-position
       */
      "mask-position": [
        {
          mask: scaleBgPosition(),
        },
      ],
      /**
       * Mask Repeat
       * @see https://tailwindcss.com/docs/mask-repeat
       */
      "mask-repeat": [
        {
          mask: scaleBgRepeat(),
        },
      ],
      /**
       * Mask Size
       * @see https://tailwindcss.com/docs/mask-size
       */
      "mask-size": [
        {
          mask: scaleBgSize(),
        },
      ],
      /**
       * Mask Type
       * @see https://tailwindcss.com/docs/mask-type
       */
      "mask-type": [
        {
          "mask-type": ["alpha", "luminance"],
        },
      ],
      /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */
      "mask-image": [
        {
          mask: ["none", isArbitraryVariable, isArbitraryValue],
        },
      ],
      // ---------------
      // --- Filters ---
      // ---------------
      /**
       * Filter
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [
        {
          filter: [
            // Deprecated since Tailwind CSS v3.0.0
            "",
            "none",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [
        {
          blur: scaleBlur(),
        },
      ],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [
        {
          brightness: [isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [
        {
          contrast: [isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [
        {
          "drop-shadow": [
            // Deprecated since Tailwind CSS v4.0.0
            "",
            "none",
            themeDropShadow,
            isArbitraryVariableShadow,
            isArbitraryShadow,
          ],
        },
      ],
      /**
       * Drop Shadow Color
       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color
       */
      "drop-shadow-color": [
        {
          "drop-shadow": scaleColor(),
        },
      ],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [
        {
          grayscale: ["", isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [
        {
          "hue-rotate": [isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [
        {
          invert: ["", isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [
        {
          saturate: [isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [
        {
          sepia: ["", isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Backdrop Filter
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [
        {
          "backdrop-filter": [
            // Deprecated since Tailwind CSS v3.0.0
            "",
            "none",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [
        {
          "backdrop-blur": scaleBlur(),
        },
      ],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [
        {
          "backdrop-brightness": [
            isNumber,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [
        {
          "backdrop-contrast": [
            isNumber,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [
        {
          "backdrop-grayscale": [
            "",
            isNumber,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [
        {
          "backdrop-hue-rotate": [
            isNumber,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [
        {
          "backdrop-invert": [
            "",
            isNumber,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [
        {
          "backdrop-opacity": [isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [
        {
          "backdrop-saturate": [
            isNumber,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [
        {
          "backdrop-sepia": [
            "",
            isNumber,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      // --------------
      // --- Tables ---
      // --------------
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [
        {
          border: ["collapse", "separate"],
        },
      ],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [
        {
          "border-spacing": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [
        {
          "border-spacing-x": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [
        {
          "border-spacing-y": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [
        {
          table: ["auto", "fixed"],
        },
      ],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [
        {
          caption: ["top", "bottom"],
        },
      ],
      // ---------------------------------
      // --- Transitions and Animation ---
      // ---------------------------------
      /**
       * Transition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [
        {
          transition: [
            "",
            "all",
            "colors",
            "opacity",
            "shadow",
            "transform",
            "none",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Transition Behavior
       * @see https://tailwindcss.com/docs/transition-behavior
       */
      "transition-behavior": [
        {
          transition: ["normal", "discrete"],
        },
      ],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [
        {
          duration: [
            isNumber,
            "initial",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [
        {
          ease: [
            "linear",
            "initial",
            themeEase,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [
        {
          delay: [isNumber, isArbitraryVariable, isArbitraryValue],
        },
      ],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [
        {
          animate: [
            "none",
            themeAnimate,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      // ------------------
      // --- Transforms ---
      // ------------------
      /**
       * Backface Visibility
       * @see https://tailwindcss.com/docs/backface-visibility
       */
      backface: [
        {
          backface: ["hidden", "visible"],
        },
      ],
      /**
       * Perspective
       * @see https://tailwindcss.com/docs/perspective
       */
      perspective: [
        {
          perspective: [
            themePerspective,
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Perspective Origin
       * @see https://tailwindcss.com/docs/perspective-origin
       */
      "perspective-origin": [
        {
          "perspective-origin": scalePositionWithArbitrary(),
        },
      ],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [
        {
          rotate: scaleRotate(),
        },
      ],
      /**
       * Rotate X
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-x": [
        {
          "rotate-x": scaleRotate(),
        },
      ],
      /**
       * Rotate Y
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-y": [
        {
          "rotate-y": scaleRotate(),
        },
      ],
      /**
       * Rotate Z
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-z": [
        {
          "rotate-z": scaleRotate(),
        },
      ],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [
        {
          scale: scaleScale(),
        },
      ],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [
        {
          "scale-x": scaleScale(),
        },
      ],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [
        {
          "scale-y": scaleScale(),
        },
      ],
      /**
       * Scale Z
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-z": [
        {
          "scale-z": scaleScale(),
        },
      ],
      /**
       * Scale 3D
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-3d": ["scale-3d"],
      /**
       * Skew
       * @see https://tailwindcss.com/docs/skew
       */
      skew: [
        {
          skew: scaleSkew(),
        },
      ],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [
        {
          "skew-x": scaleSkew(),
        },
      ],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [
        {
          "skew-y": scaleSkew(),
        },
      ],
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [
        {
          transform: [
            isArbitraryVariable,
            isArbitraryValue,
            "",
            "none",
            "gpu",
            "cpu",
          ],
        },
      ],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [
        {
          origin: scalePositionWithArbitrary(),
        },
      ],
      /**
       * Transform Style
       * @see https://tailwindcss.com/docs/transform-style
       */
      "transform-style": [
        {
          transform: ["3d", "flat"],
        },
      ],
      /**
       * Translate
       * @see https://tailwindcss.com/docs/translate
       */
      translate: [
        {
          translate: scaleTranslate(),
        },
      ],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [
        {
          "translate-x": scaleTranslate(),
        },
      ],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [
        {
          "translate-y": scaleTranslate(),
        },
      ],
      /**
       * Translate Z
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-z": [
        {
          "translate-z": scaleTranslate(),
        },
      ],
      /**
       * Translate None
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-none": ["translate-none"],
      // ---------------------
      // --- Interactivity ---
      // ---------------------
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [
        {
          accent: scaleColor(),
        },
      ],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [
        {
          appearance: ["none", "auto"],
        },
      ],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [
        {
          caret: scaleColor(),
        },
      ],
      /**
       * Color Scheme
       * @see https://tailwindcss.com/docs/color-scheme
       */
      "color-scheme": [
        {
          scheme: [
            "normal",
            "dark",
            "light",
            "light-dark",
            "only-dark",
            "only-light",
          ],
        },
      ],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [
        {
          cursor: [
            "auto",
            "default",
            "pointer",
            "wait",
            "text",
            "move",
            "help",
            "not-allowed",
            "none",
            "context-menu",
            "progress",
            "cell",
            "crosshair",
            "vertical-text",
            "alias",
            "copy",
            "no-drop",
            "grab",
            "grabbing",
            "all-scroll",
            "col-resize",
            "row-resize",
            "n-resize",
            "e-resize",
            "s-resize",
            "w-resize",
            "ne-resize",
            "nw-resize",
            "se-resize",
            "sw-resize",
            "ew-resize",
            "ns-resize",
            "nesw-resize",
            "nwse-resize",
            "zoom-in",
            "zoom-out",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      /**
       * Field Sizing
       * @see https://tailwindcss.com/docs/field-sizing
       */
      "field-sizing": [
        {
          "field-sizing": ["fixed", "content"],
        },
      ],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [
        {
          "pointer-events": ["auto", "none"],
        },
      ],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [
        {
          resize: ["none", "", "y", "x"],
        },
      ],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [
        {
          scroll: ["auto", "smooth"],
        },
      ],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [
        {
          "scroll-m": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [
        {
          "scroll-mx": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [
        {
          "scroll-my": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [
        {
          "scroll-ms": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [
        {
          "scroll-me": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [
        {
          "scroll-mt": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [
        {
          "scroll-mr": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [
        {
          "scroll-mb": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [
        {
          "scroll-ml": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [
        {
          "scroll-p": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [
        {
          "scroll-px": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [
        {
          "scroll-py": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [
        {
          "scroll-ps": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [
        {
          "scroll-pe": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [
        {
          "scroll-pt": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [
        {
          "scroll-pr": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [
        {
          "scroll-pb": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [
        {
          "scroll-pl": scaleUnambiguousSpacing(),
        },
      ],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [
        {
          snap: ["start", "end", "center", "align-none"],
        },
      ],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [
        {
          snap: ["normal", "always"],
        },
      ],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [
        {
          snap: ["none", "x", "y", "both"],
        },
      ],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [
        {
          snap: ["mandatory", "proximity"],
        },
      ],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [
        {
          touch: ["auto", "none", "manipulation"],
        },
      ],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [
        {
          "touch-pan": ["x", "left", "right"],
        },
      ],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [
        {
          "touch-pan": ["y", "up", "down"],
        },
      ],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [
        {
          select: ["none", "text", "all", "auto"],
        },
      ],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [
        {
          "will-change": [
            "auto",
            "scroll",
            "contents",
            "transform",
            isArbitraryVariable,
            isArbitraryValue,
          ],
        },
      ],
      // -----------
      // --- SVG ---
      // -----------
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [
        {
          fill: ["none", ...scaleColor()],
        },
      ],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [
        {
          stroke: [
            isNumber,
            isArbitraryVariableLength,
            isArbitraryLength,
            isArbitraryNumber,
          ],
        },
      ],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [
        {
          stroke: ["none", ...scaleColor()],
        },
      ],
      // ---------------------
      // --- Accessibility ---
      // ---------------------
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [
        {
          "forced-color-adjust": ["auto", "none"],
        },
      ],
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: [
        "inset-x",
        "inset-y",
        "start",
        "end",
        "top",
        "right",
        "bottom",
        "left",
      ],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": [
        "fvn-ordinal",
        "fvn-slashed-zero",
        "fvn-figure",
        "fvn-spacing",
        "fvn-fraction",
      ],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: [
        "rounded-s",
        "rounded-e",
        "rounded-t",
        "rounded-r",
        "rounded-b",
        "rounded-l",
        "rounded-ss",
        "rounded-se",
        "rounded-ee",
        "rounded-es",
        "rounded-tl",
        "rounded-tr",
        "rounded-br",
        "rounded-bl",
      ],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": [
        "border-w-x",
        "border-w-y",
        "border-w-s",
        "border-w-e",
        "border-w-t",
        "border-w-r",
        "border-w-b",
        "border-w-l",
      ],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": [
        "border-color-x",
        "border-color-y",
        "border-color-s",
        "border-color-e",
        "border-color-t",
        "border-color-r",
        "border-color-b",
        "border-color-l",
      ],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      translate: ["translate-x", "translate-y", "translate-none"],
      "translate-none": [
        "translate",
        "translate-x",
        "translate-y",
        "translate-z",
      ],
      "scroll-m": [
        "scroll-mx",
        "scroll-my",
        "scroll-ms",
        "scroll-me",
        "scroll-mt",
        "scroll-mr",
        "scroll-mb",
        "scroll-ml",
      ],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": [
        "scroll-px",
        "scroll-py",
        "scroll-ps",
        "scroll-pe",
        "scroll-pt",
        "scroll-pr",
        "scroll-pb",
        "scroll-pl",
      ],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"],
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"],
    },
    orderSensitiveModifiers: [
      "*",
      "**",
      "after",
      "backdrop",
      "before",
      "details-content",
      "file",
      "first-letter",
      "first-line",
      "marker",
      "placeholder",
      "selection",
    ],
  };
};
const twMerge = /*#__PURE__*/ createTailwindMerge(getDefaultConfig);

function cn(...inputs) {
  return twMerge(clsx(inputs));
}

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background text-foreground hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9 rounded-md",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);
const Button = reactExports.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot$2 : "button";
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Comp, {
      "data-slot": "button",
      className: cn(buttonVariants({ variant, size, className })),
      ref,
      ...props,
    });
  }
);
Button.displayName = "Button";

function Card({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
    "data-slot": "card",
    className: cn(
      "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border",
      className
    ),
    ...props,
  });
}
function CardContent({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
    "data-slot": "card-content",
    className: cn("px-6 [&:last-child]:pb-6", className),
    ...props,
  });
}

function Input({ className, type, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("input", {
    type,
    "data-slot": "input",
    className: cn(
      "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border px-3 py-1 text-base bg-input-background transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
      "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
      "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
      className
    ),
    ...props,
  });
}

function Textarea({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("textarea", {
    "data-slot": "textarea",
    className: cn(
      "resize-none border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-input-background px-3 py-2 text-base transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
      className
    ),
    ...props,
  });
}

// src/primitive.tsx
var NODES = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "select",
  "span",
  "svg",
  "ul",
];
var Primitive = NODES.reduce((primitive, node) => {
  const Slot = createSlot(`Primitive.${node}`);
  const Node = reactExports.forwardRef((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? Slot : node;
    if (typeof window !== "undefined") {
      window[Symbol.for("radix-ui")] = true;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Comp, {
      ...primitiveProps,
      ref: forwardedRef,
    });
  });
  Node.displayName = `Primitive.${node}`;
  return { ...primitive, [node]: Node };
}, {});
function dispatchDiscreteCustomEvent(target, event) {
  if (target) reactDomExports.flushSync(() => target.dispatchEvent(event));
}

var NAME$1 = "Label";
var Label$2 = reactExports.forwardRef((props, forwardedRef) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.label, {
    ...props,
    ref: forwardedRef,
    onMouseDown: (event) => {
      const target = event.target;
      if (target.closest("button, input, select, textarea")) return;
      props.onMouseDown?.(event);
      if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
    },
  });
});
Label$2.displayName = NAME$1;
var Root$3 = Label$2;

function Label$1({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Root$3, {
    "data-slot": "label",
    className: cn(
      "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
      className
    ),
    ...props,
  });
}

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);
function Badge({ className, variant, asChild = false, ...props }) {
  const Comp = asChild ? Slot$2 : "span";
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Comp, {
    "data-slot": "badge",
    className: cn(badgeVariants({ variant }), className),
    ...props,
  });
}

// src/primitive.tsx
function composeEventHandlers(
  originalEventHandler,
  ourEventHandler,
  { checkForDefaultPrevented = true } = {}
) {
  return function handleEvent(event) {
    originalEventHandler?.(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented) {
      return ourEventHandler?.(event);
    }
  };
}

// packages/react/context/src/create-context.tsx
function createContext2(rootComponentName, defaultContext) {
  const Context = reactExports.createContext(defaultContext);
  const Provider = (props) => {
    const { children, ...context } = props;
    const value = reactExports.useMemo(() => context, Object.values(context));
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Context.Provider, {
      value,
      children,
    });
  };
  Provider.displayName = rootComponentName + "Provider";
  function useContext2(consumerName) {
    const context = reactExports.useContext(Context);
    if (context) return context;
    if (defaultContext !== void 0) return defaultContext;
    throw new Error(
      `\`${consumerName}\` must be used within \`${rootComponentName}\``
    );
  }
  return [Provider, useContext2];
}
function createContextScope(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function createContext3(rootComponentName, defaultContext) {
    const BaseContext = reactExports.createContext(defaultContext);
    const index = defaultContexts.length;
    defaultContexts = [...defaultContexts, defaultContext];
    const Provider = (props) => {
      const { scope, children, ...context } = props;
      const Context = scope?.[scopeName]?.[index] || BaseContext;
      const value = reactExports.useMemo(() => context, Object.values(context));
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Context.Provider, {
        value,
        children,
      });
    };
    Provider.displayName = rootComponentName + "Provider";
    function useContext2(consumerName, scope) {
      const Context = scope?.[scopeName]?.[index] || BaseContext;
      const context = reactExports.useContext(Context);
      if (context) return context;
      if (defaultContext !== void 0) return defaultContext;
      throw new Error(
        `\`${consumerName}\` must be used within \`${rootComponentName}\``
      );
    }
    return [Provider, useContext2];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return reactExports.createContext(defaultContext);
    });
    return function useScope(scope) {
      const contexts = scope?.[scopeName] || scopeContexts;
      return reactExports.useMemo(
        () => ({
          [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts },
        }),
        [scope, contexts]
      );
    };
  };
  createScope.scopeName = scopeName;
  return [
    createContext3,
    composeContextScopes(createScope, ...createContextScopeDeps),
  ];
}
function composeContextScopes(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1) return baseScope;
  const createScope = () => {
    const scopeHooks = scopes.map((createScope2) => ({
      useScope: createScope2(),
      scopeName: createScope2.scopeName,
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes = scopeHooks.reduce(
        (nextScopes2, { useScope, scopeName }) => {
          const scopeProps = useScope(overrideScopes);
          const currentScope = scopeProps[`__scope${scopeName}`];
          return { ...nextScopes2, ...currentScope };
        },
        {}
      );
      return reactExports.useMemo(
        () => ({ [`__scope${baseScope.scopeName}`]: nextScopes }),
        [nextScopes]
      );
    };
  };
  createScope.scopeName = baseScope.scopeName;
  return createScope;
}

// packages/react/use-layout-effect/src/use-layout-effect.tsx
var useLayoutEffect2 = globalThis?.document
  ? reactExports.useLayoutEffect
  : () => {};

// packages/react/id/src/id.tsx
var useReactId = React$1[" useId ".trim().toString()] || (() => void 0);
var count$1 = 0;
function useId(deterministicId) {
  const [id, setId] = reactExports.useState(useReactId());
  useLayoutEffect2(() => {
    setId((reactId) => reactId ?? String(count$1++));
  }, [deterministicId]);
  return deterministicId || (id ? `radix-${id}` : "");
}

// src/use-controllable-state.tsx
var useInsertionEffect =
  React$1[" useInsertionEffect ".trim().toString()] || useLayoutEffect2;
function useControllableState({
  prop,
  defaultProp,
  onChange = () => {},
  caller,
}) {
  const [uncontrolledProp, setUncontrolledProp, onChangeRef] =
    useUncontrolledState({
      defaultProp,
      onChange,
    });
  const isControlled = prop !== void 0;
  const value = isControlled ? prop : uncontrolledProp;
  {
    const isControlledRef = reactExports.useRef(prop !== void 0);
    reactExports.useEffect(() => {
      const wasControlled = isControlledRef.current;
      if (wasControlled !== isControlled) {
        const from = wasControlled ? "controlled" : "uncontrolled";
        const to = isControlled ? "controlled" : "uncontrolled";
        console.warn(
          `${caller} is changing from ${from} to ${to}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`
        );
      }
      isControlledRef.current = isControlled;
    }, [isControlled, caller]);
  }
  const setValue = reactExports.useCallback(
    (nextValue) => {
      if (isControlled) {
        const value2 = isFunction(nextValue) ? nextValue(prop) : nextValue;
        if (value2 !== prop) {
          onChangeRef.current?.(value2);
        }
      } else {
        setUncontrolledProp(nextValue);
      }
    },
    [isControlled, prop, setUncontrolledProp, onChangeRef]
  );
  return [value, setValue];
}
function useUncontrolledState({ defaultProp, onChange }) {
  const [value, setValue] = reactExports.useState(defaultProp);
  const prevValueRef = reactExports.useRef(value);
  const onChangeRef = reactExports.useRef(onChange);
  useInsertionEffect(() => {
    onChangeRef.current = onChange;
  }, [onChange]);
  reactExports.useEffect(() => {
    if (prevValueRef.current !== value) {
      onChangeRef.current?.(value);
      prevValueRef.current = value;
    }
  }, [value, prevValueRef]);
  return [value, setValue, onChangeRef];
}
function isFunction(value) {
  return typeof value === "function";
}

// packages/react/use-callback-ref/src/use-callback-ref.tsx
function useCallbackRef$1(callback) {
  const callbackRef = reactExports.useRef(callback);
  reactExports.useEffect(() => {
    callbackRef.current = callback;
  });
  return reactExports.useMemo(
    () =>
      (...args) =>
        callbackRef.current?.(...args),
    []
  );
}

// packages/react/use-escape-keydown/src/use-escape-keydown.tsx
function useEscapeKeydown(
  onEscapeKeyDownProp,
  ownerDocument = globalThis?.document
) {
  const onEscapeKeyDown = useCallbackRef$1(onEscapeKeyDownProp);
  reactExports.useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === "Escape") {
        onEscapeKeyDown(event);
      }
    };
    ownerDocument.addEventListener("keydown", handleKeyDown, { capture: true });
    return () =>
      ownerDocument.removeEventListener("keydown", handleKeyDown, {
        capture: true,
      });
  }, [onEscapeKeyDown, ownerDocument]);
}

var DISMISSABLE_LAYER_NAME = "DismissableLayer";
var CONTEXT_UPDATE = "dismissableLayer.update";
var POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
var FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
var originalBodyPointerEvents;
var DismissableLayerContext = reactExports.createContext({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set(),
});
var DismissableLayer = reactExports.forwardRef((props, forwardedRef) => {
  const {
    disableOutsidePointerEvents = false,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    onDismiss,
    ...layerProps
  } = props;
  const context = reactExports.useContext(DismissableLayerContext);
  const [node, setNode] = reactExports.useState(null);
  const ownerDocument = node?.ownerDocument ?? globalThis?.document;
  const [, force] = reactExports.useState({});
  const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
  const layers = Array.from(context.layers);
  const [highestLayerWithOutsidePointerEventsDisabled] = [
    ...context.layersWithOutsidePointerEventsDisabled,
  ].slice(-1);
  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(
    highestLayerWithOutsidePointerEventsDisabled
  );
  const index = node ? layers.indexOf(node) : -1;
  const isBodyPointerEventsDisabled =
    context.layersWithOutsidePointerEventsDisabled.size > 0;
  const isPointerEventsEnabled =
    index >= highestLayerWithOutsidePointerEventsDisabledIndex;
  const pointerDownOutside = usePointerDownOutside((event) => {
    const target = event.target;
    const isPointerDownOnBranch = [...context.branches].some((branch) =>
      branch.contains(target)
    );
    if (!isPointerEventsEnabled || isPointerDownOnBranch) return;
    onPointerDownOutside?.(event);
    onInteractOutside?.(event);
    if (!event.defaultPrevented) onDismiss?.();
  }, ownerDocument);
  const focusOutside = useFocusOutside((event) => {
    const target = event.target;
    const isFocusInBranch = [...context.branches].some((branch) =>
      branch.contains(target)
    );
    if (isFocusInBranch) return;
    onFocusOutside?.(event);
    onInteractOutside?.(event);
    if (!event.defaultPrevented) onDismiss?.();
  }, ownerDocument);
  useEscapeKeydown((event) => {
    const isHighestLayer = index === context.layers.size - 1;
    if (!isHighestLayer) return;
    onEscapeKeyDown?.(event);
    if (!event.defaultPrevented && onDismiss) {
      event.preventDefault();
      onDismiss();
    }
  }, ownerDocument);
  reactExports.useEffect(() => {
    if (!node) return;
    if (disableOutsidePointerEvents) {
      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
        originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
        ownerDocument.body.style.pointerEvents = "none";
      }
      context.layersWithOutsidePointerEventsDisabled.add(node);
    }
    context.layers.add(node);
    dispatchUpdate();
    return () => {
      if (
        disableOutsidePointerEvents &&
        context.layersWithOutsidePointerEventsDisabled.size === 1
      ) {
        ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;
      }
    };
  }, [node, ownerDocument, disableOutsidePointerEvents, context]);
  reactExports.useEffect(() => {
    return () => {
      if (!node) return;
      context.layers.delete(node);
      context.layersWithOutsidePointerEventsDisabled.delete(node);
      dispatchUpdate();
    };
  }, [node, context]);
  reactExports.useEffect(() => {
    const handleUpdate = () => force({});
    document.addEventListener(CONTEXT_UPDATE, handleUpdate);
    return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
    ...layerProps,
    ref: composedRefs,
    style: {
      pointerEvents: isBodyPointerEventsDisabled
        ? isPointerEventsEnabled
          ? "auto"
          : "none"
        : void 0,
      ...props.style,
    },
    onFocusCapture: composeEventHandlers(
      props.onFocusCapture,
      focusOutside.onFocusCapture
    ),
    onBlurCapture: composeEventHandlers(
      props.onBlurCapture,
      focusOutside.onBlurCapture
    ),
    onPointerDownCapture: composeEventHandlers(
      props.onPointerDownCapture,
      pointerDownOutside.onPointerDownCapture
    ),
  });
});
DismissableLayer.displayName = DISMISSABLE_LAYER_NAME;
var BRANCH_NAME = "DismissableLayerBranch";
var DismissableLayerBranch = reactExports.forwardRef((props, forwardedRef) => {
  const context = reactExports.useContext(DismissableLayerContext);
  const ref = reactExports.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  reactExports.useEffect(() => {
    const node = ref.current;
    if (node) {
      context.branches.add(node);
      return () => {
        context.branches.delete(node);
      };
    }
  }, [context.branches]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
    ...props,
    ref: composedRefs,
  });
});
DismissableLayerBranch.displayName = BRANCH_NAME;
function usePointerDownOutside(
  onPointerDownOutside,
  ownerDocument = globalThis?.document
) {
  const handlePointerDownOutside = useCallbackRef$1(onPointerDownOutside);
  const isPointerInsideReactTreeRef = reactExports.useRef(false);
  const handleClickRef = reactExports.useRef(() => {});
  reactExports.useEffect(() => {
    const handlePointerDown = (event) => {
      if (event.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent2 = function () {
          handleAndDispatchCustomEvent(
            POINTER_DOWN_OUTSIDE,
            handlePointerDownOutside,
            eventDetail,
            { discrete: true }
          );
        };
        const eventDetail = { originalEvent: event };
        if (event.pointerType === "touch") {
          ownerDocument.removeEventListener("click", handleClickRef.current);
          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
          ownerDocument.addEventListener("click", handleClickRef.current, {
            once: true,
          });
        } else {
          handleAndDispatchPointerDownOutsideEvent2();
        }
      } else {
        ownerDocument.removeEventListener("click", handleClickRef.current);
      }
      isPointerInsideReactTreeRef.current = false;
    };
    const timerId = window.setTimeout(() => {
      ownerDocument.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId);
      ownerDocument.removeEventListener("pointerdown", handlePointerDown);
      ownerDocument.removeEventListener("click", handleClickRef.current);
    };
  }, [ownerDocument, handlePointerDownOutside]);
  return {
    // ensures we check React component tree (not just DOM tree)
    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),
  };
}
function useFocusOutside(onFocusOutside, ownerDocument = globalThis?.document) {
  const handleFocusOutside = useCallbackRef$1(onFocusOutside);
  const isFocusInsideReactTreeRef = reactExports.useRef(false);
  reactExports.useEffect(() => {
    const handleFocus = (event) => {
      if (event.target && !isFocusInsideReactTreeRef.current) {
        const eventDetail = { originalEvent: event };
        handleAndDispatchCustomEvent(
          FOCUS_OUTSIDE,
          handleFocusOutside,
          eventDetail,
          {
            discrete: false,
          }
        );
      }
    };
    ownerDocument.addEventListener("focusin", handleFocus);
    return () => ownerDocument.removeEventListener("focusin", handleFocus);
  }, [ownerDocument, handleFocusOutside]);
  return {
    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),
    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),
  };
}
function dispatchUpdate() {
  const event = new CustomEvent(CONTEXT_UPDATE);
  document.dispatchEvent(event);
}
function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  const target = detail.originalEvent.target;
  const event = new CustomEvent(name, {
    bubbles: false,
    cancelable: true,
    detail,
  });
  if (handler) target.addEventListener(name, handler, { once: true });
  if (discrete) {
    dispatchDiscreteCustomEvent(target, event);
  } else {
    target.dispatchEvent(event);
  }
}

var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
var AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
var EVENT_OPTIONS$1 = { bubbles: false, cancelable: true };
var FOCUS_SCOPE_NAME = "FocusScope";
var FocusScope = reactExports.forwardRef((props, forwardedRef) => {
  const {
    loop = false,
    trapped = false,
    onMountAutoFocus: onMountAutoFocusProp,
    onUnmountAutoFocus: onUnmountAutoFocusProp,
    ...scopeProps
  } = props;
  const [container, setContainer] = reactExports.useState(null);
  const onMountAutoFocus = useCallbackRef$1(onMountAutoFocusProp);
  const onUnmountAutoFocus = useCallbackRef$1(onUnmountAutoFocusProp);
  const lastFocusedElementRef = reactExports.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, (node) =>
    setContainer(node)
  );
  const focusScope = reactExports.useRef({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    },
  }).current;
  reactExports.useEffect(() => {
    if (trapped) {
      let handleFocusIn2 = function (event) {
          if (focusScope.paused || !container) return;
          const target = event.target;
          if (container.contains(target)) {
            lastFocusedElementRef.current = target;
          } else {
            focus(lastFocusedElementRef.current, { select: true });
          }
        },
        handleFocusOut2 = function (event) {
          if (focusScope.paused || !container) return;
          const relatedTarget = event.relatedTarget;
          if (relatedTarget === null) return;
          if (!container.contains(relatedTarget)) {
            focus(lastFocusedElementRef.current, { select: true });
          }
        },
        handleMutations2 = function (mutations) {
          const focusedElement = document.activeElement;
          if (focusedElement !== document.body) return;
          for (const mutation of mutations) {
            if (mutation.removedNodes.length > 0) focus(container);
          }
        };
      document.addEventListener("focusin", handleFocusIn2);
      document.addEventListener("focusout", handleFocusOut2);
      const mutationObserver = new MutationObserver(handleMutations2);
      if (container)
        mutationObserver.observe(container, { childList: true, subtree: true });
      return () => {
        document.removeEventListener("focusin", handleFocusIn2);
        document.removeEventListener("focusout", handleFocusOut2);
        mutationObserver.disconnect();
      };
    }
  }, [trapped, container, focusScope.paused]);
  reactExports.useEffect(() => {
    if (container) {
      focusScopesStack.add(focusScope);
      const previouslyFocusedElement = document.activeElement;
      const hasFocusedCandidate = container.contains(previouslyFocusedElement);
      if (!hasFocusedCandidate) {
        const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS$1);
        container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        container.dispatchEvent(mountEvent);
        if (!mountEvent.defaultPrevented) {
          focusFirst$2(removeLinks(getTabbableCandidates(container)), {
            select: true,
          });
          if (document.activeElement === previouslyFocusedElement) {
            focus(container);
          }
        }
      }
      return () => {
        container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        setTimeout(() => {
          const unmountEvent = new CustomEvent(
            AUTOFOCUS_ON_UNMOUNT,
            EVENT_OPTIONS$1
          );
          container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          container.dispatchEvent(unmountEvent);
          if (!unmountEvent.defaultPrevented) {
            focus(previouslyFocusedElement ?? document.body, { select: true });
          }
          container.removeEventListener(
            AUTOFOCUS_ON_UNMOUNT,
            onUnmountAutoFocus
          );
          focusScopesStack.remove(focusScope);
        }, 0);
      };
    }
  }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);
  const handleKeyDown = reactExports.useCallback(
    (event) => {
      if (!loop && !trapped) return;
      if (focusScope.paused) return;
      const isTabKey =
        event.key === "Tab" &&
        !event.altKey &&
        !event.ctrlKey &&
        !event.metaKey;
      const focusedElement = document.activeElement;
      if (isTabKey && focusedElement) {
        const container2 = event.currentTarget;
        const [first, last] = getTabbableEdges(container2);
        const hasTabbableElementsInside = first && last;
        if (!hasTabbableElementsInside) {
          if (focusedElement === container2) event.preventDefault();
        } else {
          if (!event.shiftKey && focusedElement === last) {
            event.preventDefault();
            if (loop) focus(first, { select: true });
          } else if (event.shiftKey && focusedElement === first) {
            event.preventDefault();
            if (loop) focus(last, { select: true });
          }
        }
      }
    },
    [loop, trapped, focusScope.paused]
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
    tabIndex: -1,
    ...scopeProps,
    ref: composedRefs,
    onKeyDown: handleKeyDown,
  });
});
FocusScope.displayName = FOCUS_SCOPE_NAME;
function focusFirst$2(candidates, { select = false } = {}) {
  const previouslyFocusedElement = document.activeElement;
  for (const candidate of candidates) {
    focus(candidate, { select });
    if (document.activeElement !== previouslyFocusedElement) return;
  }
}
function getTabbableEdges(container) {
  const candidates = getTabbableCandidates(container);
  const first = findVisible(candidates, container);
  const last = findVisible(candidates.reverse(), container);
  return [first, last];
}
function getTabbableCandidates(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0
        ? NodeFilter.FILTER_ACCEPT
        : NodeFilter.FILTER_SKIP;
    },
  });
  while (walker.nextNode()) nodes.push(walker.currentNode);
  return nodes;
}
function findVisible(elements, container) {
  for (const element of elements) {
    if (!isHidden(element, { upTo: container })) return element;
  }
}
function isHidden(node, { upTo }) {
  if (getComputedStyle(node).visibility === "hidden") return true;
  while (node) {
    if (upTo !== void 0 && node === upTo) return false;
    if (getComputedStyle(node).display === "none") return true;
    node = node.parentElement;
  }
  return false;
}
function isSelectableInput(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function focus(element, { select = false } = {}) {
  if (element && element.focus) {
    const previouslyFocusedElement = document.activeElement;
    element.focus({ preventScroll: true });
    if (
      element !== previouslyFocusedElement &&
      isSelectableInput(element) &&
      select
    )
      element.select();
  }
}
var focusScopesStack = createFocusScopesStack();
function createFocusScopesStack() {
  let stack = [];
  return {
    add(focusScope) {
      const activeFocusScope = stack[0];
      if (focusScope !== activeFocusScope) {
        activeFocusScope?.pause();
      }
      stack = arrayRemove(stack, focusScope);
      stack.unshift(focusScope);
    },
    remove(focusScope) {
      stack = arrayRemove(stack, focusScope);
      stack[0]?.resume();
    },
  };
}
function arrayRemove(array, item) {
  const updatedArray = [...array];
  const index = updatedArray.indexOf(item);
  if (index !== -1) {
    updatedArray.splice(index, 1);
  }
  return updatedArray;
}
function removeLinks(items) {
  return items.filter((item) => item.tagName !== "A");
}

var PORTAL_NAME$3 = "Portal";
var Portal$2 = reactExports.forwardRef((props, forwardedRef) => {
  const { container: containerProp, ...portalProps } = props;
  const [mounted, setMounted] = reactExports.useState(false);
  useLayoutEffect2(() => setMounted(true), []);
  const container = containerProp || (mounted && globalThis?.document?.body);
  return container
    ? ReactDOM.createPortal(
        /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
          ...portalProps,
          ref: forwardedRef,
        }),
        container
      )
    : null;
});
Portal$2.displayName = PORTAL_NAME$3;

function useStateMachine(initialState, machine) {
  return reactExports.useReducer((state, event) => {
    const nextState = machine[state][event];
    return nextState ?? state;
  }, initialState);
}

// src/presence.tsx
var Presence = (props) => {
  const { present, children } = props;
  const presence = usePresence(present);
  const child =
    typeof children === "function"
      ? children({ present: presence.isPresent })
      : reactExports.Children.only(children);
  const ref = useComposedRefs(presence.ref, getElementRef(child));
  const forceMount = typeof children === "function";
  return forceMount || presence.isPresent
    ? reactExports.cloneElement(child, { ref })
    : null;
};
Presence.displayName = "Presence";
function usePresence(present) {
  const [node, setNode] = reactExports.useState();
  const stylesRef = reactExports.useRef(null);
  const prevPresentRef = reactExports.useRef(present);
  const prevAnimationNameRef = reactExports.useRef("none");
  const initialState = present ? "mounted" : "unmounted";
  const [state, send] = useStateMachine(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended",
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted",
    },
    unmounted: {
      MOUNT: "mounted",
    },
  });
  reactExports.useEffect(() => {
    const currentAnimationName = getAnimationName(stylesRef.current);
    prevAnimationNameRef.current =
      state === "mounted" ? currentAnimationName : "none";
  }, [state]);
  useLayoutEffect2(() => {
    const styles = stylesRef.current;
    const wasPresent = prevPresentRef.current;
    const hasPresentChanged = wasPresent !== present;
    if (hasPresentChanged) {
      const prevAnimationName = prevAnimationNameRef.current;
      const currentAnimationName = getAnimationName(styles);
      if (present) {
        send("MOUNT");
      } else if (
        currentAnimationName === "none" ||
        styles?.display === "none"
      ) {
        send("UNMOUNT");
      } else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (wasPresent && isAnimating) {
          send("ANIMATION_OUT");
        } else {
          send("UNMOUNT");
        }
      }
      prevPresentRef.current = present;
    }
  }, [present, send]);
  useLayoutEffect2(() => {
    if (node) {
      let timeoutId;
      const ownerWindow = node.ownerDocument.defaultView ?? window;
      const handleAnimationEnd = (event) => {
        const currentAnimationName = getAnimationName(stylesRef.current);
        const isCurrentAnimation = currentAnimationName.includes(
          CSS.escape(event.animationName)
        );
        if (event.target === node && isCurrentAnimation) {
          send("ANIMATION_END");
          if (!prevPresentRef.current) {
            const currentFillMode = node.style.animationFillMode;
            node.style.animationFillMode = "forwards";
            timeoutId = ownerWindow.setTimeout(() => {
              if (node.style.animationFillMode === "forwards") {
                node.style.animationFillMode = currentFillMode;
              }
            });
          }
        }
      };
      const handleAnimationStart = (event) => {
        if (event.target === node) {
          prevAnimationNameRef.current = getAnimationName(stylesRef.current);
        }
      };
      node.addEventListener("animationstart", handleAnimationStart);
      node.addEventListener("animationcancel", handleAnimationEnd);
      node.addEventListener("animationend", handleAnimationEnd);
      return () => {
        ownerWindow.clearTimeout(timeoutId);
        node.removeEventListener("animationstart", handleAnimationStart);
        node.removeEventListener("animationcancel", handleAnimationEnd);
        node.removeEventListener("animationend", handleAnimationEnd);
      };
    } else {
      send("ANIMATION_END");
    }
  }, [node, send]);
  return {
    isPresent: ["mounted", "unmountSuspended"].includes(state),
    ref: reactExports.useCallback((node2) => {
      stylesRef.current = node2 ? getComputedStyle(node2) : null;
      setNode(node2);
    }, []),
  };
}
function getAnimationName(styles) {
  return styles?.animationName || "none";
}
function getElementRef(element) {
  let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
}

var count = 0;
function useFocusGuards() {
  reactExports.useEffect(() => {
    const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
    document.body.insertAdjacentElement(
      "afterbegin",
      edgeGuards[0] ?? createFocusGuard()
    );
    document.body.insertAdjacentElement(
      "beforeend",
      edgeGuards[1] ?? createFocusGuard()
    );
    count++;
    return () => {
      if (count === 1) {
        document
          .querySelectorAll("[data-radix-focus-guard]")
          .forEach((node) => node.remove());
      }
      count--;
    };
  }, []);
}
function createFocusGuard() {
  const element = document.createElement("span");
  element.setAttribute("data-radix-focus-guard", "");
  element.tabIndex = 0;
  element.style.outline = "none";
  element.style.opacity = "0";
  element.style.position = "fixed";
  element.style.pointerEvents = "none";
  return element;
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var __assign = function () {
  __assign =
    Object.assign ||
    function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
  return __assign.apply(this, arguments);
};

function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (
        e.indexOf(p[i]) < 0 &&
        Object.prototype.propertyIsEnumerable.call(s, p[i])
      )
        t[p[i]] = s[p[i]];
    }
  return t;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function"
  ? SuppressedError
  : function (error, suppressed, message) {
      var e = new Error(message);
      return (
        (e.name = "SuppressedError"),
        (e.error = error),
        (e.suppressed = suppressed),
        e
      );
    };

var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
/**
 * Name of a CSS variable containing the amount of "hidden" scrollbar
 * ! might be undefined ! use will fallback!
 */
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

/**
 * Assigns a value for a given ref, no matter of the ref format
 * @param {RefObject} ref - a callback function or ref object
 * @param value - a new value
 *
 * @see https://github.com/theKashey/use-callback-ref#assignref
 * @example
 * const refObject = useRef();
 * const refFn = (ref) => {....}
 *
 * assignRef(refObject, "refValue");
 * assignRef(refFn, "refValue");
 */
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

/**
 * creates a MutableRef with ref change callback
 * @param initialValue - initial ref value
 * @param {Function} callback - a callback to run when value changes
 *
 * @example
 * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);
 * ref.current = 1;
 * // prints 0 -> 1
 *
 * @see https://reactjs.org/docs/hooks-reference.html#useref
 * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref
 * @returns {MutableRefObject}
 */
function useCallbackRef(initialValue, callback) {
  var ref = reactExports.useState(function () {
    return {
      // value
      value: initialValue,
      // last callback
      callback: callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        },
      },
    };
  })[0];
  // update callback
  ref.callback = callback;
  return ref.facade;
}

var useIsomorphicLayoutEffect =
  typeof window !== "undefined"
    ? reactExports.useLayoutEffect
    : reactExports.useEffect;
var currentValues = new WeakMap();
/**
 * Merges two or more refs together providing a single interface to set their value
 * @param {RefObject|Ref} refs
 * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
 *
 * @see {@link mergeRefs} a version without buit-in memoization
 * @see https://github.com/theKashey/use-callback-ref#usemergerefs
 * @example
 * const Component = React.forwardRef((props, ref) => {
 *   const ownRef = useRef();
 *   const domRef = useMergeRefs([ref, ownRef]); // 👈 merge together
 *   return <div ref={domRef}>...</div>
 * }
 */
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef(null, function (newValue) {
    return refs.forEach(function (ref) {
      return assignRef(ref, newValue);
    });
  });
  // handle refs changes - added or removed
  useIsomorphicLayoutEffect(
    function () {
      var oldValue = currentValues.get(callbackRef);
      if (oldValue) {
        var prevRefs_1 = new Set(oldValue);
        var nextRefs_1 = new Set(refs);
        var current_1 = callbackRef.current;
        prevRefs_1.forEach(function (ref) {
          if (!nextRefs_1.has(ref)) {
            assignRef(ref, null);
          }
        });
        nextRefs_1.forEach(function (ref) {
          if (!prevRefs_1.has(ref)) {
            assignRef(ref, current_1);
          }
        });
      }
      currentValues.set(callbackRef, refs);
    },
    [refs]
  );
  return callbackRef;
}

function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function () {
      if (assigned) {
        throw new Error(
          "Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`."
        );
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function (data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function () {
        buffer = buffer.filter(function (x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function (cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function (x) {
          return cb(x);
        },
        filter: function () {
          return buffer;
        },
      };
    },
    assignMedium: function (cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function () {
        var cbs = pendingQueue;
        pendingQueue = [];
        cbs.forEach(cb);
      };
      var cycle = function () {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function (x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function (filter) {
          pendingQueue = pendingQueue.filter(filter);
          return buffer;
        },
      };
    },
  };
  return medium;
}
// eslint-disable-next-line @typescript-eslint/ban-types
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options);
  return medium;
}

var SideCar$1 = function (_a) {
  var sideCar = _a.sideCar,
    rest = __rest(_a, ["sideCar"]);
  if (!sideCar) {
    throw new Error(
      "Sidecar: please provide `sideCar` property to import the right car"
    );
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return reactExports.createElement(Target, __assign({}, rest));
};
SideCar$1.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar$1;
}

var effectCar = createSidecarMedium();

var nothing = function () {
  return;
};
/**
 * Removes scrollbar from the page and contain the scroll within the Lock
 */
var RemoveScroll = reactExports.forwardRef(function (props, parentRef) {
  var ref = reactExports.useRef(null);
  var _a = reactExports.useState({
      onScrollCapture: nothing,
      onWheelCapture: nothing,
      onTouchMoveCapture: nothing,
    }),
    callbacks = _a[0],
    setCallbacks = _a[1];
  var forwardProps = props.forwardProps,
    children = props.children,
    className = props.className,
    removeScrollBar = props.removeScrollBar,
    enabled = props.enabled,
    shards = props.shards,
    sideCar = props.sideCar,
    noRelative = props.noRelative,
    noIsolation = props.noIsolation,
    inert = props.inert,
    allowPinchZoom = props.allowPinchZoom,
    _b = props.as,
    Container = _b === void 0 ? "div" : _b,
    gapMode = props.gapMode,
    rest = __rest(props, [
      "forwardProps",
      "children",
      "className",
      "removeScrollBar",
      "enabled",
      "shards",
      "sideCar",
      "noRelative",
      "noIsolation",
      "inert",
      "allowPinchZoom",
      "as",
      "gapMode",
    ]);
  var SideCar = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    enabled &&
      reactExports.createElement(SideCar, {
        sideCar: effectCar,
        removeScrollBar: removeScrollBar,
        shards: shards,
        noRelative: noRelative,
        noIsolation: noIsolation,
        inert: inert,
        setCallbacks: setCallbacks,
        allowPinchZoom: !!allowPinchZoom,
        lockRef: ref,
        gapMode: gapMode,
      }),
    forwardProps
      ? reactExports.cloneElement(
          reactExports.Children.only(children),
          __assign(__assign({}, containerProps), { ref: containerRef })
        )
      : reactExports.createElement(
          Container,
          __assign({}, containerProps, {
            className: className,
            ref: containerRef,
          }),
          children
        )
  );
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false,
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName,
};

var getNonce = function () {
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return undefined;
};

function makeStyleTag() {
  if (!document) return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css) {
  // @ts-ignore
  if (tag.styleSheet) {
    // @ts-ignore
    tag.styleSheet.cssText = css;
  } else {
    tag.appendChild(document.createTextNode(css));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function () {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function (style) {
      if (counter == 0) {
        if ((stylesheet = makeStyleTag())) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function () {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    },
  };
};

/**
 * creates a hook to control style singleton
 * @see {@link styleSingleton} for a safer component version
 * @example
 * ```tsx
 * const useStyle = styleHookSingleton();
 * ///
 * useStyle('body { overflow: hidden}');
 */
var styleHookSingleton = function () {
  var sheet = stylesheetSingleton();
  return function (styles, isDynamic) {
    reactExports.useEffect(
      function () {
        sheet.add(styles);
        return function () {
          sheet.remove();
        };
      },
      [styles && isDynamic]
    );
  };
};

/**
 * create a Component to add styles on demand
 * - styles are added when first instance is mounted
 * - styles are removed when the last instance is unmounted
 * - changing styles in runtime does nothing unless dynamic is set. But with multiple components that can lead to the undefined behavior
 */
var styleSingleton = function () {
  var useStyle = styleHookSingleton();
  var Sheet = function (_a) {
    var styles = _a.styles,
      dynamic = _a.dynamic;
    useStyle(styles, dynamic);
    return null;
  };
  return Sheet;
};

var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0,
};
var parse = function (x) {
  return parseInt(x || "", 10) || 0;
};
var getOffset = function (gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse(left), parse(top), parse(right)];
};
var getGapWidth = function (gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0]),
  };
};

var Style = styleSingleton();
var lockAttribute = "data-scroll-locked";
// important tip - once we measure scrollBar width and remove them
// we could not repeat this operation
// thus we are using style-singleton - only the first "yet correct" style will be applied.
var getStyles = function (_a, allowRelative, gapMode, important) {
  var left = _a.left,
    top = _a.top,
    right = _a.right,
    gap = _a.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  ."
    .concat(noScrollbarsClassName, " {\n   overflow: hidden ")
    .concat(important, ";\n   padding-right: ")
    .concat(gap, "px ")
    .concat(important, ";\n  }\n  body[")
    .concat(lockAttribute, "] {\n    overflow: hidden ")
    .concat(important, ";\n    overscroll-behavior: contain;\n    ")
    .concat(
      [
        allowRelative && "position: relative ".concat(important, ";"),
        gapMode === "margin" &&
          "\n    padding-left: "
            .concat(left, "px;\n    padding-top: ")
            .concat(top, "px;\n    padding-right: ")
            .concat(
              right,
              "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: "
            )
            .concat(gap, "px ")
            .concat(important, ";\n    "),
        gapMode === "padding" &&
          "padding-right: ".concat(gap, "px ").concat(important, ";"),
      ]
        .filter(Boolean)
        .join(""),
      "\n  }\n  \n  ."
    )
    .concat(zeroRightClassName, " {\n    right: ")
    .concat(gap, "px ")
    .concat(important, ";\n  }\n  \n  .")
    .concat(fullWidthClassName, " {\n    margin-right: ")
    .concat(gap, "px ")
    .concat(important, ";\n  }\n  \n  .")
    .concat(zeroRightClassName, " .")
    .concat(zeroRightClassName, " {\n    right: 0 ")
    .concat(important, ";\n  }\n  \n  .")
    .concat(fullWidthClassName, " .")
    .concat(fullWidthClassName, " {\n    margin-right: 0 ")
    .concat(important, ";\n  }\n  \n  body[")
    .concat(lockAttribute, "] {\n    ")
    .concat(removedBarSizeVariable, ": ")
    .concat(gap, "px;\n  }\n");
};
var getCurrentUseCounter = function () {
  var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
  return isFinite(counter) ? counter : 0;
};
var useLockAttribute = function () {
  reactExports.useEffect(function () {
    document.body.setAttribute(
      lockAttribute,
      (getCurrentUseCounter() + 1).toString()
    );
    return function () {
      var newCounter = getCurrentUseCounter() - 1;
      if (newCounter <= 0) {
        document.body.removeAttribute(lockAttribute);
      } else {
        document.body.setAttribute(lockAttribute, newCounter.toString());
      }
    };
  }, []);
};
/**
 * Removes page scrollbar and blocks page scroll when mounted
 */
var RemoveScrollBar = function (_a) {
  var noRelative = _a.noRelative,
    noImportant = _a.noImportant,
    _b = _a.gapMode,
    gapMode = _b === void 0 ? "margin" : _b;
  useLockAttribute();
  /*
     gap will be measured on every component mount
     however it will be used only by the "first" invocation
     due to singleton nature of <Style
     */
  var gap = reactExports.useMemo(
    function () {
      return getGapWidth(gapMode);
    },
    [gapMode]
  );
  return reactExports.createElement(Style, {
    styles: getStyles(
      gap,
      !noRelative,
      gapMode,
      !noImportant ? "!important" : ""
    ),
  });
};

var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    var options = Object.defineProperty({}, "passive", {
      get: function () {
        passiveSupported = true;
        return true;
      },
    });
    // @ts-ignore
    window.addEventListener("test", options, options);
    // @ts-ignore
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var nonPassive = passiveSupported ? { passive: false } : false;

var alwaysContainsScroll = function (node) {
  // textarea will always _contain_ scroll inside self. It only can be hidden
  return node.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function (node, overflow) {
  if (!(node instanceof Element)) {
    return false;
  }
  var styles = window.getComputedStyle(node);
  return (
    // not-not-scrollable
    styles[overflow] !== "hidden" &&
    // contains scroll inside self
    !(
      styles.overflowY === styles.overflowX &&
      !alwaysContainsScroll(node) &&
      styles[overflow] === "visible"
    )
  );
};
var elementCouldBeVScrolled = function (node) {
  return elementCanBeScrolled(node, "overflowY");
};
var elementCouldBeHScrolled = function (node) {
  return elementCanBeScrolled(node, "overflowX");
};
var locationCouldBeScrolled = function (axis, node) {
  var ownerDocument = node.ownerDocument;
  var current = node;
  do {
    // Skip over shadow root
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a = getScrollVariables(axis, current),
        scrollHeight = _a[1],
        clientHeight = _a[2];
      if (scrollHeight > clientHeight) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== ownerDocument.body);
  return false;
};
var getVScrollVariables = function (_a) {
  var scrollTop = _a.scrollTop,
    scrollHeight = _a.scrollHeight,
    clientHeight = _a.clientHeight;
  return [scrollTop, scrollHeight, clientHeight];
};
var getHScrollVariables = function (_a) {
  var scrollLeft = _a.scrollLeft,
    scrollWidth = _a.scrollWidth,
    clientWidth = _a.clientWidth;
  return [scrollLeft, scrollWidth, clientWidth];
};
var elementCouldBeScrolled = function (axis, node) {
  return axis === "v"
    ? elementCouldBeVScrolled(node)
    : elementCouldBeHScrolled(node);
};
var getScrollVariables = function (axis, node) {
  return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function (axis, direction) {
  /**
   * If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position,
   * and then increasingly negative as you scroll towards the end of the content.
   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft
   */
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function (
  axis,
  endTarget,
  event,
  sourceDelta,
  noOverscroll
) {
  var directionFactor = getDirectionFactor(
    axis,
    window.getComputedStyle(endTarget).direction
  );
  var delta = directionFactor * sourceDelta;
  // find scrollable target
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    if (!target) {
      break;
    }
    var _a = getScrollVariables(axis, target),
      position = _a[0],
      scroll_1 = _a[1],
      capacity = _a[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position;
    if (position || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position;
      }
    }
    var parent_1 = target.parentNode;
    // we will "bubble" from ShadowDom in case we are, or just to the parent in normal case
    // this is the same logic used in focus-lock
    target =
      parent_1 && parent_1.nodeType === Node.DOCUMENT_FRAGMENT_NODE
        ? parent_1.host
        : parent_1;
  } while (
    // portaled content
    (!targetInLock && target !== document.body) ||
    // self content
    (targetInLock && (endTarget.contains(target) || endTarget === target))
  );
  // handle epsilon around 0 (non standard zoom levels)
  if (isDeltaPositive && (Math.abs(availableScroll) < 1 || false)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (Math.abs(availableScrollTop) < 1 || false)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

var getTouchXY = function (event) {
  return "changedTouches" in event
    ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY]
    : [0, 0];
};
var getDeltaXY = function (event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function (ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function (x, y) {
  return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function (id) {
  return "\n  .block-interactivity-"
    .concat(id, " {pointer-events: none;}\n  .allow-interactivity-")
    .concat(id, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = reactExports.useRef([]);
  var touchStartRef = reactExports.useRef([0, 0]);
  var activeAxis = reactExports.useRef();
  var id = reactExports.useState(idCounter++)[0];
  var Style = reactExports.useState(styleSingleton)[0];
  var lastProps = reactExports.useRef(props);
  reactExports.useEffect(
    function () {
      lastProps.current = props;
    },
    [props]
  );
  reactExports.useEffect(
    function () {
      if (props.inert) {
        document.body.classList.add("block-interactivity-".concat(id));
        var allow_1 = __spreadArray(
          [props.lockRef.current],
          (props.shards || []).map(extractRef),
          true
        ).filter(Boolean);
        allow_1.forEach(function (el) {
          return el.classList.add("allow-interactivity-".concat(id));
        });
        return function () {
          document.body.classList.remove("block-interactivity-".concat(id));
          allow_1.forEach(function (el) {
            return el.classList.remove("allow-interactivity-".concat(id));
          });
        };
      }
      return;
    },
    [props.inert, props.lockRef.current, props.shards]
  );
  var shouldCancelEvent = reactExports.useCallback(function (event, parent) {
    if (
      ("touches" in event && event.touches.length === 2) ||
      (event.type === "wheel" && event.ctrlKey)
    ) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    // allow horizontal touch move on Range inputs. They will not cause any scroll
    if (
      "touches" in event &&
      moveDirection === "h" &&
      target.type === "range"
    ) {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(
      moveDirection,
      target
    );
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(
        moveDirection,
        target
      );
      // other axis might be not scrollable
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (
      !activeAxis.current &&
      "changedTouches" in event &&
      (deltaX || deltaY)
    ) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(
      cancelingAxis,
      parent,
      event,
      cancelingAxis === "h" ? deltaX : deltaY
    );
  }, []);
  var shouldPrevent = reactExports.useCallback(function (_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) {
      // not the last active
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function (e) {
      return (
        e.name === event.type &&
        (e.target === event.target || event.target === e.shadowParent) &&
        deltaCompare(e.delta, delta)
      );
    })[0];
    // self event, and should be canceled
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    // outside or shard event
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || [])
        .map(extractRef)
        .filter(Boolean)
        .filter(function (node) {
          return node.contains(event.target);
        });
      var shouldStop =
        shardNodes.length > 0
          ? shouldCancelEvent(event, shardNodes[0])
          : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = reactExports.useCallback(function (
    name,
    delta,
    target,
    should
  ) {
    var event = {
      name: name,
      delta: delta,
      target: target,
      should: should,
      shadowParent: getOutermostShadowParent(target),
    };
    shouldPreventQueue.current.push(event);
    setTimeout(function () {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function (
        e
      ) {
        return e !== event;
      });
    }, 1);
  },
  []);
  var scrollTouchStart = reactExports.useCallback(function (event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = undefined;
  }, []);
  var scrollWheel = reactExports.useCallback(function (event) {
    shouldCancel(
      event.type,
      getDeltaXY(event),
      event.target,
      shouldCancelEvent(event, props.lockRef.current)
    );
  }, []);
  var scrollTouchMove = reactExports.useCallback(function (event) {
    shouldCancel(
      event.type,
      getTouchXY(event),
      event.target,
      shouldCancelEvent(event, props.lockRef.current)
    );
  }, []);
  reactExports.useEffect(function () {
    lockStack.push(Style);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove,
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function () {
      lockStack = lockStack.filter(function (inst) {
        return inst !== Style;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar,
    inert = props.inert;
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    inert
      ? reactExports.createElement(Style, { styles: generateStyle(id) })
      : null,
    removeScrollBar
      ? reactExports.createElement(RemoveScrollBar, {
          noRelative: props.noRelative,
          gapMode: props.gapMode,
        })
      : null
  );
}
function getOutermostShadowParent(node) {
  var shadowParent = null;
  while (node !== null) {
    if (node instanceof ShadowRoot) {
      shadowParent = node.host;
      node = node.host;
    }
    node = node.parentNode;
  }
  return shadowParent;
}

const SideCar = exportSidecar(effectCar, RemoveScrollSideCar);

var ReactRemoveScroll = reactExports.forwardRef(function (props, ref) {
  return reactExports.createElement(
    RemoveScroll,
    __assign({}, props, { ref: ref, sideCar: SideCar })
  );
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;

var getDefaultParent = function (originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget)
    ? originalTarget[0]
    : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = new WeakMap();
var uncontrolledNodes = new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function (node) {
  return node && (node.host || unwrapHost(node.parentNode));
};
var correctTargets = function (parent, targets) {
  return targets
    .map(function (target) {
      if (parent.contains(target)) {
        return target;
      }
      var correctedTarget = unwrapHost(target);
      if (correctedTarget && parent.contains(correctedTarget)) {
        return correctedTarget;
      }
      console.error(
        "aria-hidden",
        target,
        "in not contained inside",
        parent,
        ". Doing nothing"
      );
      return null;
    })
    .filter(function (x) {
      return Boolean(x);
    });
};
/**
 * Marks everything except given node(or nodes) as aria-hidden
 * @param {Element | Element[]} originalTarget - elements to keep on the page
 * @param [parentNode] - top element, defaults to document.body
 * @param {String} [markerName] - a special attribute to mark every node
 * @param {String} [controlAttribute] - html Attribute to control
 * @return {Undo} undo command
 */
var applyAttributeToOthers = function (
  originalTarget,
  parentNode,
  markerName,
  controlAttribute
) {
  var targets = correctTargets(
    parentNode,
    Array.isArray(originalTarget) ? originalTarget : [originalTarget]
  );
  if (!markerMap[markerName]) {
    markerMap[markerName] = new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = new Set();
  var elementsToStop = new Set(targets);
  var keep = function (el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function (parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function (node) {
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        try {
          var attr = node.getAttribute(controlAttribute);
          var alreadyHidden = attr !== null && attr !== "false";
          var counterValue = (counterMap.get(node) || 0) + 1;
          var markerValue = (markerCounter.get(node) || 0) + 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          hiddenNodes.push(node);
          if (counterValue === 1 && alreadyHidden) {
            uncontrolledNodes.set(node, true);
          }
          if (markerValue === 1) {
            node.setAttribute(markerName, "true");
          }
          if (!alreadyHidden) {
            node.setAttribute(controlAttribute, "true");
          }
        } catch (e) {
          console.error("aria-hidden: cannot operate on ", node, e);
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function () {
    hiddenNodes.forEach(function (node) {
      var counterValue = counterMap.get(node) - 1;
      var markerValue = markerCounter.get(node) - 1;
      counterMap.set(node, counterValue);
      markerCounter.set(node, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node)) {
          node.removeAttribute(controlAttribute);
        }
        uncontrolledNodes.delete(node);
      }
      if (!markerValue) {
        node.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      // clear
      counterMap = new WeakMap();
      counterMap = new WeakMap();
      uncontrolledNodes = new WeakMap();
      markerMap = {};
    }
  };
};
/**
 * Marks everything except given node(or nodes) as aria-hidden
 * @param {Element | Element[]} originalTarget - elements to keep on the page
 * @param [parentNode] - top element, defaults to document.body
 * @param {String} [markerName] - a special attribute to mark every node
 * @return {Undo} undo command
 */
var hideOthers = function (originalTarget, parentNode, markerName) {
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.from(
    Array.isArray(originalTarget) ? originalTarget : [originalTarget]
  );
  var activeParentNode = getDefaultParent(originalTarget);
  if (!activeParentNode) {
    return function () {
      return null;
    };
  }
  // we should not hide aria-live elements - https://github.com/theKashey/aria-hidden/issues/10
  // and script elements, as they have no impact on accessibility.
  targets.push.apply(
    targets,
    Array.from(activeParentNode.querySelectorAll("[aria-live], script"))
  );
  return applyAttributeToOthers(
    targets,
    activeParentNode,
    markerName,
    "aria-hidden"
  );
};

var DIALOG_NAME = "Dialog";
var [createDialogContext] = createContextScope(DIALOG_NAME);
var [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);
var Dialog$1 = (props) => {
  const {
    __scopeDialog,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = true,
  } = props;
  const triggerRef = reactExports.useRef(null);
  const contentRef = reactExports.useRef(null);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: DIALOG_NAME,
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogProvider, {
    scope: __scopeDialog,
    triggerRef,
    contentRef,
    contentId: useId(),
    titleId: useId(),
    descriptionId: useId(),
    open,
    onOpenChange: setOpen,
    onOpenToggle: reactExports.useCallback(
      () => setOpen((prevOpen) => !prevOpen),
      [setOpen]
    ),
    modal,
    children,
  });
};
Dialog$1.displayName = DIALOG_NAME;
var TRIGGER_NAME$1 = "DialogTrigger";
var DialogTrigger = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDialog, ...triggerProps } = props;
  const context = useDialogContext(TRIGGER_NAME$1, __scopeDialog);
  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.button, {
    type: "button",
    "aria-haspopup": "dialog",
    "aria-expanded": context.open,
    "aria-controls": context.contentId,
    "data-state": getState(context.open),
    ...triggerProps,
    ref: composedTriggerRef,
    onClick: composeEventHandlers(props.onClick, context.onOpenToggle),
  });
});
DialogTrigger.displayName = TRIGGER_NAME$1;
var PORTAL_NAME$2 = "DialogPortal";
var [PortalProvider$1, usePortalContext$1] = createDialogContext(
  PORTAL_NAME$2,
  {
    forceMount: void 0,
  }
);
var DialogPortal$1 = (props) => {
  const { __scopeDialog, forceMount, children, container } = props;
  const context = useDialogContext(PORTAL_NAME$2, __scopeDialog);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(PortalProvider$1, {
    scope: __scopeDialog,
    forceMount,
    children: reactExports.Children.map(children, (child) =>
      /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, {
        present: forceMount || context.open,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$2, {
          asChild: true,
          container,
          children: child,
        }),
      })
    ),
  });
};
DialogPortal$1.displayName = PORTAL_NAME$2;
var OVERLAY_NAME = "DialogOverlay";
var DialogOverlay$1 = reactExports.forwardRef((props, forwardedRef) => {
  const portalContext = usePortalContext$1(OVERLAY_NAME, props.__scopeDialog);
  const { forceMount = portalContext.forceMount, ...overlayProps } = props;
  const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);
  return context.modal
    ? /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, {
        present: forceMount || context.open,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogOverlayImpl, {
          ...overlayProps,
          ref: forwardedRef,
        }),
      })
    : null;
});
DialogOverlay$1.displayName = OVERLAY_NAME;
var Slot$1 = createSlot("DialogOverlay.RemoveScroll");
var DialogOverlayImpl = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDialog, ...overlayProps } = props;
  const context = useDialogContext(OVERLAY_NAME, __scopeDialog);
  return (
    // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
    // ie. when `Overlay` and `Content` are siblings
    /* @__PURE__ */ jsxRuntimeExports.jsx(ReactRemoveScroll, {
      as: Slot$1,
      allowPinchZoom: true,
      shards: [context.contentRef],
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
        "data-state": getState(context.open),
        ...overlayProps,
        ref: forwardedRef,
        style: { pointerEvents: "auto", ...overlayProps.style },
      }),
    })
  );
});
var CONTENT_NAME$3 = "DialogContent";
var DialogContent$1 = reactExports.forwardRef((props, forwardedRef) => {
  const portalContext = usePortalContext$1(CONTENT_NAME$3, props.__scopeDialog);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = useDialogContext(CONTENT_NAME$3, props.__scopeDialog);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, {
    present: forceMount || context.open,
    children: context.modal
      ? /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentModal, {
          ...contentProps,
          ref: forwardedRef,
        })
      : /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentNonModal, {
          ...contentProps,
          ref: forwardedRef,
        }),
  });
});
DialogContent$1.displayName = CONTENT_NAME$3;
var DialogContentModal = reactExports.forwardRef((props, forwardedRef) => {
  const context = useDialogContext(CONTENT_NAME$3, props.__scopeDialog);
  const contentRef = reactExports.useRef(null);
  const composedRefs = useComposedRefs(
    forwardedRef,
    context.contentRef,
    contentRef
  );
  reactExports.useEffect(() => {
    const content = contentRef.current;
    if (content) return hideOthers(content);
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentImpl, {
    ...props,
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
      event.preventDefault();
      context.triggerRef.current?.focus();
    }),
    onPointerDownOutside: composeEventHandlers(
      props.onPointerDownOutside,
      (event) => {
        const originalEvent = event.detail.originalEvent;
        const ctrlLeftClick =
          originalEvent.button === 0 && originalEvent.ctrlKey === true;
        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
        if (isRightClick) event.preventDefault();
      }
    ),
    onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) =>
      event.preventDefault()
    ),
  });
});
var DialogContentNonModal = reactExports.forwardRef((props, forwardedRef) => {
  const context = useDialogContext(CONTENT_NAME$3, props.__scopeDialog);
  const hasInteractedOutsideRef = reactExports.useRef(false);
  const hasPointerDownOutsideRef = reactExports.useRef(false);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentImpl, {
    ...props,
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: (event) => {
      props.onCloseAutoFocus?.(event);
      if (!event.defaultPrevented) {
        if (!hasInteractedOutsideRef.current)
          context.triggerRef.current?.focus();
        event.preventDefault();
      }
      hasInteractedOutsideRef.current = false;
      hasPointerDownOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      props.onInteractOutside?.(event);
      if (!event.defaultPrevented) {
        hasInteractedOutsideRef.current = true;
        if (event.detail.originalEvent.type === "pointerdown") {
          hasPointerDownOutsideRef.current = true;
        }
      }
      const target = event.target;
      const targetIsTrigger = context.triggerRef.current?.contains(target);
      if (targetIsTrigger) event.preventDefault();
      if (
        event.detail.originalEvent.type === "focusin" &&
        hasPointerDownOutsideRef.current
      ) {
        event.preventDefault();
      }
    },
  });
});
var DialogContentImpl = reactExports.forwardRef((props, forwardedRef) => {
  const {
    __scopeDialog,
    trapFocus,
    onOpenAutoFocus,
    onCloseAutoFocus,
    ...contentProps
  } = props;
  const context = useDialogContext(CONTENT_NAME$3, __scopeDialog);
  const contentRef = reactExports.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, contentRef);
  useFocusGuards();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(FocusScope, {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(DismissableLayer, {
          role: "dialog",
          id: context.contentId,
          "aria-describedby": context.descriptionId,
          "aria-labelledby": context.titleId,
          "data-state": getState(context.open),
          ...contentProps,
          ref: composedRefs,
          onDismiss: () => context.onOpenChange(false),
        }),
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TitleWarning, {
            titleId: context.titleId,
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(DescriptionWarning, {
            contentRef,
            descriptionId: context.descriptionId,
          }),
        ],
      }),
    ],
  });
});
var TITLE_NAME = "DialogTitle";
var DialogTitle$1 = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDialog, ...titleProps } = props;
  const context = useDialogContext(TITLE_NAME, __scopeDialog);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.h2, {
    id: context.titleId,
    ...titleProps,
    ref: forwardedRef,
  });
});
DialogTitle$1.displayName = TITLE_NAME;
var DESCRIPTION_NAME = "DialogDescription";
var DialogDescription$1 = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDialog, ...descriptionProps } = props;
  const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.p, {
    id: context.descriptionId,
    ...descriptionProps,
    ref: forwardedRef,
  });
});
DialogDescription$1.displayName = DESCRIPTION_NAME;
var CLOSE_NAME = "DialogClose";
var DialogClose = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDialog, ...closeProps } = props;
  const context = useDialogContext(CLOSE_NAME, __scopeDialog);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.button, {
    type: "button",
    ...closeProps,
    ref: forwardedRef,
    onClick: composeEventHandlers(props.onClick, () =>
      context.onOpenChange(false)
    ),
  });
});
DialogClose.displayName = CLOSE_NAME;
function getState(open) {
  return open ? "open" : "closed";
}
var TITLE_WARNING_NAME = "DialogTitleWarning";
var [WarningProvider, useWarningContext] = createContext2(TITLE_WARNING_NAME, {
  contentName: CONTENT_NAME$3,
  titleName: TITLE_NAME,
  docsSlug: "dialog",
});
var TitleWarning = ({ titleId }) => {
  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);
  const MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;
  reactExports.useEffect(() => {
    if (titleId) {
      const hasTitle = document.getElementById(titleId);
      if (!hasTitle) console.error(MESSAGE);
    }
  }, [MESSAGE, titleId]);
  return null;
};
var DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning";
var DescriptionWarning = ({ contentRef, descriptionId }) => {
  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);
  const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${descriptionWarningContext.contentName}}.`;
  reactExports.useEffect(() => {
    const describedById = contentRef.current?.getAttribute("aria-describedby");
    if (descriptionId && describedById) {
      const hasDescription = document.getElementById(descriptionId);
      if (!hasDescription) console.warn(MESSAGE);
    }
  }, [MESSAGE, contentRef, descriptionId]);
  return null;
};
var Root$2 = Dialog$1;
var Trigger$1 = DialogTrigger;
var Portal$1 = DialogPortal$1;
var Overlay = DialogOverlay$1;
var Content$1 = DialogContent$1;
var Title = DialogTitle$1;
var Description = DialogDescription$1;
var Close = DialogClose;

function Dialog({ ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Root$2, {
    "data-slot": "dialog",
    ...props,
  });
}
function DialogPortal({ ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$1, {
    "data-slot": "dialog-portal",
    ...props,
  });
}
function DialogOverlay({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Overlay, {
    "data-slot": "dialog-overlay",
    className: cn(
      "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
      className
    ),
    ...props,
  });
}
function DialogContent({ className, children, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(DialogPortal, {
    "data-slot": "dialog-portal",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(DialogOverlay, {}),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Content$1, {
        "data-slot": "dialog-content",
        className: cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        ),
        ...props,
        children: [
          children,
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Close, {
            className:
              "ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(X, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                className: "sr-only",
                children: "Close",
              }),
            ],
          }),
        ],
      }),
    ],
  });
}
function DialogHeader({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
    "data-slot": "dialog-header",
    className: cn("flex flex-col gap-2 text-center sm:text-left", className),
    ...props,
  });
}
function DialogTitle({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Title, {
    "data-slot": "dialog-title",
    className: cn("text-lg leading-none font-semibold", className),
    ...props,
  });
}
function DialogDescription({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Description, {
    "data-slot": "dialog-description",
    className: cn("text-muted-foreground text-sm", className),
    ...props,
  });
}

function createCollection(name) {
  const PROVIDER_NAME = name + "CollectionProvider";
  const [createCollectionContext, createCollectionScope] =
    createContextScope(PROVIDER_NAME);
  const [CollectionProviderImpl, useCollectionContext] =
    createCollectionContext(PROVIDER_NAME, {
      collectionRef: { current: null },
      itemMap: /* @__PURE__ */ new Map(),
    });
  const CollectionProvider = (props) => {
    const { scope, children } = props;
    const ref = React.useRef(null);
    const itemMap = React.useRef(/* @__PURE__ */ new Map()).current;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CollectionProviderImpl, {
      scope,
      itemMap,
      collectionRef: ref,
      children,
    });
  };
  CollectionProvider.displayName = PROVIDER_NAME;
  const COLLECTION_SLOT_NAME = name + "CollectionSlot";
  const CollectionSlotImpl = createSlot(COLLECTION_SLOT_NAME);
  const CollectionSlot = React.forwardRef((props, forwardedRef) => {
    const { scope, children } = props;
    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
    const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CollectionSlotImpl, {
      ref: composedRefs,
      children,
    });
  });
  CollectionSlot.displayName = COLLECTION_SLOT_NAME;
  const ITEM_SLOT_NAME = name + "CollectionItemSlot";
  const ITEM_DATA_ATTR = "data-radix-collection-item";
  const CollectionItemSlotImpl = createSlot(ITEM_SLOT_NAME);
  const CollectionItemSlot = React.forwardRef((props, forwardedRef) => {
    const { scope, children, ...itemData } = props;
    const ref = React.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const context = useCollectionContext(ITEM_SLOT_NAME, scope);
    React.useEffect(() => {
      context.itemMap.set(ref, { ref, ...itemData });
      return () => void context.itemMap.delete(ref);
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CollectionItemSlotImpl, {
      ...{ [ITEM_DATA_ATTR]: "" },
      ref: composedRefs,
      children,
    });
  });
  CollectionItemSlot.displayName = ITEM_SLOT_NAME;
  function useCollection(scope) {
    const context = useCollectionContext(name + "CollectionConsumer", scope);
    const getItems = React.useCallback(() => {
      const collectionNode = context.collectionRef.current;
      if (!collectionNode) return [];
      const orderedNodes = Array.from(
        collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`)
      );
      const items = Array.from(context.itemMap.values());
      const orderedItems = items.sort(
        (a, b) =>
          orderedNodes.indexOf(a.ref.current) -
          orderedNodes.indexOf(b.ref.current)
      );
      return orderedItems;
    }, [context.collectionRef, context.itemMap]);
    return getItems;
  }
  return [
    {
      Provider: CollectionProvider,
      Slot: CollectionSlot,
      ItemSlot: CollectionItemSlot,
    },
    useCollection,
    createCollectionScope,
  ];
}

// packages/react/direction/src/direction.tsx
var DirectionContext = reactExports.createContext(void 0);
function useDirection(localDir) {
  const globalDir = reactExports.useContext(DirectionContext);
  return localDir || globalDir || "ltr";
}

/**
 * Custom positioning reference element.
 * @see https://floating-ui.com/docs/virtual-elements
 */

const sides = ["top", "right", "bottom", "left"];
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = (v) => ({
  x: v,
  y: v,
});
const oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom",
};
const oppositeAlignmentMap = {
  start: "end",
  end: "start",
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
const yAxisSides = /*#__PURE__*/ new Set(["top", "bottom"]);
function getSideAxis(placement) {
  return yAxisSides.has(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide =
    alignmentAxis === "x"
      ? alignment === (rtl ? "end" : "start")
        ? "right"
        : "left"
      : alignment === "start"
      ? "bottom"
      : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [
    getOppositeAlignmentPlacement(placement),
    oppositePlacement,
    getOppositeAlignmentPlacement(oppositePlacement),
  ];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(
    /start|end/g,
    (alignment) => oppositeAlignmentMap[alignment]
  );
}
const lrPlacement = ["left", "right"];
const rlPlacement = ["right", "left"];
const tbPlacement = ["top", "bottom"];
const btPlacement = ["bottom", "top"];
function getSideList(side, isStart, rtl) {
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rlPlacement : lrPlacement;
      return isStart ? lrPlacement : rlPlacement;
    case "left":
    case "right":
      return isStart ? tbPlacement : btPlacement;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(
    /left|right|bottom|top/g,
    (side) => oppositeSideMap[side]
  );
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding,
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number"
    ? expandPaddingObject(padding)
    : {
        top: padding,
        right: padding,
        bottom: padding,
        left: padding,
      };
}
function rectToClientRect(rect) {
  const { x, y, width, height } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y,
  };
}

function computeCoordsFromPlacement(_ref, placement, rtl) {
  let { reference, floating } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height,
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height,
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY,
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY,
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y,
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 *
 * This export does not have any `platform` interface logic. You will need to
 * write one for the platform you are using Floating UI with.
 */
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform,
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform.isRTL == null
    ? void 0
    : platform.isRTL(floating));
  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy,
  });
  let { x, y } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const { name, fn } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset,
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating,
      },
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data,
      },
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects =
            reset.rects === true
              ? await platform.getElementRects({
                  reference,
                  floating,
                  strategy,
                })
              : reset.rects;
        }
        ({ x, y } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData,
  };
};

/**
 * Resolves with an object of overflow side offsets that determine how much the
 * element is overflowing a given clipping boundary on each side.
 * - positive = overflowing the boundary by that number of pixels
 * - negative = how many pixels left before it will overflow
 * - 0 = lies flush with the boundary
 * @see https://floating-ui.com/docs/detectOverflow
 */
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const { x, y, platform, rects, elements, strategy } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0,
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(
    await platform.getClippingRect({
      element: (
        (_await$platform$isEle = await (platform.isElement == null
          ? void 0
          : platform.isElement(element))) != null
          ? _await$platform$isEle
          : true
      )
        ? element
        : element.contextElement ||
          (await (platform.getDocumentElement == null
            ? void 0
            : platform.getDocumentElement(elements.floating))),
      boundary,
      rootBoundary,
      strategy,
    })
  );
  const rect =
    elementContext === "floating"
      ? {
          x,
          y,
          width: rects.floating.width,
          height: rects.floating.height,
        }
      : rects.reference;
  const offsetParent = await (platform.getOffsetParent == null
    ? void 0
    : platform.getOffsetParent(elements.floating));
  const offsetScale = (await (platform.isElement == null
    ? void 0
    : platform.isElement(offsetParent)))
    ? (await (platform.getScale == null
        ? void 0
        : platform.getScale(offsetParent))) || {
        x: 1,
        y: 1,
      }
    : {
        x: 1,
        y: 1,
      };
  const elementClientRect = rectToClientRect(
    platform.convertOffsetParentRelativeRectToViewportRelativeRect
      ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
          elements,
          rect,
          offsetParent,
          strategy,
        })
      : rect
  );
  return {
    top:
      (clippingClientRect.top - elementClientRect.top + paddingObject.top) /
      offsetScale.y,
    bottom:
      (elementClientRect.bottom -
        clippingClientRect.bottom +
        paddingObject.bottom) /
      offsetScale.y,
    left:
      (clippingClientRect.left - elementClientRect.left + paddingObject.left) /
      offsetScale.x,
    right:
      (elementClientRect.right -
        clippingClientRect.right +
        paddingObject.right) /
      offsetScale.x,
  };
}

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow$3 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const { x, y, placement, rects, platform, elements, middlewareData } =
      state;
    // Since `element` is required, we don't Partial<> the type.
    const { element, padding = 0 } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y,
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff =
      rects.reference[length] +
      rects.reference[axis] -
      coords[axis] -
      rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform.getOffsetParent == null
      ? void 0
      : platform.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;

    // DOM platform can return `window` as the `offsetParent`.
    if (
      !clientSize ||
      !(await (platform.isElement == null
        ? void 0
        : platform.isElement(arrowOffsetParent)))
    ) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;

    // If the padding is large enough that it causes the arrow to no longer be
    // centered, modify the padding so that it is centered.
    const largestPossiblePadding =
      clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);

    // Make sure the arrow doesn't overflow the floating element if the center
    // point is outside the floating element's bounds.
    const min$1 = minPadding;
    const max = clientSize - arrowDimensions[length] - maxPadding;
    const center =
      clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset = clamp(min$1, center, max);

    // If the reference is small enough that the arrow's padding causes it to
    // to point to nothing for an aligned placement, adjust the offset of the
    // floating element itself. To ensure `shift()` continues to take action,
    // a single reset is performed when this is true.
    const shouldAddOffset =
      !middlewareData.arrow &&
      getAlignment(placement) != null &&
      center !== offset &&
      rects.reference[length] / 2 -
        (center < min$1 ? minPadding : maxPadding) -
        arrowDimensions[length] / 2 <
        0;
    const alignmentOffset = shouldAddOffset
      ? center < min$1
        ? center - min$1
        : center - max
      : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset,
        centerOffset: center - offset - alignmentOffset,
        ...(shouldAddOffset && {
          alignmentOffset,
        }),
      },
      reset: shouldAddOffset,
    };
  },
});

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip$2 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform,
        elements,
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);

      // If a reset by the arrow was caused due to an alignment offset being
      // added, we should skip any logic now since `flip()` has already done its
      // work.
      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643
      if (
        (_middlewareData$arrow = middlewareData.arrow) != null &&
        _middlewareData$arrow.alignmentOffset
      ) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform.isRTL == null
        ? void 0
        : platform.isRTL(elements.floating));
      const fallbackPlacements =
        specifiedFallbackPlacements ||
        (isBasePlacement || !flipAlignment
          ? [getOppositePlacement(initialPlacement)]
          : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(
          ...getOppositeAxisPlacements(
            initialPlacement,
            flipAlignment,
            fallbackAxisSideDirection,
            rtl
          )
        );
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData =
        ((_middlewareData$flip = middlewareData.flip) == null
          ? void 0
          : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }
      overflowsData = [
        ...overflowsData,
        {
          placement,
          overflows,
        },
      ];

      // One or more sides is overflowing.
      if (!overflows.every((side) => side <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex =
          (((_middlewareData$flip2 = middlewareData.flip) == null
            ? void 0
            : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          const ignoreCrossAxisOverflow =
            checkCrossAxis === "alignment"
              ? initialSideAxis !== getSideAxis(nextPlacement)
              : false;
          if (
            !ignoreCrossAxisOverflow ||
            // We leave the current main axis only if every placement on that axis
            // overflows the main axis.
            overflowsData.every((d) =>
              getSideAxis(d.placement) === initialSideAxis
                ? d.overflows[0] > 0
                : true
            )
          ) {
            // Try next placement and re-run the lifecycle.
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData,
              },
              reset: {
                placement: nextPlacement,
              },
            };
          }
        }

        // First, find the candidates that fit on the mainAxis side of overflow,
        // then find the placement that fits the best on the main crossAxis side.
        let resetPlacement =
          (_overflowsData$filter = overflowsData
            .filter((d) => d.overflows[0] <= 0)
            .sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null
            ? void 0
            : _overflowsData$filter.placement;

        // Otherwise fallback.
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement =
                (_overflowsData$filter2 = overflowsData
                  .filter((d) => {
                    if (hasFallbackAxisSideDirection) {
                      const currentSideAxis = getSideAxis(d.placement);
                      return (
                        currentSideAxis === initialSideAxis ||
                        // Create a bias to the `y` side axis due to horizontal
                        // reading directions favoring greater width.
                        currentSideAxis === "y"
                      );
                    }
                    return true;
                  })
                  .map((d) => [
                    d.placement,
                    d.overflows
                      .filter((overflow) => overflow > 0)
                      .reduce((acc, overflow) => acc + overflow, 0),
                  ])
                  .sort((a, b) => a[1] - b[1])[0]) == null
                  ? void 0
                  : _overflowsData$filter2[0];
              if (placement) {
                resetPlacement = placement;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement,
            },
          };
        }
      }
      return {};
    },
  };
};

function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width,
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
/**
 * Provides data to hide the floating element in applicable situations, such as
 * when it is not in the same clipping context as the reference element.
 * @see https://floating-ui.com/docs/hide
 */
const hide$2 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const { rects } = state;
      const { strategy = "referenceHidden", ...detectOverflowOptions } =
        evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference",
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets),
            },
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true,
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets),
            },
          };
        }
        default: {
          return {};
        }
      }
    },
  };
};

const originSides = /*#__PURE__*/ new Set(["left", "top"]);

// For type backwards-compatibility, the `OffsetOptions` type was also
// Derivable.

async function convertValueToCoords(state, options) {
  const { placement, platform, elements } = state;
  const rtl = await (platform.isRTL == null
    ? void 0
    : platform.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = originSides.has(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);

  // eslint-disable-next-line prefer-const
  let { mainAxis, crossAxis, alignmentAxis } =
    typeof rawValue === "number"
      ? {
          mainAxis: rawValue,
          crossAxis: 0,
          alignmentAxis: null,
        }
      : {
          mainAxis: rawValue.mainAxis || 0,
          crossAxis: rawValue.crossAxis || 0,
          alignmentAxis: rawValue.alignmentAxis,
        };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical
    ? {
        x: crossAxis * crossAxisMulti,
        y: mainAxis * mainAxisMulti,
      }
    : {
        x: mainAxis * mainAxisMulti,
        y: crossAxis * crossAxisMulti,
      };
}

/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset$2 = function (options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const { x, y, placement, middlewareData } = state;
      const diffCoords = await convertValueToCoords(state, options);

      // If the placement is the same and the arrow caused an alignment offset
      // then we don't need to change the positioning coordinates.
      if (
        placement ===
          ((_middlewareData$offse = middlewareData.offset) == null
            ? void 0
            : _middlewareData$offse.placement) &&
        (_middlewareData$arrow = middlewareData.arrow) != null &&
        _middlewareData$arrow.alignmentOffset
      ) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement,
        },
      };
    },
  };
};

/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const shift$2 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const { x, y, placement } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let { x, y } = _ref;
            return {
              x,
              y,
            };
          },
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y,
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min = mainAxisCoord + overflow[minSide];
        const max = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min, mainAxisCoord, max);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min = crossAxisCoord + overflow[minSide];
        const max = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min, crossAxisCoord, max);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord,
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis,
          },
        },
      };
    },
  };
};
/**
 * Built-in `limiter` that will stop `shift()` at a certain point.
 */
const limitShift$2 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const { x, y, placement, rects, middlewareData } = state;
      const {
        offset = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
      } = evaluate(options, state);
      const coords = {
        x,
        y,
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset, state);
      const computedOffset =
        typeof rawOffset === "number"
          ? {
              mainAxis: rawOffset,
              crossAxis: 0,
            }
          : {
              mainAxis: 0,
              crossAxis: 0,
              ...rawOffset,
            };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin =
          rects.reference[mainAxis] -
          rects.floating[len] +
          computedOffset.mainAxis;
        const limitMax =
          rects.reference[mainAxis] +
          rects.reference[len] -
          computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = originSides.has(getSide(placement));
        const limitMin =
          rects.reference[crossAxis] -
          rects.floating[len] +
          (isOriginSide
            ? ((_middlewareData$offse = middlewareData.offset) == null
                ? void 0
                : _middlewareData$offse[crossAxis]) || 0
            : 0) +
          (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax =
          rects.reference[crossAxis] +
          rects.reference[len] +
          (isOriginSide
            ? 0
            : ((_middlewareData$offse2 = middlewareData.offset) == null
                ? void 0
                : _middlewareData$offse2[crossAxis]) || 0) -
          (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord,
      };
    },
  };
};

/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */
const size$2 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const { placement, rects, platform, elements } = state;
      const { apply = () => {}, ...detectOverflowOptions } = evaluate(
        options,
        state
      );
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const { width, height } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide =
          alignment ===
          ((await (platform.isRTL == null
            ? void 0
            : platform.isRTL(elements.floating)))
            ? "start"
            : "end")
            ? "left"
            : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(
        height - overflow[heightSide],
        maximumClippingHeight
      );
      const overflowAvailableWidth = min(
        width - overflow[widthSide],
        maximumClippingWidth
      );
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if (
        (_state$middlewareData = state.middlewareData.shift) != null &&
        _state$middlewareData.enabled.x
      ) {
        availableWidth = maximumClippingWidth;
      }
      if (
        (_state$middlewareData2 = state.middlewareData.shift) != null &&
        _state$middlewareData2.enabled.y
      ) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth =
            width -
            2 *
              (xMin !== 0 || xMax !== 0
                ? xMin + xMax
                : max(overflow.left, overflow.right));
        } else {
          availableHeight =
            height -
            2 *
              (yMin !== 0 || yMax !== 0
                ? yMin + yMax
                : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight,
      });
      const nextDimensions = await platform.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true,
          },
        };
      }
      return {};
    },
  };
};

function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  // Mocked nodes in testing environments may not be instances of Node. By
  // returning `#document` an infinite loop won't occur.
  // https://github.com/floating-ui/floating-ui/issues/2317
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (
    (node == null || (_node$ownerDocument = node.ownerDocument) == null
      ? void 0
      : _node$ownerDocument.defaultView) || window
  );
}
function getDocumentElement(node) {
  var _ref;
  return (_ref =
    (isNode(node) ? node.ownerDocument : node.document) || window.document) ==
    null
    ? void 0
    : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return (
    value instanceof HTMLElement ||
    value instanceof getWindow(value).HTMLElement
  );
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return (
    value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot
  );
}
const invalidOverflowDisplayValues = /*#__PURE__*/ new Set([
  "inline",
  "contents",
]);
function isOverflowElement(element) {
  const { overflow, overflowX, overflowY, display } =
    getComputedStyle$1(element);
  return (
    /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) &&
    !invalidOverflowDisplayValues.has(display)
  );
}
const tableElements = /*#__PURE__*/ new Set(["table", "td", "th"]);
function isTableElement(element) {
  return tableElements.has(getNodeName(element));
}
const topLayerSelectors = [":popover-open", ":modal"];
function isTopLayer(element) {
  return topLayerSelectors.some((selector) => {
    try {
      return element.matches(selector);
    } catch (_e) {
      return false;
    }
  });
}
const transformProperties = [
  "transform",
  "translate",
  "scale",
  "rotate",
  "perspective",
];
const willChangeValues = [
  "transform",
  "translate",
  "scale",
  "rotate",
  "perspective",
  "filter",
];
const containValues = ["paint", "layout", "strict", "content"];
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss)
    ? getComputedStyle$1(elementOrCss)
    : elementOrCss;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  // https://drafts.csswg.org/css-transforms-2/#individual-transforms
  return (
    transformProperties.some((value) =>
      css[value] ? css[value] !== "none" : false
    ) ||
    (css.containerType ? css.containerType !== "normal" : false) ||
    (!webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false)) ||
    (!webkit && (css.filter ? css.filter !== "none" : false)) ||
    willChangeValues.some((value) => (css.willChange || "").includes(value)) ||
    containValues.some((value) => (css.contain || "").includes(value))
  );
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
const lastTraversableNodeNames = /*#__PURE__*/ new Set([
  "html",
  "body",
  "#document",
]);
function isLastTraversableNode(node) {
  return lastTraversableNodeNames.has(getNodeName(node));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop,
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY,
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result =
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot ||
    // DOM Element detected.
    node.parentNode ||
    // ShadowRoot detected.
    (isShadowRoot(node) && node.host) ||
    // Fallback.
    getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody =
    scrollableAncestor ===
    ((_node$ownerDocument2 = node.ownerDocument) == null
      ? void 0
      : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(
      win,
      win.visualViewport || [],
      isOverflowElement(scrollableAncestor) ? scrollableAncestor : [],
      frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []
    );
  }
  return list.concat(
    scrollableAncestor,
    getOverflowAncestors(scrollableAncestor, [], traverseIframes)
  );
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent)
    ? win.frameElement
    : null;
}

function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  // In testing environments, the `width` and `height` properties are empty
  // strings for SVG elements, returning NaN. Fallback to `0` in this case.
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback =
    round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback,
  };
}

function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}

function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const { width, height, $ } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;

  // 0, NaN, or Infinity should always fallback to 1.

  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y,
  };
}

const noOffsets = /*#__PURE__*/ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop,
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (
    !floatingOffsetParent ||
    (isFixed && floatingOffsetParent !== getWindow(element))
  ) {
    return false;
  }
  return isFixed;
}

function getBoundingClientRect(
  element,
  includeScale,
  isFixedStrategy,
  offsetParent
) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(
    domElement,
    isFixedStrategy,
    offsetParent
  )
    ? getVisualOffsets(domElement)
    : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin =
      offsetParent && isElement(offsetParent)
        ? getWindow(offsetParent)
        : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left =
        iframeRect.left +
        (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) *
          iframeScale.x;
      const top =
        iframeRect.top +
        (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y,
  });
}

// If <html> has a CSS width greater than the viewport, then this will be
// incorrect for RTL.
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}

function getHTMLOffset(documentElement, scroll) {
  const htmlRect = documentElement.getBoundingClientRect();
  const x =
    htmlRect.left +
    scroll.scrollLeft -
    getWindowScrollBarX(documentElement, htmlRect);
  const y = htmlRect.top + scroll.scrollTop;
  return {
    x,
    y,
  };
}

function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let { elements, rect, offsetParent, strategy } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || (topLayer && isFixed)) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0,
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {
    if (
      getNodeName(offsetParent) !== "body" ||
      isOverflowElement(documentElement)
    ) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset =
    documentElement && !isOffsetParentAnElement && !isFixed
      ? getHTMLOffset(documentElement, scroll)
      : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x:
      rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y,
  };
}

function getClientRects(element) {
  return Array.from(element.getClientRects());
}

// Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable.
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(
    html.scrollWidth,
    html.clientWidth,
    body.scrollWidth,
    body.clientWidth
  );
  const height = max(
    html.scrollHeight,
    html.clientHeight,
    body.scrollHeight,
    body.clientHeight
  );
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y,
  };
}

// Safety check: ensure the scrollbar space is reasonable in case this
// calculation is affected by unusual styles.
// Most scrollbars leave 15-18px of space.
const SCROLLBAR_MAX = 25;
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || (visualViewportBased && strategy === "fixed")) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  const windowScrollbarX = getWindowScrollBarX(html);
  // <html> `overflow: hidden` + `scrollbar-gutter: stable` reduces the
  // visual width of the <html> but this is not considered in the size
  // of `html.clientWidth`.
  if (windowScrollbarX <= 0) {
    const doc = html.ownerDocument;
    const body = doc.body;
    const bodyStyles = getComputedStyle(body);
    const bodyMarginInline =
      doc.compatMode === "CSS1Compat"
        ? parseFloat(bodyStyles.marginLeft) +
            parseFloat(bodyStyles.marginRight) || 0
        : 0;
    const clippingStableScrollbarWidth = Math.abs(
      html.clientWidth - body.clientWidth - bodyMarginInline
    );
    if (clippingStableScrollbarWidth <= SCROLLBAR_MAX) {
      width -= clippingStableScrollbarWidth;
    }
  } else if (windowScrollbarX <= SCROLLBAR_MAX) {
    // If the <body> scrollbar is on the left, the width needs to be extended
    // by the scrollbar amount so there isn't extra space on the right.
    width += windowScrollbarX;
  }
  return {
    width,
    height,
    x,
    y,
  };
}

const absoluteOrFixed = /*#__PURE__*/ new Set(["absolute", "fixed"]);
// Returns the inner client rect, subtracting scrollbars if present.
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y,
  };
}
function getClientRectFromClippingAncestor(
  element,
  clippingAncestor,
  strategy
) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height,
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (
    parentNode === stopNode ||
    !isElement(parentNode) ||
    isLastTraversableNode(parentNode)
  ) {
    return false;
  }
  return (
    getComputedStyle$1(parentNode).position === "fixed" ||
    hasFixedPositionAncestor(parentNode, stopNode)
  );
}

// A "clipping ancestor" is an `overflow` element with the characteristic of
// clipping (or hiding) child elements. This returns all clipping ancestors
// of the given element up the tree.
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter(
    (el) => isElement(el) && getNodeName(el) !== "body"
  );
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed
      ? !currentNodeIsContaining && !currentContainingBlockComputedStyle
      : (!currentNodeIsContaining &&
          computedStyle.position === "static" &&
          !!currentContainingBlockComputedStyle &&
          absoluteOrFixed.has(currentContainingBlockComputedStyle.position)) ||
        (isOverflowElement(currentNode) &&
          !currentNodeIsContaining &&
          hasFixedPositionAncestor(element, currentNode));
    if (shouldDropCurrentNode) {
      // Drop non-containing blocks.
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      // Record last containing block for next iteration.
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}

// Gets the maximum area that the element is visible in due to any number of
// clipping ancestors.
function getClippingRect(_ref) {
  let { element, boundary, rootBoundary, strategy } = _ref;
  const elementClippingAncestors =
    boundary === "clippingAncestors"
      ? isTopLayer(element)
        ? []
        : getClippingElementAncestors(element, this._c)
      : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(
      element,
      clippingAncestor,
      strategy
    );
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top,
  };
}

function getDimensions(element) {
  const { width, height } = getCssDimensions(element);
  return {
    width,
    height,
  };
}

function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0,
  };
  const offsets = createCoords(0);

  // If the <body> scrollbar appears on the left (e.g. RTL systems). Use
  // Firefox with layout.scrollbar.side = 3 in about:config to test this.
  function setLeftRTLScrollbarOffset() {
    offsets.x = getWindowScrollBarX(documentElement);
  }
  if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {
    if (
      getNodeName(offsetParent) !== "body" ||
      isOverflowElement(documentElement)
    ) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(
        offsetParent,
        true,
        isFixed,
        offsetParent
      );
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      setLeftRTLScrollbarOffset();
    }
  }
  if (isFixed && !isOffsetParentAnElement && documentElement) {
    setLeftRTLScrollbarOffset();
  }
  const htmlOffset =
    documentElement && !isOffsetParentAnElement && !isFixed
      ? getHTMLOffset(documentElement, scroll)
      : createCoords(0);
  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height,
  };
}

function isStaticPositioned(element) {
  return getComputedStyle$1(element).position === "static";
}

function getTrueOffsetParent(element, polyfill) {
  if (
    !isHTMLElement(element) ||
    getComputedStyle$1(element).position === "fixed"
  ) {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;

  // Firefox returns the <html> element as the offsetParent if it's non-static,
  // while Chrome and Safari return the <body> element. The <body> element must
  // be used to perform the correct calculations even if the <html> element is
  // non-static.
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}

// Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (
    offsetParent &&
    isTableElement(offsetParent) &&
    isStaticPositioned(offsetParent)
  ) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (
    offsetParent &&
    isLastTraversableNode(offsetParent) &&
    isStaticPositioned(offsetParent) &&
    !isContainingBlock(offsetParent)
  ) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}

const getElementRects = async function (data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(
      data.reference,
      await getOffsetParentFn(data.floating),
      data.strategy
    ),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height,
    },
  };
};

function isRTL(element) {
  return getComputedStyle$1(element).direction === "rtl";
}

const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL,
};

function rectsAreEqual(a, b) {
  return (
    a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height
  );
}

// https://samthor.au/2021/observing-dom/
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const { left, top, width, height } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin =
      -insetTop +
      "px " +
      -insetRight +
      "px " +
      -insetBottom +
      "px " +
      -insetLeft +
      "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1,
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          // If the reference is clipped, the ratio is 0. Throttle the refresh
          // to prevent an infinite loop of updates.
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1000);
        } else {
          refresh(false, ratio);
        }
      }
      if (
        ratio === 1 &&
        !rectsAreEqual(
          elementRectForRootMargin,
          element.getBoundingClientRect()
        )
      ) {
        // It's possible that even though the ratio is reported as 1, the
        // element is not actually fully within the IntersectionObserver's root
        // area anymore. This can happen under performance constraints. This may
        // be a bug in the browser's IntersectionObserver implementation. To
        // work around this, we compare the element's bounding rect now with
        // what it was at the time we created the IntersectionObserver. If they
        // are not equal then the element moved, so we refresh.
        refresh();
      }
      isFirstUpdate = false;
    }

    // Older browsers don't support a `document` as the root and will throw an
    // error.
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument,
      });
    } catch (_e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}

/**
 * Automatically updates the position of the floating element when necessary.
 * Should only be called when the floating element is mounted on the DOM or
 * visible on the screen.
 * @returns cleanup function that should be invoked when the floating element is
 * removed from the DOM or hidden from the screen.
 * @see https://floating-ui.com/docs/autoUpdate
 */
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false,
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors =
    ancestorScroll || ancestorResize
      ? [
          ...(referenceEl ? getOverflowAncestors(referenceEl) : []),
          ...getOverflowAncestors(floating),
        ]
      : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll &&
      ancestor.addEventListener("scroll", update, {
        passive: true,
      });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo =
    referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        // Prevent update loops when using the `size` middleware.
        // https://github.com/floating-ui/floating-ui/issues/1740
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null ||
            _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null ||
      _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}

/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset$1 = offset$2;

/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const shift$1 = shift$2;

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip$1 = flip$2;

/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */
const size$1 = size$2;

/**
 * Provides data to hide the floating element in applicable situations, such as
 * when it is not in the same clipping context as the reference element.
 * @see https://floating-ui.com/docs/hide
 */
const hide$1 = hide$2;

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow$2 = arrow$3;

/**
 * Built-in `limiter` that will stop `shift()` at a certain point.
 */
const limitShift$1 = limitShift$2;

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 */
const computePosition = (reference, floating, options) => {
  // This caches the expensive `getClippingElementAncestors` function so that
  // multiple lifecycle resets re-use the same result. It only lives for a
  // single call. If other functions become expensive, we can add them as well.
  const cache = new Map();
  const mergedOptions = {
    platform,
    ...options,
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache,
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache,
  });
};

var isClient = typeof document !== "undefined";

var noop = function noop() {};
var index = isClient ? reactExports.useLayoutEffect : noop;

// Fork of `fast-deep-equal` that only does the comparisons we need and compares
// functions
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b && typeof a === "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length) return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}

function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}

function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}

function useLatestRef(value) {
  const ref = reactExports.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}

/**
 * Provides data to position a floating element.
 * @see https://floating-ui.com/docs/useFloating
 */
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform,
    elements: { reference: externalReference, floating: externalFloating } = {},
    transform = true,
    whileElementsMounted,
    open,
  } = options;
  const [data, setData] = reactExports.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false,
  });
  const [latestMiddleware, setLatestMiddleware] =
    reactExports.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = reactExports.useState(null);
  const [_floating, _setFloating] = reactExports.useState(null);
  const setReference = reactExports.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = reactExports.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = reactExports.useRef(null);
  const floatingRef = reactExports.useRef(null);
  const dataRef = reactExports.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform);
  const openRef = useLatestRef(open);
  const update = reactExports.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware,
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition(referenceRef.current, floatingRef.current, config).then(
      (data) => {
        const fullData = {
          ...data,
          // The floating element's position may be recomputed while it's closed
          // but still mounted (such as when transitioning out). To ensure
          // `isPositioned` will be `false` initially on the next open, avoid
          // setting it to `true` when `open === false` (must be specified).
          isPositioned: openRef.current !== false,
        };
        if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
          dataRef.current = fullData;
          reactDomExports.flushSync(() => {
            setData(fullData);
          });
        }
      }
    );
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data) => ({
        ...data,
        isPositioned: false,
      }));
    }
  }, [open]);
  const isMountedRef = reactExports.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [
    referenceEl,
    floatingEl,
    update,
    whileElementsMountedRef,
    hasWhileElementsMounted,
  ]);
  const refs = reactExports.useMemo(
    () => ({
      reference: referenceRef,
      floating: floatingRef,
      setReference,
      setFloating,
    }),
    [setReference, setFloating]
  );
  const elements = reactExports.useMemo(
    () => ({
      reference: referenceEl,
      floating: floatingEl,
    }),
    [referenceEl, floatingEl]
  );
  const floatingStyles = reactExports.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0,
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...(getDPR(elements.floating) >= 1.5 && {
          willChange: "transform",
        }),
      };
    }
    return {
      position: strategy,
      left: x,
      top: y,
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return reactExports.useMemo(
    () => ({
      ...data,
      update,
      refs,
      elements,
      floatingStyles,
    }),
    [data, update, refs, elements, floatingStyles]
  );
}

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * This wraps the core `arrow` middleware to allow React refs as the element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const { element, padding } =
        typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow$2({
            element: element.current,
            padding,
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow$2({
          element,
          padding,
        }).fn(state);
      }
      return {};
    },
  };
};

/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset = (options, deps) => ({
  ...offset$1(options),
  options: [options, deps],
});

/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const shift = (options, deps) => ({
  ...shift$1(options),
  options: [options, deps],
});

/**
 * Built-in `limiter` that will stop `shift()` at a certain point.
 */
const limitShift = (options, deps) => ({
  ...limitShift$1(options),
  options: [options, deps],
});

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip = (options, deps) => ({
  ...flip$1(options),
  options: [options, deps],
});

/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */
const size = (options, deps) => ({
  ...size$1(options),
  options: [options, deps],
});

/**
 * Provides data to hide the floating element in applicable situations, such as
 * when it is not in the same clipping context as the reference element.
 * @see https://floating-ui.com/docs/hide
 */
const hide = (options, deps) => ({
  ...hide$1(options),
  options: [options, deps],
});

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * This wraps the core `arrow` middleware to allow React refs as the element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps],
});

// src/arrow.tsx
var NAME = "Arrow";
var Arrow$1 = reactExports.forwardRef((props, forwardedRef) => {
  const { children, width = 10, height = 5, ...arrowProps } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.svg, {
    ...arrowProps,
    ref: forwardedRef,
    width,
    height,
    viewBox: "0 0 30 10",
    preserveAspectRatio: "none",
    children: props.asChild
      ? children
      : /* @__PURE__ */ jsxRuntimeExports.jsx("polygon", {
          points: "0,0 30,0 15,10",
        }),
  });
});
Arrow$1.displayName = NAME;
var Root$1 = Arrow$1;

// packages/react/use-size/src/use-size.tsx
function useSize(element) {
  const [size, setSize] = reactExports.useState(void 0);
  useLayoutEffect2(() => {
    if (element) {
      setSize({ width: element.offsetWidth, height: element.offsetHeight });
      const resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries)) {
          return;
        }
        if (!entries.length) {
          return;
        }
        const entry = entries[0];
        let width;
        let height;
        if ("borderBoxSize" in entry) {
          const borderSizeEntry = entry["borderBoxSize"];
          const borderSize = Array.isArray(borderSizeEntry)
            ? borderSizeEntry[0]
            : borderSizeEntry;
          width = borderSize["inlineSize"];
          height = borderSize["blockSize"];
        } else {
          width = element.offsetWidth;
          height = element.offsetHeight;
        }
        setSize({ width, height });
      });
      resizeObserver.observe(element, { box: "border-box" });
      return () => resizeObserver.unobserve(element);
    } else {
      setSize(void 0);
    }
  }, [element]);
  return size;
}

var POPPER_NAME = "Popper";
var [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);
var [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
var Popper = (props) => {
  const { __scopePopper, children } = props;
  const [anchor, setAnchor] = reactExports.useState(null);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(PopperProvider, {
    scope: __scopePopper,
    anchor,
    onAnchorChange: setAnchor,
    children,
  });
};
Popper.displayName = POPPER_NAME;
var ANCHOR_NAME$1 = "PopperAnchor";
var PopperAnchor = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopePopper, virtualRef, ...anchorProps } = props;
  const context = usePopperContext(ANCHOR_NAME$1, __scopePopper);
  const ref = reactExports.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const anchorRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    const previousAnchor = anchorRef.current;
    anchorRef.current = virtualRef?.current || ref.current;
    if (previousAnchor !== anchorRef.current) {
      context.onAnchorChange(anchorRef.current);
    }
  });
  return virtualRef
    ? null
    : /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
        ...anchorProps,
        ref: composedRefs,
      });
});
PopperAnchor.displayName = ANCHOR_NAME$1;
var CONTENT_NAME$2 = "PopperContent";
var [PopperContentProvider, useContentContext] =
  createPopperContext(CONTENT_NAME$2);
var PopperContent = reactExports.forwardRef((props, forwardedRef) => {
  const {
    __scopePopper,
    side = "bottom",
    sideOffset = 0,
    align = "center",
    alignOffset = 0,
    arrowPadding = 0,
    avoidCollisions = true,
    collisionBoundary = [],
    collisionPadding: collisionPaddingProp = 0,
    sticky = "partial",
    hideWhenDetached = false,
    updatePositionStrategy = "optimized",
    onPlaced,
    ...contentProps
  } = props;
  const context = usePopperContext(CONTENT_NAME$2, __scopePopper);
  const [content, setContent] = reactExports.useState(null);
  const composedRefs = useComposedRefs(forwardedRef, (node) =>
    setContent(node)
  );
  const [arrow$1, setArrow] = reactExports.useState(null);
  const arrowSize = useSize(arrow$1);
  const arrowWidth = arrowSize?.width ?? 0;
  const arrowHeight = arrowSize?.height ?? 0;
  const desiredPlacement = side + (align !== "center" ? "-" + align : "");
  const collisionPadding =
    typeof collisionPaddingProp === "number"
      ? collisionPaddingProp
      : { top: 0, right: 0, bottom: 0, left: 0, ...collisionPaddingProp };
  const boundary = Array.isArray(collisionBoundary)
    ? collisionBoundary
    : [collisionBoundary];
  const hasExplicitBoundaries = boundary.length > 0;
  const detectOverflowOptions = {
    padding: collisionPadding,
    boundary: boundary.filter(isNotNull),
    // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
    altBoundary: hasExplicitBoundaries,
  };
  const { refs, floatingStyles, placement, isPositioned, middlewareData } =
    useFloating({
      // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
      strategy: "fixed",
      placement: desiredPlacement,
      whileElementsMounted: (...args) => {
        const cleanup = autoUpdate(...args, {
          animationFrame: updatePositionStrategy === "always",
        });
        return cleanup;
      },
      elements: {
        reference: context.anchor,
      },
      middleware: [
        offset({
          mainAxis: sideOffset + arrowHeight,
          alignmentAxis: alignOffset,
        }),
        avoidCollisions &&
          shift({
            mainAxis: true,
            crossAxis: false,
            limiter: sticky === "partial" ? limitShift() : void 0,
            ...detectOverflowOptions,
          }),
        avoidCollisions && flip({ ...detectOverflowOptions }),
        size({
          ...detectOverflowOptions,
          apply: ({ elements, rects, availableWidth, availableHeight }) => {
            const { width: anchorWidth, height: anchorHeight } =
              rects.reference;
            const contentStyle = elements.floating.style;
            contentStyle.setProperty(
              "--radix-popper-available-width",
              `${availableWidth}px`
            );
            contentStyle.setProperty(
              "--radix-popper-available-height",
              `${availableHeight}px`
            );
            contentStyle.setProperty(
              "--radix-popper-anchor-width",
              `${anchorWidth}px`
            );
            contentStyle.setProperty(
              "--radix-popper-anchor-height",
              `${anchorHeight}px`
            );
          },
        }),
        arrow$1 && arrow({ element: arrow$1, padding: arrowPadding }),
        transformOrigin({ arrowWidth, arrowHeight }),
        hideWhenDetached &&
          hide({ strategy: "referenceHidden", ...detectOverflowOptions }),
      ],
    });
  const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
  const handlePlaced = useCallbackRef$1(onPlaced);
  useLayoutEffect2(() => {
    if (isPositioned) {
      handlePlaced?.();
    }
  }, [isPositioned, handlePlaced]);
  const arrowX = middlewareData.arrow?.x;
  const arrowY = middlewareData.arrow?.y;
  const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;
  const [contentZIndex, setContentZIndex] = reactExports.useState();
  useLayoutEffect2(() => {
    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [content]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
    ref: refs.setFloating,
    "data-radix-popper-content-wrapper": "",
    style: {
      ...floatingStyles,
      transform: isPositioned
        ? floatingStyles.transform
        : "translate(0, -200%)",
      // keep off the page when measuring
      minWidth: "max-content",
      zIndex: contentZIndex,
      ["--radix-popper-transform-origin"]: [
        middlewareData.transformOrigin?.x,
        middlewareData.transformOrigin?.y,
      ].join(" "),
      // hide the content if using the hide middleware and should be hidden
      // set visibility to hidden and disable pointer events so the UI behaves
      // as if the PopperContent isn't there at all
      ...(middlewareData.hide?.referenceHidden && {
        visibility: "hidden",
        pointerEvents: "none",
      }),
    },
    dir: props.dir,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(PopperContentProvider, {
      scope: __scopePopper,
      placedSide,
      onArrowChange: setArrow,
      arrowX,
      arrowY,
      shouldHideArrow: cannotCenterArrow,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
        "data-side": placedSide,
        "data-align": placedAlign,
        ...contentProps,
        ref: composedRefs,
        style: {
          ...contentProps.style,
          // if the PopperContent hasn't been placed yet (not all measurements done)
          // we prevent animations so that users's animation don't kick in too early referring wrong sides
          animation: !isPositioned ? "none" : void 0,
        },
      }),
    }),
  });
});
PopperContent.displayName = CONTENT_NAME$2;
var ARROW_NAME$2 = "PopperArrow";
var OPPOSITE_SIDE = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right",
};
var PopperArrow = reactExports.forwardRef(function PopperArrow2(
  props,
  forwardedRef
) {
  const { __scopePopper, ...arrowProps } = props;
  const contentContext = useContentContext(ARROW_NAME$2, __scopePopper);
  const baseSide = OPPOSITE_SIDE[contentContext.placedSide];
  return (
    // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
    // doesn't report size as we'd expect on SVG elements.
    // it reports their bounding box which is effectively the largest path inside the SVG.
    /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      ref: contentContext.onArrowChange,
      style: {
        position: "absolute",
        left: contentContext.arrowX,
        top: contentContext.arrowY,
        [baseSide]: 0,
        transformOrigin: {
          top: "",
          right: "0 0",
          bottom: "center 0",
          left: "100% 0",
        }[contentContext.placedSide],
        transform: {
          top: "translateY(100%)",
          right: "translateY(50%) rotate(90deg) translateX(-50%)",
          bottom: `rotate(180deg)`,
          left: "translateY(50%) rotate(-90deg) translateX(50%)",
        }[contentContext.placedSide],
        visibility: contentContext.shouldHideArrow ? "hidden" : void 0,
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root$1, {
        ...arrowProps,
        ref: forwardedRef,
        style: {
          ...arrowProps.style,
          // ensures the element can be measured correctly (mostly for if SVG)
          display: "block",
        },
      }),
    })
  );
});
PopperArrow.displayName = ARROW_NAME$2;
function isNotNull(value) {
  return value !== null;
}
var transformOrigin = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    const { placement, rects, middlewareData } = data;
    const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;
    const isArrowHidden = cannotCenterArrow;
    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
    const noArrowAlign = { start: "0%", center: "50%", end: "100%" }[
      placedAlign
    ];
    const arrowXCenter = (middlewareData.arrow?.x ?? 0) + arrowWidth / 2;
    const arrowYCenter = (middlewareData.arrow?.y ?? 0) + arrowHeight / 2;
    let x = "";
    let y = "";
    if (placedSide === "bottom") {
      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y = `${-arrowHeight}px`;
    } else if (placedSide === "top") {
      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y = `${rects.floating.height + arrowHeight}px`;
    } else if (placedSide === "right") {
      x = `${-arrowHeight}px`;
      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    } else if (placedSide === "left") {
      x = `${rects.floating.width + arrowHeight}px`;
      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    }
    return { data: { x, y } };
  },
});
function getSideAndAlignFromPlacement(placement) {
  const [side, align = "center"] = placement.split("-");
  return [side, align];
}
var Root2$1 = Popper;
var Anchor = PopperAnchor;
var Content = PopperContent;
var Arrow = PopperArrow;

var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
var EVENT_OPTIONS = { bubbles: false, cancelable: true };
var GROUP_NAME$2 = "RovingFocusGroup";
var [Collection$1, useCollection$1, createCollectionScope$1] =
  createCollection(GROUP_NAME$2);
var [createRovingFocusGroupContext, createRovingFocusGroupScope] =
  createContextScope(GROUP_NAME$2, [createCollectionScope$1]);
var [RovingFocusProvider, useRovingFocusContext] =
  createRovingFocusGroupContext(GROUP_NAME$2);
var RovingFocusGroup = reactExports.forwardRef((props, forwardedRef) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Collection$1.Provider, {
    scope: props.__scopeRovingFocusGroup,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Collection$1.Slot, {
      scope: props.__scopeRovingFocusGroup,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(RovingFocusGroupImpl, {
        ...props,
        ref: forwardedRef,
      }),
    }),
  });
});
RovingFocusGroup.displayName = GROUP_NAME$2;
var RovingFocusGroupImpl = reactExports.forwardRef((props, forwardedRef) => {
  const {
    __scopeRovingFocusGroup,
    orientation,
    loop = false,
    dir,
    currentTabStopId: currentTabStopIdProp,
    defaultCurrentTabStopId,
    onCurrentTabStopIdChange,
    onEntryFocus,
    preventScrollOnEntryFocus = false,
    ...groupProps
  } = props;
  const ref = reactExports.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const direction = useDirection(dir);
  const [currentTabStopId, setCurrentTabStopId] = useControllableState({
    prop: currentTabStopIdProp,
    defaultProp: defaultCurrentTabStopId ?? null,
    onChange: onCurrentTabStopIdChange,
    caller: GROUP_NAME$2,
  });
  const [isTabbingBackOut, setIsTabbingBackOut] = reactExports.useState(false);
  const handleEntryFocus = useCallbackRef$1(onEntryFocus);
  const getItems = useCollection$1(__scopeRovingFocusGroup);
  const isClickFocusRef = reactExports.useRef(false);
  const [focusableItemsCount, setFocusableItemsCount] =
    reactExports.useState(0);
  reactExports.useEffect(() => {
    const node = ref.current;
    if (node) {
      node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
      return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
    }
  }, [handleEntryFocus]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RovingFocusProvider, {
    scope: __scopeRovingFocusGroup,
    orientation,
    dir: direction,
    loop,
    currentTabStopId,
    onItemFocus: reactExports.useCallback(
      (tabStopId) => setCurrentTabStopId(tabStopId),
      [setCurrentTabStopId]
    ),
    onItemShiftTab: reactExports.useCallback(
      () => setIsTabbingBackOut(true),
      []
    ),
    onFocusableItemAdd: reactExports.useCallback(
      () => setFocusableItemsCount((prevCount) => prevCount + 1),
      []
    ),
    onFocusableItemRemove: reactExports.useCallback(
      () => setFocusableItemsCount((prevCount) => prevCount - 1),
      []
    ),
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
      tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
      "data-orientation": orientation,
      ...groupProps,
      ref: composedRefs,
      style: { outline: "none", ...props.style },
      onMouseDown: composeEventHandlers(props.onMouseDown, () => {
        isClickFocusRef.current = true;
      }),
      onFocus: composeEventHandlers(props.onFocus, (event) => {
        const isKeyboardFocus = !isClickFocusRef.current;
        if (
          event.target === event.currentTarget &&
          isKeyboardFocus &&
          !isTabbingBackOut
        ) {
          const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);
          event.currentTarget.dispatchEvent(entryFocusEvent);
          if (!entryFocusEvent.defaultPrevented) {
            const items = getItems().filter((item) => item.focusable);
            const activeItem = items.find((item) => item.active);
            const currentItem = items.find(
              (item) => item.id === currentTabStopId
            );
            const candidateItems = [activeItem, currentItem, ...items].filter(
              Boolean
            );
            const candidateNodes = candidateItems.map(
              (item) => item.ref.current
            );
            focusFirst$1(candidateNodes, preventScrollOnEntryFocus);
          }
        }
        isClickFocusRef.current = false;
      }),
      onBlur: composeEventHandlers(props.onBlur, () =>
        setIsTabbingBackOut(false)
      ),
    }),
  });
});
var ITEM_NAME$2 = "RovingFocusGroupItem";
var RovingFocusGroupItem = reactExports.forwardRef((props, forwardedRef) => {
  const {
    __scopeRovingFocusGroup,
    focusable = true,
    active = false,
    tabStopId,
    children,
    ...itemProps
  } = props;
  const autoId = useId();
  const id = tabStopId || autoId;
  const context = useRovingFocusContext(ITEM_NAME$2, __scopeRovingFocusGroup);
  const isCurrentTabStop = context.currentTabStopId === id;
  const getItems = useCollection$1(__scopeRovingFocusGroup);
  const { onFocusableItemAdd, onFocusableItemRemove, currentTabStopId } =
    context;
  reactExports.useEffect(() => {
    if (focusable) {
      onFocusableItemAdd();
      return () => onFocusableItemRemove();
    }
  }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Collection$1.ItemSlot, {
    scope: __scopeRovingFocusGroup,
    id,
    focusable,
    active,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.span, {
      tabIndex: isCurrentTabStop ? 0 : -1,
      "data-orientation": context.orientation,
      ...itemProps,
      ref: forwardedRef,
      onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
        if (!focusable) event.preventDefault();
        else context.onItemFocus(id);
      }),
      onFocus: composeEventHandlers(props.onFocus, () =>
        context.onItemFocus(id)
      ),
      onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
        if (event.key === "Tab" && event.shiftKey) {
          context.onItemShiftTab();
          return;
        }
        if (event.target !== event.currentTarget) return;
        const focusIntent = getFocusIntent(
          event,
          context.orientation,
          context.dir
        );
        if (focusIntent !== void 0) {
          if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey)
            return;
          event.preventDefault();
          const items = getItems().filter((item) => item.focusable);
          let candidateNodes = items.map((item) => item.ref.current);
          if (focusIntent === "last") candidateNodes.reverse();
          else if (focusIntent === "prev" || focusIntent === "next") {
            if (focusIntent === "prev") candidateNodes.reverse();
            const currentIndex = candidateNodes.indexOf(event.currentTarget);
            candidateNodes = context.loop
              ? wrapArray$1(candidateNodes, currentIndex + 1)
              : candidateNodes.slice(currentIndex + 1);
          }
          setTimeout(() => focusFirst$1(candidateNodes));
        }
      }),
      children:
        typeof children === "function"
          ? children({ isCurrentTabStop, hasTabStop: currentTabStopId != null })
          : children,
    }),
  });
});
RovingFocusGroupItem.displayName = ITEM_NAME$2;
var MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last",
};
function getDirectionAwareKey(key, dir) {
  if (dir !== "rtl") return key;
  return key === "ArrowLeft"
    ? "ArrowRight"
    : key === "ArrowRight"
    ? "ArrowLeft"
    : key;
}
function getFocusIntent(event, orientation, dir) {
  const key = getDirectionAwareKey(event.key, dir);
  if (orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key))
    return void 0;
  if (orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key))
    return void 0;
  return MAP_KEY_TO_FOCUS_INTENT[key];
}
function focusFirst$1(candidates, preventScroll = false) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
    candidate.focus({ preventScroll });
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
  }
}
function wrapArray$1(array, startIndex) {
  return array.map((_, index) => array[(startIndex + index) % array.length]);
}
var Root = RovingFocusGroup;
var Item = RovingFocusGroupItem;

var SELECTION_KEYS = ["Enter", " "];
var FIRST_KEYS = ["ArrowDown", "PageUp", "Home"];
var LAST_KEYS = ["ArrowUp", "PageDown", "End"];
var FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
var SUB_OPEN_KEYS = {
  ltr: [...SELECTION_KEYS, "ArrowRight"],
  rtl: [...SELECTION_KEYS, "ArrowLeft"],
};
var SUB_CLOSE_KEYS = {
  ltr: ["ArrowLeft"],
  rtl: ["ArrowRight"],
};
var MENU_NAME = "Menu";
var [Collection, useCollection, createCollectionScope] =
  createCollection(MENU_NAME);
var [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [
  createCollectionScope,
  createPopperScope,
  createRovingFocusGroupScope,
]);
var usePopperScope = createPopperScope();
var useRovingFocusGroupScope = createRovingFocusGroupScope();
var [MenuProvider, useMenuContext] = createMenuContext(MENU_NAME);
var [MenuRootProvider, useMenuRootContext] = createMenuContext(MENU_NAME);
var Menu = (props) => {
  const {
    __scopeMenu,
    open = false,
    children,
    dir,
    onOpenChange,
    modal = true,
  } = props;
  const popperScope = usePopperScope(__scopeMenu);
  const [content, setContent] = reactExports.useState(null);
  const isUsingKeyboardRef = reactExports.useRef(false);
  const handleOpenChange = useCallbackRef$1(onOpenChange);
  const direction = useDirection(dir);
  reactExports.useEffect(() => {
    const handleKeyDown = () => {
      isUsingKeyboardRef.current = true;
      document.addEventListener("pointerdown", handlePointer, {
        capture: true,
        once: true,
      });
      document.addEventListener("pointermove", handlePointer, {
        capture: true,
        once: true,
      });
    };
    const handlePointer = () => (isUsingKeyboardRef.current = false);
    document.addEventListener("keydown", handleKeyDown, { capture: true });
    return () => {
      document.removeEventListener("keydown", handleKeyDown, { capture: true });
      document.removeEventListener("pointerdown", handlePointer, {
        capture: true,
      });
      document.removeEventListener("pointermove", handlePointer, {
        capture: true,
      });
    };
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Root2$1, {
    ...popperScope,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuProvider, {
      scope: __scopeMenu,
      open,
      onOpenChange: handleOpenChange,
      content,
      onContentChange: setContent,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuRootProvider, {
        scope: __scopeMenu,
        onClose: reactExports.useCallback(
          () => handleOpenChange(false),
          [handleOpenChange]
        ),
        isUsingKeyboardRef,
        dir: direction,
        modal,
        children,
      }),
    }),
  });
};
Menu.displayName = MENU_NAME;
var ANCHOR_NAME = "MenuAnchor";
var MenuAnchor = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeMenu, ...anchorProps } = props;
  const popperScope = usePopperScope(__scopeMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Anchor, {
    ...popperScope,
    ...anchorProps,
    ref: forwardedRef,
  });
});
MenuAnchor.displayName = ANCHOR_NAME;
var PORTAL_NAME$1 = "MenuPortal";
var [PortalProvider, usePortalContext] = createMenuContext(PORTAL_NAME$1, {
  forceMount: void 0,
});
var MenuPortal = (props) => {
  const { __scopeMenu, forceMount, children, container } = props;
  const context = useMenuContext(PORTAL_NAME$1, __scopeMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(PortalProvider, {
    scope: __scopeMenu,
    forceMount,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, {
      present: forceMount || context.open,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$2, {
        asChild: true,
        container,
        children,
      }),
    }),
  });
};
MenuPortal.displayName = PORTAL_NAME$1;
var CONTENT_NAME$1 = "MenuContent";
var [MenuContentProvider, useMenuContentContext] =
  createMenuContext(CONTENT_NAME$1);
var MenuContent = reactExports.forwardRef((props, forwardedRef) => {
  const portalContext = usePortalContext(CONTENT_NAME$1, props.__scopeMenu);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = useMenuContext(CONTENT_NAME$1, props.__scopeMenu);
  const rootContext = useMenuRootContext(CONTENT_NAME$1, props.__scopeMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.Provider, {
    scope: props.__scopeMenu,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, {
      present: forceMount || context.open,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.Slot, {
        scope: props.__scopeMenu,
        children: rootContext.modal
          ? /* @__PURE__ */ jsxRuntimeExports.jsx(MenuRootContentModal, {
              ...contentProps,
              ref: forwardedRef,
            })
          : /* @__PURE__ */ jsxRuntimeExports.jsx(MenuRootContentNonModal, {
              ...contentProps,
              ref: forwardedRef,
            }),
      }),
    }),
  });
});
var MenuRootContentModal = reactExports.forwardRef((props, forwardedRef) => {
  const context = useMenuContext(CONTENT_NAME$1, props.__scopeMenu);
  const ref = reactExports.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  reactExports.useEffect(() => {
    const content = ref.current;
    if (content) return hideOthers(content);
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuContentImpl, {
    ...props,
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: context.open,
    disableOutsideScroll: true,
    onFocusOutside: composeEventHandlers(
      props.onFocusOutside,
      (event) => event.preventDefault(),
      { checkForDefaultPrevented: false }
    ),
    onDismiss: () => context.onOpenChange(false),
  });
});
var MenuRootContentNonModal = reactExports.forwardRef((props, forwardedRef) => {
  const context = useMenuContext(CONTENT_NAME$1, props.__scopeMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuContentImpl, {
    ...props,
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    disableOutsideScroll: false,
    onDismiss: () => context.onOpenChange(false),
  });
});
var Slot = createSlot("MenuContent.ScrollLock");
var MenuContentImpl = reactExports.forwardRef((props, forwardedRef) => {
  const {
    __scopeMenu,
    loop = false,
    trapFocus,
    onOpenAutoFocus,
    onCloseAutoFocus,
    disableOutsidePointerEvents,
    onEntryFocus,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    onDismiss,
    disableOutsideScroll,
    ...contentProps
  } = props;
  const context = useMenuContext(CONTENT_NAME$1, __scopeMenu);
  const rootContext = useMenuRootContext(CONTENT_NAME$1, __scopeMenu);
  const popperScope = usePopperScope(__scopeMenu);
  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);
  const getItems = useCollection(__scopeMenu);
  const [currentItemId, setCurrentItemId] = reactExports.useState(null);
  const contentRef = reactExports.useRef(null);
  const composedRefs = useComposedRefs(
    forwardedRef,
    contentRef,
    context.onContentChange
  );
  const timerRef = reactExports.useRef(0);
  const searchRef = reactExports.useRef("");
  const pointerGraceTimerRef = reactExports.useRef(0);
  const pointerGraceIntentRef = reactExports.useRef(null);
  const pointerDirRef = reactExports.useRef("right");
  const lastPointerXRef = reactExports.useRef(0);
  const ScrollLockWrapper = disableOutsideScroll
    ? ReactRemoveScroll
    : reactExports.Fragment;
  const scrollLockWrapperProps = disableOutsideScroll
    ? { as: Slot, allowPinchZoom: true }
    : void 0;
  const handleTypeaheadSearch = (key) => {
    const search = searchRef.current + key;
    const items = getItems().filter((item) => !item.disabled);
    const currentItem = document.activeElement;
    const currentMatch = items.find(
      (item) => item.ref.current === currentItem
    )?.textValue;
    const values = items.map((item) => item.textValue);
    const nextMatch = getNextMatch(values, search, currentMatch);
    const newItem = items.find((item) => item.textValue === nextMatch)?.ref
      .current;
    (function updateSearch(value) {
      searchRef.current = value;
      window.clearTimeout(timerRef.current);
      if (value !== "")
        timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
    })(search);
    if (newItem) {
      setTimeout(() => newItem.focus());
    }
  };
  reactExports.useEffect(() => {
    return () => window.clearTimeout(timerRef.current);
  }, []);
  useFocusGuards();
  const isPointerMovingToSubmenu = reactExports.useCallback((event) => {
    const isMovingTowards =
      pointerDirRef.current === pointerGraceIntentRef.current?.side;
    return (
      isMovingTowards &&
      isPointerInGraceArea(event, pointerGraceIntentRef.current?.area)
    );
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuContentProvider, {
    scope: __scopeMenu,
    searchRef,
    onItemEnter: reactExports.useCallback(
      (event) => {
        if (isPointerMovingToSubmenu(event)) event.preventDefault();
      },
      [isPointerMovingToSubmenu]
    ),
    onItemLeave: reactExports.useCallback(
      (event) => {
        if (isPointerMovingToSubmenu(event)) return;
        contentRef.current?.focus();
        setCurrentItemId(null);
      },
      [isPointerMovingToSubmenu]
    ),
    onTriggerLeave: reactExports.useCallback(
      (event) => {
        if (isPointerMovingToSubmenu(event)) event.preventDefault();
      },
      [isPointerMovingToSubmenu]
    ),
    pointerGraceTimerRef,
    onPointerGraceIntentChange: reactExports.useCallback((intent) => {
      pointerGraceIntentRef.current = intent;
    }, []),
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollLockWrapper, {
      ...scrollLockWrapperProps,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(FocusScope, {
        asChild: true,
        trapped: trapFocus,
        onMountAutoFocus: composeEventHandlers(onOpenAutoFocus, (event) => {
          event.preventDefault();
          contentRef.current?.focus({ preventScroll: true });
        }),
        onUnmountAutoFocus: onCloseAutoFocus,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(DismissableLayer, {
          asChild: true,
          disableOutsidePointerEvents,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside,
          onInteractOutside,
          onDismiss,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root, {
            asChild: true,
            ...rovingFocusGroupScope,
            dir: rootContext.dir,
            orientation: "vertical",
            loop,
            currentTabStopId: currentItemId,
            onCurrentTabStopIdChange: setCurrentItemId,
            onEntryFocus: composeEventHandlers(onEntryFocus, (event) => {
              if (!rootContext.isUsingKeyboardRef.current)
                event.preventDefault();
            }),
            preventScrollOnEntryFocus: true,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Content, {
              role: "menu",
              "aria-orientation": "vertical",
              "data-state": getOpenState(context.open),
              "data-radix-menu-content": "",
              dir: rootContext.dir,
              ...popperScope,
              ...contentProps,
              ref: composedRefs,
              style: { outline: "none", ...contentProps.style },
              onKeyDown: composeEventHandlers(
                contentProps.onKeyDown,
                (event) => {
                  const target = event.target;
                  const isKeyDownInside =
                    target.closest("[data-radix-menu-content]") ===
                    event.currentTarget;
                  const isModifierKey =
                    event.ctrlKey || event.altKey || event.metaKey;
                  const isCharacterKey = event.key.length === 1;
                  if (isKeyDownInside) {
                    if (event.key === "Tab") event.preventDefault();
                    if (!isModifierKey && isCharacterKey)
                      handleTypeaheadSearch(event.key);
                  }
                  const content = contentRef.current;
                  if (event.target !== content) return;
                  if (!FIRST_LAST_KEYS.includes(event.key)) return;
                  event.preventDefault();
                  const items = getItems().filter((item) => !item.disabled);
                  const candidateNodes = items.map((item) => item.ref.current);
                  if (LAST_KEYS.includes(event.key)) candidateNodes.reverse();
                  focusFirst(candidateNodes);
                }
              ),
              onBlur: composeEventHandlers(props.onBlur, (event) => {
                if (!event.currentTarget.contains(event.target)) {
                  window.clearTimeout(timerRef.current);
                  searchRef.current = "";
                }
              }),
              onPointerMove: composeEventHandlers(
                props.onPointerMove,
                whenMouse((event) => {
                  const target = event.target;
                  const pointerXHasChanged =
                    lastPointerXRef.current !== event.clientX;
                  if (
                    event.currentTarget.contains(target) &&
                    pointerXHasChanged
                  ) {
                    const newDir =
                      event.clientX > lastPointerXRef.current
                        ? "right"
                        : "left";
                    pointerDirRef.current = newDir;
                    lastPointerXRef.current = event.clientX;
                  }
                })
              ),
            }),
          }),
        }),
      }),
    }),
  });
});
MenuContent.displayName = CONTENT_NAME$1;
var GROUP_NAME$1 = "MenuGroup";
var MenuGroup = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeMenu, ...groupProps } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
    role: "group",
    ...groupProps,
    ref: forwardedRef,
  });
});
MenuGroup.displayName = GROUP_NAME$1;
var LABEL_NAME$1 = "MenuLabel";
var MenuLabel = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeMenu, ...labelProps } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
    ...labelProps,
    ref: forwardedRef,
  });
});
MenuLabel.displayName = LABEL_NAME$1;
var ITEM_NAME$1 = "MenuItem";
var ITEM_SELECT = "menu.itemSelect";
var MenuItem = reactExports.forwardRef((props, forwardedRef) => {
  const { disabled = false, onSelect, ...itemProps } = props;
  const ref = reactExports.useRef(null);
  const rootContext = useMenuRootContext(ITEM_NAME$1, props.__scopeMenu);
  const contentContext = useMenuContentContext(ITEM_NAME$1, props.__scopeMenu);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const isPointerDownRef = reactExports.useRef(false);
  const handleSelect = () => {
    const menuItem = ref.current;
    if (!disabled && menuItem) {
      const itemSelectEvent = new CustomEvent(ITEM_SELECT, {
        bubbles: true,
        cancelable: true,
      });
      menuItem.addEventListener(ITEM_SELECT, (event) => onSelect?.(event), {
        once: true,
      });
      dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);
      if (itemSelectEvent.defaultPrevented) {
        isPointerDownRef.current = false;
      } else {
        rootContext.onClose();
      }
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItemImpl, {
    ...itemProps,
    ref: composedRefs,
    disabled,
    onClick: composeEventHandlers(props.onClick, handleSelect),
    onPointerDown: (event) => {
      props.onPointerDown?.(event);
      isPointerDownRef.current = true;
    },
    onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
      if (!isPointerDownRef.current) event.currentTarget?.click();
    }),
    onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
      const isTypingAhead = contentContext.searchRef.current !== "";
      if (disabled || (isTypingAhead && event.key === " ")) return;
      if (SELECTION_KEYS.includes(event.key)) {
        event.currentTarget.click();
        event.preventDefault();
      }
    }),
  });
});
MenuItem.displayName = ITEM_NAME$1;
var MenuItemImpl = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;
  const contentContext = useMenuContentContext(ITEM_NAME$1, __scopeMenu);
  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);
  const ref = reactExports.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const [isFocused, setIsFocused] = reactExports.useState(false);
  const [textContent, setTextContent] = reactExports.useState("");
  reactExports.useEffect(() => {
    const menuItem = ref.current;
    if (menuItem) {
      setTextContent((menuItem.textContent ?? "").trim());
    }
  }, [itemProps.children]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.ItemSlot, {
    scope: __scopeMenu,
    disabled,
    textValue: textValue ?? textContent,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Item, {
      asChild: true,
      ...rovingFocusGroupScope,
      focusable: !disabled,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
        role: "menuitem",
        "data-highlighted": isFocused ? "" : void 0,
        "aria-disabled": disabled || void 0,
        "data-disabled": disabled ? "" : void 0,
        ...itemProps,
        ref: composedRefs,
        onPointerMove: composeEventHandlers(
          props.onPointerMove,
          whenMouse((event) => {
            if (disabled) {
              contentContext.onItemLeave(event);
            } else {
              contentContext.onItemEnter(event);
              if (!event.defaultPrevented) {
                const item = event.currentTarget;
                item.focus({ preventScroll: true });
              }
            }
          })
        ),
        onPointerLeave: composeEventHandlers(
          props.onPointerLeave,
          whenMouse((event) => contentContext.onItemLeave(event))
        ),
        onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),
        onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false)),
      }),
    }),
  });
});
var CHECKBOX_ITEM_NAME$1 = "MenuCheckboxItem";
var MenuCheckboxItem = reactExports.forwardRef((props, forwardedRef) => {
  const { checked = false, onCheckedChange, ...checkboxItemProps } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ItemIndicatorProvider, {
    scope: props.__scopeMenu,
    checked,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, {
      role: "menuitemcheckbox",
      "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
      ...checkboxItemProps,
      ref: forwardedRef,
      "data-state": getCheckedState(checked),
      onSelect: composeEventHandlers(
        checkboxItemProps.onSelect,
        () => onCheckedChange?.(isIndeterminate(checked) ? true : !checked),
        { checkForDefaultPrevented: false }
      ),
    }),
  });
});
MenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME$1;
var RADIO_GROUP_NAME$1 = "MenuRadioGroup";
var [RadioGroupProvider, useRadioGroupContext] = createMenuContext(
  RADIO_GROUP_NAME$1,
  { value: void 0, onValueChange: () => {} }
);
var MenuRadioGroup = reactExports.forwardRef((props, forwardedRef) => {
  const { value, onValueChange, ...groupProps } = props;
  const handleValueChange = useCallbackRef$1(onValueChange);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RadioGroupProvider, {
    scope: props.__scopeMenu,
    value,
    onValueChange: handleValueChange,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuGroup, {
      ...groupProps,
      ref: forwardedRef,
    }),
  });
});
MenuRadioGroup.displayName = RADIO_GROUP_NAME$1;
var RADIO_ITEM_NAME$1 = "MenuRadioItem";
var MenuRadioItem = reactExports.forwardRef((props, forwardedRef) => {
  const { value, ...radioItemProps } = props;
  const context = useRadioGroupContext(RADIO_ITEM_NAME$1, props.__scopeMenu);
  const checked = value === context.value;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ItemIndicatorProvider, {
    scope: props.__scopeMenu,
    checked,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, {
      role: "menuitemradio",
      "aria-checked": checked,
      ...radioItemProps,
      ref: forwardedRef,
      "data-state": getCheckedState(checked),
      onSelect: composeEventHandlers(
        radioItemProps.onSelect,
        () => context.onValueChange?.(value),
        { checkForDefaultPrevented: false }
      ),
    }),
  });
});
MenuRadioItem.displayName = RADIO_ITEM_NAME$1;
var ITEM_INDICATOR_NAME = "MenuItemIndicator";
var [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext(
  ITEM_INDICATOR_NAME,
  { checked: false }
);
var MenuItemIndicator = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeMenu, forceMount, ...itemIndicatorProps } = props;
  const indicatorContext = useItemIndicatorContext(
    ITEM_INDICATOR_NAME,
    __scopeMenu
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, {
    present:
      forceMount ||
      isIndeterminate(indicatorContext.checked) ||
      indicatorContext.checked === true,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.span, {
      ...itemIndicatorProps,
      ref: forwardedRef,
      "data-state": getCheckedState(indicatorContext.checked),
    }),
  });
});
MenuItemIndicator.displayName = ITEM_INDICATOR_NAME;
var SEPARATOR_NAME$1 = "MenuSeparator";
var MenuSeparator = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeMenu, ...separatorProps } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, {
    role: "separator",
    "aria-orientation": "horizontal",
    ...separatorProps,
    ref: forwardedRef,
  });
});
MenuSeparator.displayName = SEPARATOR_NAME$1;
var ARROW_NAME$1 = "MenuArrow";
var MenuArrow = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeMenu, ...arrowProps } = props;
  const popperScope = usePopperScope(__scopeMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Arrow, {
    ...popperScope,
    ...arrowProps,
    ref: forwardedRef,
  });
});
MenuArrow.displayName = ARROW_NAME$1;
var SUB_NAME = "MenuSub";
var [MenuSubProvider, useMenuSubContext] = createMenuContext(SUB_NAME);
var SUB_TRIGGER_NAME$1 = "MenuSubTrigger";
var MenuSubTrigger = reactExports.forwardRef((props, forwardedRef) => {
  const context = useMenuContext(SUB_TRIGGER_NAME$1, props.__scopeMenu);
  const rootContext = useMenuRootContext(SUB_TRIGGER_NAME$1, props.__scopeMenu);
  const subContext = useMenuSubContext(SUB_TRIGGER_NAME$1, props.__scopeMenu);
  const contentContext = useMenuContentContext(
    SUB_TRIGGER_NAME$1,
    props.__scopeMenu
  );
  const openTimerRef = reactExports.useRef(null);
  const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
  const scope = { __scopeMenu: props.__scopeMenu };
  const clearOpenTimer = reactExports.useCallback(() => {
    if (openTimerRef.current) window.clearTimeout(openTimerRef.current);
    openTimerRef.current = null;
  }, []);
  reactExports.useEffect(() => clearOpenTimer, [clearOpenTimer]);
  reactExports.useEffect(() => {
    const pointerGraceTimer = pointerGraceTimerRef.current;
    return () => {
      window.clearTimeout(pointerGraceTimer);
      onPointerGraceIntentChange(null);
    };
  }, [pointerGraceTimerRef, onPointerGraceIntentChange]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuAnchor, {
    asChild: true,
    ...scope,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItemImpl, {
      id: subContext.triggerId,
      "aria-haspopup": "menu",
      "aria-expanded": context.open,
      "aria-controls": subContext.contentId,
      "data-state": getOpenState(context.open),
      ...props,
      ref: composeRefs(forwardedRef, subContext.onTriggerChange),
      onClick: (event) => {
        props.onClick?.(event);
        if (props.disabled || event.defaultPrevented) return;
        event.currentTarget.focus();
        if (!context.open) context.onOpenChange(true);
      },
      onPointerMove: composeEventHandlers(
        props.onPointerMove,
        whenMouse((event) => {
          contentContext.onItemEnter(event);
          if (event.defaultPrevented) return;
          if (!props.disabled && !context.open && !openTimerRef.current) {
            contentContext.onPointerGraceIntentChange(null);
            openTimerRef.current = window.setTimeout(() => {
              context.onOpenChange(true);
              clearOpenTimer();
            }, 100);
          }
        })
      ),
      onPointerLeave: composeEventHandlers(
        props.onPointerLeave,
        whenMouse((event) => {
          clearOpenTimer();
          const contentRect = context.content?.getBoundingClientRect();
          if (contentRect) {
            const side = context.content?.dataset.side;
            const rightSide = side === "right";
            const bleed = rightSide ? -5 : 5;
            const contentNearEdge = contentRect[rightSide ? "left" : "right"];
            const contentFarEdge = contentRect[rightSide ? "right" : "left"];
            contentContext.onPointerGraceIntentChange({
              area: [
                // Apply a bleed on clientX to ensure that our exit point is
                // consistently within polygon bounds
                { x: event.clientX + bleed, y: event.clientY },
                { x: contentNearEdge, y: contentRect.top },
                { x: contentFarEdge, y: contentRect.top },
                { x: contentFarEdge, y: contentRect.bottom },
                { x: contentNearEdge, y: contentRect.bottom },
              ],
              side,
            });
            window.clearTimeout(pointerGraceTimerRef.current);
            pointerGraceTimerRef.current = window.setTimeout(
              () => contentContext.onPointerGraceIntentChange(null),
              300
            );
          } else {
            contentContext.onTriggerLeave(event);
            if (event.defaultPrevented) return;
            contentContext.onPointerGraceIntentChange(null);
          }
        })
      ),
      onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
        const isTypingAhead = contentContext.searchRef.current !== "";
        if (props.disabled || (isTypingAhead && event.key === " ")) return;
        if (SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
          context.onOpenChange(true);
          context.content?.focus();
          event.preventDefault();
        }
      }),
    }),
  });
});
MenuSubTrigger.displayName = SUB_TRIGGER_NAME$1;
var SUB_CONTENT_NAME$1 = "MenuSubContent";
var MenuSubContent = reactExports.forwardRef((props, forwardedRef) => {
  const portalContext = usePortalContext(CONTENT_NAME$1, props.__scopeMenu);
  const { forceMount = portalContext.forceMount, ...subContentProps } = props;
  const context = useMenuContext(CONTENT_NAME$1, props.__scopeMenu);
  const rootContext = useMenuRootContext(CONTENT_NAME$1, props.__scopeMenu);
  const subContext = useMenuSubContext(SUB_CONTENT_NAME$1, props.__scopeMenu);
  const ref = reactExports.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.Provider, {
    scope: props.__scopeMenu,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, {
      present: forceMount || context.open,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.Slot, {
        scope: props.__scopeMenu,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuContentImpl, {
          id: subContext.contentId,
          "aria-labelledby": subContext.triggerId,
          ...subContentProps,
          ref: composedRefs,
          align: "start",
          side: rootContext.dir === "rtl" ? "left" : "right",
          disableOutsidePointerEvents: false,
          disableOutsideScroll: false,
          trapFocus: false,
          onOpenAutoFocus: (event) => {
            if (rootContext.isUsingKeyboardRef.current) ref.current?.focus();
            event.preventDefault();
          },
          onCloseAutoFocus: (event) => event.preventDefault(),
          onFocusOutside: composeEventHandlers(
            props.onFocusOutside,
            (event) => {
              if (event.target !== subContext.trigger)
                context.onOpenChange(false);
            }
          ),
          onEscapeKeyDown: composeEventHandlers(
            props.onEscapeKeyDown,
            (event) => {
              rootContext.onClose();
              event.preventDefault();
            }
          ),
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            const isKeyDownInside = event.currentTarget.contains(event.target);
            const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(
              event.key
            );
            if (isKeyDownInside && isCloseKey) {
              context.onOpenChange(false);
              subContext.trigger?.focus();
              event.preventDefault();
            }
          }),
        }),
      }),
    }),
  });
});
MenuSubContent.displayName = SUB_CONTENT_NAME$1;
function getOpenState(open) {
  return open ? "open" : "closed";
}
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getCheckedState(checked) {
  return isIndeterminate(checked)
    ? "indeterminate"
    : checked
    ? "checked"
    : "unchecked";
}
function focusFirst(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
    candidate.focus();
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
  }
}
function wrapArray(array, startIndex) {
  return array.map((_, index) => array[(startIndex + index) % array.length]);
}
function getNextMatch(values, search, currentMatch) {
  const isRepeated =
    search.length > 1 && Array.from(search).every((char) => char === search[0]);
  const normalizedSearch = isRepeated ? search[0] : search;
  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
  let wrappedValues = wrapArray(values, Math.max(currentMatchIndex, 0));
  const excludeCurrentMatch = normalizedSearch.length === 1;
  if (excludeCurrentMatch)
    wrappedValues = wrappedValues.filter((v) => v !== currentMatch);
  const nextMatch = wrappedValues.find((value) =>
    value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
  );
  return nextMatch !== currentMatch ? nextMatch : void 0;
}
function isPointInPolygon(point, polygon) {
  const { x, y } = point;
  let inside = false;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    const ii = polygon[i];
    const jj = polygon[j];
    const xi = ii.x;
    const yi = ii.y;
    const xj = jj.x;
    const yj = jj.y;
    const intersect =
      yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }
  return inside;
}
function isPointerInGraceArea(event, area) {
  if (!area) return false;
  const cursorPos = { x: event.clientX, y: event.clientY };
  return isPointInPolygon(cursorPos, area);
}
function whenMouse(handler) {
  return (event) => (event.pointerType === "mouse" ? handler(event) : void 0);
}
var Root3 = Menu;
var Anchor2 = MenuAnchor;
var Portal = MenuPortal;
var Content2$1 = MenuContent;
var Group = MenuGroup;
var Label = MenuLabel;
var Item2$1 = MenuItem;
var CheckboxItem = MenuCheckboxItem;
var RadioGroup = MenuRadioGroup;
var RadioItem = MenuRadioItem;
var ItemIndicator = MenuItemIndicator;
var Separator = MenuSeparator;
var Arrow2 = MenuArrow;
var SubTrigger = MenuSubTrigger;
var SubContent = MenuSubContent;

var DROPDOWN_MENU_NAME = "DropdownMenu";
var [createDropdownMenuContext] = createContextScope(DROPDOWN_MENU_NAME, [
  createMenuScope,
]);
var useMenuScope = createMenuScope();
var [DropdownMenuProvider, useDropdownMenuContext] =
  createDropdownMenuContext(DROPDOWN_MENU_NAME);
var DropdownMenu$1 = (props) => {
  const {
    __scopeDropdownMenu,
    children,
    dir,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = true,
  } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  const triggerRef = reactExports.useRef(null);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: DROPDOWN_MENU_NAME,
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(DropdownMenuProvider, {
    scope: __scopeDropdownMenu,
    triggerId: useId(),
    triggerRef,
    contentId: useId(),
    open,
    onOpenChange: setOpen,
    onOpenToggle: reactExports.useCallback(
      () => setOpen((prevOpen) => !prevOpen),
      [setOpen]
    ),
    modal,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root3, {
      ...menuScope,
      open,
      onOpenChange: setOpen,
      dir,
      modal,
      children,
    }),
  });
};
DropdownMenu$1.displayName = DROPDOWN_MENU_NAME;
var TRIGGER_NAME = "DropdownMenuTrigger";
var DropdownMenuTrigger$1 = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;
  const context = useDropdownMenuContext(TRIGGER_NAME, __scopeDropdownMenu);
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Anchor2, {
    asChild: true,
    ...menuScope,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.button, {
      type: "button",
      id: context.triggerId,
      "aria-haspopup": "menu",
      "aria-expanded": context.open,
      "aria-controls": context.open ? context.contentId : void 0,
      "data-state": context.open ? "open" : "closed",
      "data-disabled": disabled ? "" : void 0,
      disabled,
      ...triggerProps,
      ref: composeRefs(forwardedRef, context.triggerRef),
      onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
        if (!disabled && event.button === 0 && event.ctrlKey === false) {
          context.onOpenToggle();
          if (!context.open) event.preventDefault();
        }
      }),
      onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
        if (disabled) return;
        if (["Enter", " "].includes(event.key)) context.onOpenToggle();
        if (event.key === "ArrowDown") context.onOpenChange(true);
        if (["Enter", " ", "ArrowDown"].includes(event.key))
          event.preventDefault();
      }),
    }),
  });
});
DropdownMenuTrigger$1.displayName = TRIGGER_NAME;
var PORTAL_NAME = "DropdownMenuPortal";
var DropdownMenuPortal = (props) => {
  const { __scopeDropdownMenu, ...portalProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, {
    ...menuScope,
    ...portalProps,
  });
};
DropdownMenuPortal.displayName = PORTAL_NAME;
var CONTENT_NAME = "DropdownMenuContent";
var DropdownMenuContent$1 = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...contentProps } = props;
  const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);
  const menuScope = useMenuScope(__scopeDropdownMenu);
  const hasInteractedOutsideRef = reactExports.useRef(false);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Content2$1, {
    id: context.contentId,
    "aria-labelledby": context.triggerId,
    ...menuScope,
    ...contentProps,
    ref: forwardedRef,
    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
      if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
      hasInteractedOutsideRef.current = false;
      event.preventDefault();
    }),
    onInteractOutside: composeEventHandlers(
      props.onInteractOutside,
      (event) => {
        const originalEvent = event.detail.originalEvent;
        const ctrlLeftClick =
          originalEvent.button === 0 && originalEvent.ctrlKey === true;
        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
        if (!context.modal || isRightClick)
          hasInteractedOutsideRef.current = true;
      }
    ),
    style: {
      ...props.style,
      // re-namespace exposed content custom properties
      ...{
        "--radix-dropdown-menu-content-transform-origin":
          "var(--radix-popper-transform-origin)",
        "--radix-dropdown-menu-content-available-width":
          "var(--radix-popper-available-width)",
        "--radix-dropdown-menu-content-available-height":
          "var(--radix-popper-available-height)",
        "--radix-dropdown-menu-trigger-width":
          "var(--radix-popper-anchor-width)",
        "--radix-dropdown-menu-trigger-height":
          "var(--radix-popper-anchor-height)",
      },
    },
  });
});
DropdownMenuContent$1.displayName = CONTENT_NAME;
var GROUP_NAME = "DropdownMenuGroup";
var DropdownMenuGroup = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...groupProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Group, {
    ...menuScope,
    ...groupProps,
    ref: forwardedRef,
  });
});
DropdownMenuGroup.displayName = GROUP_NAME;
var LABEL_NAME = "DropdownMenuLabel";
var DropdownMenuLabel = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...labelProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Label, {
    ...menuScope,
    ...labelProps,
    ref: forwardedRef,
  });
});
DropdownMenuLabel.displayName = LABEL_NAME;
var ITEM_NAME = "DropdownMenuItem";
var DropdownMenuItem$1 = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...itemProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Item2$1, {
    ...menuScope,
    ...itemProps,
    ref: forwardedRef,
  });
});
DropdownMenuItem$1.displayName = ITEM_NAME;
var CHECKBOX_ITEM_NAME = "DropdownMenuCheckboxItem";
var DropdownMenuCheckboxItem = reactExports.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...checkboxItemProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxItem, {
      ...menuScope,
      ...checkboxItemProps,
      ref: forwardedRef,
    });
  }
);
DropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;
var RADIO_GROUP_NAME = "DropdownMenuRadioGroup";
var DropdownMenuRadioGroup = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...radioGroupProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RadioGroup, {
    ...menuScope,
    ...radioGroupProps,
    ref: forwardedRef,
  });
});
DropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;
var RADIO_ITEM_NAME = "DropdownMenuRadioItem";
var DropdownMenuRadioItem = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...radioItemProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RadioItem, {
    ...menuScope,
    ...radioItemProps,
    ref: forwardedRef,
  });
});
DropdownMenuRadioItem.displayName = RADIO_ITEM_NAME;
var INDICATOR_NAME = "DropdownMenuItemIndicator";
var DropdownMenuItemIndicator = reactExports.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...itemIndicatorProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ItemIndicator, {
      ...menuScope,
      ...itemIndicatorProps,
      ref: forwardedRef,
    });
  }
);
DropdownMenuItemIndicator.displayName = INDICATOR_NAME;
var SEPARATOR_NAME = "DropdownMenuSeparator";
var DropdownMenuSeparator = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...separatorProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Separator, {
    ...menuScope,
    ...separatorProps,
    ref: forwardedRef,
  });
});
DropdownMenuSeparator.displayName = SEPARATOR_NAME;
var ARROW_NAME = "DropdownMenuArrow";
var DropdownMenuArrow = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...arrowProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Arrow2, {
    ...menuScope,
    ...arrowProps,
    ref: forwardedRef,
  });
});
DropdownMenuArrow.displayName = ARROW_NAME;
var SUB_TRIGGER_NAME = "DropdownMenuSubTrigger";
var DropdownMenuSubTrigger = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subTriggerProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(SubTrigger, {
    ...menuScope,
    ...subTriggerProps,
    ref: forwardedRef,
  });
});
DropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME;
var SUB_CONTENT_NAME = "DropdownMenuSubContent";
var DropdownMenuSubContent = reactExports.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subContentProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(SubContent, {
    ...menuScope,
    ...subContentProps,
    ref: forwardedRef,
    style: {
      ...props.style,
      // re-namespace exposed content custom properties
      ...{
        "--radix-dropdown-menu-content-transform-origin":
          "var(--radix-popper-transform-origin)",
        "--radix-dropdown-menu-content-available-width":
          "var(--radix-popper-available-width)",
        "--radix-dropdown-menu-content-available-height":
          "var(--radix-popper-available-height)",
        "--radix-dropdown-menu-trigger-width":
          "var(--radix-popper-anchor-width)",
        "--radix-dropdown-menu-trigger-height":
          "var(--radix-popper-anchor-height)",
      },
    },
  });
});
DropdownMenuSubContent.displayName = SUB_CONTENT_NAME;
var Root2 = DropdownMenu$1;
var Trigger = DropdownMenuTrigger$1;
var Portal2 = DropdownMenuPortal;
var Content2 = DropdownMenuContent$1;
var Item2 = DropdownMenuItem$1;

function DropdownMenu({ ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Root2, {
    "data-slot": "dropdown-menu",
    ...props,
  });
}
function DropdownMenuTrigger({ ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Trigger, {
    "data-slot": "dropdown-menu-trigger",
    ...props,
  });
}
function DropdownMenuContent({ className, sideOffset = 4, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal2, {
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Content2, {
      "data-slot": "dropdown-menu-content",
      sideOffset,
      className: cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
        className
      ),
      ...props,
    }),
  });
}
function DropdownMenuItem({ className, inset, variant = "default", ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Item2, {
    "data-slot": "dropdown-menu-item",
    "data-inset": inset,
    "data-variant": variant,
    className: cn(
      "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
      className
    ),
    ...props,
  });
}

function Sheet({ ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Root$2, {
    "data-slot": "sheet",
    ...props,
  });
}
function SheetTrigger({ ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Trigger$1, {
    "data-slot": "sheet-trigger",
    ...props,
  });
}
function SheetPortal({ ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$1, {
    "data-slot": "sheet-portal",
    ...props,
  });
}
const SheetOverlay = reactExports.forwardRef(({ className, ...props }, ref) =>
  /* @__PURE__ */ jsxRuntimeExports.jsx(Overlay, {
    "data-slot": "sheet-overlay",
    className: cn(
      "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
      className
    ),
    ...props,
    ref,
  })
);
SheetOverlay.displayName = Overlay.displayName;
function SheetContent({ className, children, side = "right", ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(SheetPortal, {
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(SheetOverlay, {}),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Content$1, {
        "data-slot": "sheet-content",
        className: cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        ),
        ...props,
        children: [
          children,
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Close, {
            className:
              "ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(X, { className: "size-4" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                className: "sr-only",
                children: "Close",
              }),
            ],
          }),
        ],
      }),
    ],
  });
}
function SheetHeader({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
    "data-slot": "sheet-header",
    className: cn("flex flex-col gap-1.5 p-4", className),
    ...props,
  });
}
function SheetTitle({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Title, {
    "data-slot": "sheet-title",
    className: cn("text-foreground font-semibold", className),
    ...props,
  });
}
function SheetDescription({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Description, {
    "data-slot": "sheet-description",
    className: cn("text-muted-foreground text-sm", className),
    ...props,
  });
}

function Skeleton({ className, ...props }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
    "data-slot": "skeleton",
    className: cn("bg-accent animate-pulse rounded-md", className),
    ...props,
  });
}

var M = (e, i, s, u, m, a, l, h) => {
  let d = document.documentElement,
    w = ["light", "dark"];
  function p(n) {
    (Array.isArray(e) ? e : [e]).forEach((y) => {
      let k = y === "class",
        S = k && a ? m.map((f) => a[f] || f) : m;
      k
        ? (d.classList.remove(...S), d.classList.add(a && a[n] ? a[n] : n))
        : d.setAttribute(y, n);
    }),
      R(n);
  }
  function R(n) {
    h && w.includes(n) && (d.style.colorScheme = n);
  }
  function c() {
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }
  if (u) p(u);
  else
    try {
      let n = localStorage.getItem(i) || s,
        y = l && n === "system" ? c() : n;
      p(y);
    } catch (n) {}
};
var x = reactExports.createContext(void 0),
  U = { setTheme: (e) => {}, themes: [] },
  z = () => {
    var e;
    return (e = reactExports.useContext(x)) != null ? e : U;
  };
reactExports.memo(
  ({
    forcedTheme: e,
    storageKey: i,
    attribute: s,
    enableSystem: u,
    enableColorScheme: m,
    defaultTheme: a,
    value: l,
    themes: h,
    nonce: d,
    scriptProps: w,
  }) => {
    let p = JSON.stringify([s, i, a, e, h, l, u, m]).slice(1, -1);
    return reactExports.createElement("script", {
      ...w,
      suppressHydrationWarning: true,
      nonce: typeof window == "undefined" ? d : "",
      dangerouslySetInnerHTML: { __html: `(${M.toString()})(${p})` },
    });
  }
);

const Toaster = ({ ...props }) => {
  const { theme = "system" } = z();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Toaster$1, {
    theme,
    className: "toaster group",
    style: {
      "--normal-bg": "var(--popover)",
      "--normal-text": "var(--popover-foreground)",
      "--normal-border": "var(--border)",
    },
    ...props,
  });
};

const nodeCrypto = {};

/*
 Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>
 Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>
 Copyright (c) 2025 Daniel Wirtz <dcode@dcode.io>

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * The random implementation to use as a fallback.
 * @type {?function(number):!Array.<number>}
 * @inner
 */
var randomFallback = null;

/**
 * Generates cryptographically secure random bytes.
 * @function
 * @param {number} len Bytes length
 * @returns {!Array.<number>} Random bytes
 * @throws {Error} If no random implementation is available
 * @inner
 */
function randomBytes(len) {
  // Web Crypto API. Globally available in the browser and in Node.js >=23.
  try {
    return crypto.getRandomValues(new Uint8Array(len));
  } catch {}
  // Node.js crypto module for non-browser environments.
  try {
    return nodeCrypto.randomBytes(len);
  } catch {}
  // Custom fallback specified with `setRandomFallback`.
  if (!randomFallback) {
    throw Error(
      "Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative"
    );
  }
  return randomFallback(len);
}

/**
 * Sets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto
 *  API is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it
 *  is seeded properly!
 * @param {?function(number):!Array.<number>} random Function taking the number of bytes to generate as its
 *  sole argument, returning the corresponding array of cryptographically secure random byte values.
 * @see http://nodejs.org/api/crypto.html
 * @see http://www.w3.org/TR/WebCryptoAPI/
 */
function setRandomFallback(random) {
  randomFallback = random;
}

/**
 * Synchronously generates a salt.
 * @param {number=} rounds Number of rounds to use, defaults to 10 if omitted
 * @param {number=} seed_length Not supported.
 * @returns {string} Resulting salt
 * @throws {Error} If a random fallback is required but not set
 */
function genSaltSync(rounds, seed_length) {
  rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;
  if (typeof rounds !== "number")
    throw Error(
      "Illegal arguments: " + typeof rounds + ", " + typeof seed_length
    );
  if (rounds < 4) rounds = 4;
  else if (rounds > 31) rounds = 31;
  var salt = [];
  salt.push("$2b$");
  if (rounds < 10) salt.push("0");
  salt.push(rounds.toString());
  salt.push("$");
  salt.push(base64_encode(randomBytes(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw
  return salt.join("");
}

/**
 * Asynchronously generates a salt.
 * @param {(number|function(Error, string=))=} rounds Number of rounds to use, defaults to 10 if omitted
 * @param {(number|function(Error, string=))=} seed_length Not supported.
 * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting salt
 * @returns {!Promise} If `callback` has been omitted
 * @throws {Error} If `callback` is present but not a function
 */
function genSalt(rounds, seed_length, callback) {
  if (typeof seed_length === "function")
    (callback = seed_length), (seed_length = undefined); // Not supported.
  if (typeof rounds === "function") (callback = rounds), (rounds = undefined);
  if (typeof rounds === "undefined") rounds = GENSALT_DEFAULT_LOG2_ROUNDS;
  else if (typeof rounds !== "number")
    throw Error("illegal arguments: " + typeof rounds);

  function _async(callback) {
    nextTick(function () {
      // Pretty thin, but salting is fast enough
      try {
        callback(null, genSaltSync(rounds));
      } catch (err) {
        callback(err);
      }
    });
  }

  if (callback) {
    if (typeof callback !== "function")
      throw Error("Illegal callback: " + typeof callback);
    _async(callback);
  } else
    return new Promise(function (resolve, reject) {
      _async(function (err, res) {
        if (err) {
          reject(err);
          return;
        }
        resolve(res);
      });
    });
}

/**
 * Synchronously generates a hash for the given password.
 * @param {string} password Password to hash
 * @param {(number|string)=} salt Salt length to generate or salt to use, default to 10
 * @returns {string} Resulting hash
 */
function hashSync(password, salt) {
  if (typeof salt === "undefined") salt = GENSALT_DEFAULT_LOG2_ROUNDS;
  if (typeof salt === "number") salt = genSaltSync(salt);
  if (typeof password !== "string" || typeof salt !== "string")
    throw Error("Illegal arguments: " + typeof password + ", " + typeof salt);
  return _hash(password, salt);
}

/**
 * Asynchronously generates a hash for the given password.
 * @param {string} password Password to hash
 * @param {number|string} salt Salt length to generate or salt to use
 * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash
 * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed
 *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.
 * @returns {!Promise} If `callback` has been omitted
 * @throws {Error} If `callback` is present but not a function
 */
function hash(password, salt, callback, progressCallback) {
  function _async(callback) {
    if (typeof password === "string" && typeof salt === "number")
      genSalt(salt, function (err, salt) {
        _hash(password, salt, callback, progressCallback);
      });
    else if (typeof password === "string" && typeof salt === "string")
      _hash(password, salt, callback, progressCallback);
    else
      nextTick(
        callback.bind(
          this,
          Error("Illegal arguments: " + typeof password + ", " + typeof salt)
        )
      );
  }

  if (callback) {
    if (typeof callback !== "function")
      throw Error("Illegal callback: " + typeof callback);
    _async(callback);
  } else
    return new Promise(function (resolve, reject) {
      _async(function (err, res) {
        if (err) {
          reject(err);
          return;
        }
        resolve(res);
      });
    });
}

/**
 * Compares two strings of the same length in constant time.
 * @param {string} known Must be of the correct length
 * @param {string} unknown Must be the same length as `known`
 * @returns {boolean}
 * @inner
 */
function safeStringCompare(known, unknown) {
  var diff = known.length ^ unknown.length;
  for (var i = 0; i < known.length; ++i) {
    diff |= known.charCodeAt(i) ^ unknown.charCodeAt(i);
  }
  return diff === 0;
}

/**
 * Synchronously tests a password against a hash.
 * @param {string} password Password to compare
 * @param {string} hash Hash to test against
 * @returns {boolean} true if matching, otherwise false
 * @throws {Error} If an argument is illegal
 */
function compareSync(password, hash) {
  if (typeof password !== "string" || typeof hash !== "string")
    throw Error("Illegal arguments: " + typeof password + ", " + typeof hash);
  if (hash.length !== 60) return false;
  return safeStringCompare(
    hashSync(password, hash.substring(0, hash.length - 31)),
    hash
  );
}

/**
 * Asynchronously tests a password against a hash.
 * @param {string} password Password to compare
 * @param {string} hashValue Hash to test against
 * @param {function(Error, boolean)=} callback Callback receiving the error, if any, otherwise the result
 * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed
 *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.
 * @returns {!Promise} If `callback` has been omitted
 * @throws {Error} If `callback` is present but not a function
 */
function compare(password, hashValue, callback, progressCallback) {
  function _async(callback) {
    if (typeof password !== "string" || typeof hashValue !== "string") {
      nextTick(
        callback.bind(
          this,
          Error(
            "Illegal arguments: " + typeof password + ", " + typeof hashValue
          )
        )
      );
      return;
    }
    if (hashValue.length !== 60) {
      nextTick(callback.bind(this, null, false));
      return;
    }
    hash(
      password,
      hashValue.substring(0, 29),
      function (err, comp) {
        if (err) callback(err);
        else callback(null, safeStringCompare(comp, hashValue));
      },
      progressCallback
    );
  }

  if (callback) {
    if (typeof callback !== "function")
      throw Error("Illegal callback: " + typeof callback);
    _async(callback);
  } else
    return new Promise(function (resolve, reject) {
      _async(function (err, res) {
        if (err) {
          reject(err);
          return;
        }
        resolve(res);
      });
    });
}

/**
 * Gets the number of rounds used to encrypt the specified hash.
 * @param {string} hash Hash to extract the used number of rounds from
 * @returns {number} Number of rounds used
 * @throws {Error} If `hash` is not a string
 */
function getRounds(hash) {
  if (typeof hash !== "string")
    throw Error("Illegal arguments: " + typeof hash);
  return parseInt(hash.split("$")[2], 10);
}

/**
 * Gets the salt portion from a hash. Does not validate the hash.
 * @param {string} hash Hash to extract the salt from
 * @returns {string} Extracted salt part
 * @throws {Error} If `hash` is not a string or otherwise invalid
 */
function getSalt(hash) {
  if (typeof hash !== "string")
    throw Error("Illegal arguments: " + typeof hash);
  if (hash.length !== 60)
    throw Error("Illegal hash length: " + hash.length + " != 60");
  return hash.substring(0, 29);
}

/**
 * Tests if a password will be truncated when hashed, that is its length is
 * greater than 72 bytes when converted to UTF-8.
 * @param {string} password The password to test
 * @returns {boolean} `true` if truncated, otherwise `false`
 */
function truncates(password) {
  if (typeof password !== "string")
    throw Error("Illegal arguments: " + typeof password);
  return utf8Length(password) > 72;
}

/**
 * Continues with the callback on the next tick.
 * @function
 * @param {function(...[*])} callback Callback to execute
 * @inner
 */
var nextTick =
  typeof process !== "undefined" &&
  process &&
  typeof process.nextTick === "function"
    ? typeof setImmediate === "function"
      ? setImmediate
      : process.nextTick
    : setTimeout;

/** Calculates the byte length of a string encoded as UTF8. */
function utf8Length(string) {
  var len = 0,
    c = 0;
  for (var i = 0; i < string.length; ++i) {
    c = string.charCodeAt(i);
    if (c < 128) len += 1;
    else if (c < 2048) len += 2;
    else if (
      (c & 0xfc00) === 0xd800 &&
      (string.charCodeAt(i + 1) & 0xfc00) === 0xdc00
    ) {
      ++i;
      len += 4;
    } else len += 3;
  }
  return len;
}

/** Converts a string to an array of UTF8 bytes. */
function utf8Array(string) {
  var offset = 0,
    c1,
    c2;
  var buffer = new Array(utf8Length(string));
  for (var i = 0, k = string.length; i < k; ++i) {
    c1 = string.charCodeAt(i);
    if (c1 < 128) {
      buffer[offset++] = c1;
    } else if (c1 < 2048) {
      buffer[offset++] = (c1 >> 6) | 192;
      buffer[offset++] = (c1 & 63) | 128;
    } else if (
      (c1 & 0xfc00) === 0xd800 &&
      ((c2 = string.charCodeAt(i + 1)) & 0xfc00) === 0xdc00
    ) {
      c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff);
      ++i;
      buffer[offset++] = (c1 >> 18) | 240;
      buffer[offset++] = ((c1 >> 12) & 63) | 128;
      buffer[offset++] = ((c1 >> 6) & 63) | 128;
      buffer[offset++] = (c1 & 63) | 128;
    } else {
      buffer[offset++] = (c1 >> 12) | 224;
      buffer[offset++] = ((c1 >> 6) & 63) | 128;
      buffer[offset++] = (c1 & 63) | 128;
    }
  }
  return buffer;
}

// A base64 implementation for the bcrypt algorithm. This is partly non-standard.

/**
 * bcrypt's own non-standard base64 dictionary.
 * @type {!Array.<string>}
 * @const
 * @inner
 **/
var BASE64_CODE =
  "./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split("");

/**
 * @type {!Array.<number>}
 * @const
 * @inner
 **/
var BASE64_INDEX = [
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
  -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28,
  29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1,
];

/**
 * Encodes a byte array to base64 with up to len bytes of input.
 * @param {!Array.<number>} b Byte array
 * @param {number} len Maximum input length
 * @returns {string}
 * @inner
 */
function base64_encode(b, len) {
  var off = 0,
    rs = [],
    c1,
    c2;
  if (len <= 0 || len > b.length) throw Error("Illegal len: " + len);
  while (off < len) {
    c1 = b[off++] & 0xff;
    rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);
    c1 = (c1 & 0x03) << 4;
    if (off >= len) {
      rs.push(BASE64_CODE[c1 & 0x3f]);
      break;
    }
    c2 = b[off++] & 0xff;
    c1 |= (c2 >> 4) & 0x0f;
    rs.push(BASE64_CODE[c1 & 0x3f]);
    c1 = (c2 & 0x0f) << 2;
    if (off >= len) {
      rs.push(BASE64_CODE[c1 & 0x3f]);
      break;
    }
    c2 = b[off++] & 0xff;
    c1 |= (c2 >> 6) & 0x03;
    rs.push(BASE64_CODE[c1 & 0x3f]);
    rs.push(BASE64_CODE[c2 & 0x3f]);
  }
  return rs.join("");
}

/**
 * Decodes a base64 encoded string to up to len bytes of output.
 * @param {string} s String to decode
 * @param {number} len Maximum output length
 * @returns {!Array.<number>}
 * @inner
 */
function base64_decode(s, len) {
  var off = 0,
    slen = s.length,
    olen = 0,
    rs = [],
    c1,
    c2,
    c3,
    c4,
    o,
    code;
  if (len <= 0) throw Error("Illegal len: " + len);
  while (off < slen - 1 && olen < len) {
    code = s.charCodeAt(off++);
    c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
    code = s.charCodeAt(off++);
    c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
    if (c1 == -1 || c2 == -1) break;
    o = (c1 << 2) >>> 0;
    o |= (c2 & 0x30) >> 4;
    rs.push(String.fromCharCode(o));
    if (++olen >= len || off >= slen) break;
    code = s.charCodeAt(off++);
    c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
    if (c3 == -1) break;
    o = ((c2 & 0x0f) << 4) >>> 0;
    o |= (c3 & 0x3c) >> 2;
    rs.push(String.fromCharCode(o));
    if (++olen >= len || off >= slen) break;
    code = s.charCodeAt(off++);
    c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
    o = ((c3 & 0x03) << 6) >>> 0;
    o |= c4;
    rs.push(String.fromCharCode(o));
    ++olen;
  }
  var res = [];
  for (off = 0; off < olen; off++) res.push(rs[off].charCodeAt(0));
  return res;
}

/**
 * @type {number}
 * @const
 * @inner
 */
var BCRYPT_SALT_LEN = 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var GENSALT_DEFAULT_LOG2_ROUNDS = 10;

/**
 * @type {number}
 * @const
 * @inner
 */
var BLOWFISH_NUM_ROUNDS = 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var MAX_EXECUTION_TIME = 100;

/**
 * @type {Array.<number>}
 * @const
 * @inner
 */
var P_ORIG = [
  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,
  0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b,
];

/**
 * @type {Array.<number>}
 * @const
 * @inner
 */
var S_ORIG = [
  0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,
  0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,
  0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658,
  0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
  0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,
  0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,
  0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6,
  0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
  0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c,
  0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
  0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1,
  0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
  0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a,
  0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,
  0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,
  0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
  0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706,
  0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,
  0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b,
  0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
  0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c,
  0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,
  0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a,
  0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
  0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,
  0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,
  0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8,
  0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
  0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33,
  0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
  0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0,
  0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
  0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777,
  0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,
  0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,
  0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
  0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e,
  0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,
  0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9,
  0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
  0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f,
  0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,
  0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a, 0x4b7a70e9, 0xb5b32944,
  0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,
  0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,
  0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,
  0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086, 0x8470eb26,
  0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,
  0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c,
  0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,
  0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6,
  0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,
  0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f,
  0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,
  0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,
  0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,
  0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa,
  0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,
  0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55,
  0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,
  0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1,
  0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,
  0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78,
  0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,
  0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,
  0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,
  0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170,
  0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,
  0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7,
  0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,
  0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099,
  0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,
  0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263,
  0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,
  0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,
  0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,
  0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7,
  0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,
  0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d,
  0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,
  0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460,
  0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,
  0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e447a2e, 0xc3453484,
  0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,
  0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,
  0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,
  0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a,
  0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,
  0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785,
  0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,
  0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900,
  0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,
  0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9,
  0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,
  0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,
  0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,
  0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9,
  0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,
  0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f,
  0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,
  0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e,
  0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,
  0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd,
  0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,
  0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,
  0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,
  0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c,
  0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,
  0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b,
  0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,
  0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386,
  0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,
  0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0,
  0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,
  0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,
  0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,
  0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770,
  0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,
  0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c,
  0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,
  0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa,
  0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,
  0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63,
  0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,
  0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,
  0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,
  0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4,
  0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,
  0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742,
  0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,
  0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79,
  0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
  0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a,
  0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,
  0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,
  0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,
  0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,
  0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,
  0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6,
  0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
  0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba,
  0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,
  0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5,
  0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,
  0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,
  0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,
  0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd,
  0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,
  0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb,
  0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,
  0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc,
  0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,
  0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,
  0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,
  0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,
  0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,
  0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a,
  0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,
  0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b,
  0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
  0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e,
  0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,
  0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,
  0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,
  0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,
  0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,
  0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3,
  0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
  0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c,
  0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,
  0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6,
];

/**
 * @type {Array.<number>}
 * @const
 * @inner
 */
var C_ORIG = [
  0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944, 0x6f756274,
];

/**
 * @param {Array.<number>} lr
 * @param {number} off
 * @param {Array.<number>} P
 * @param {Array.<number>} S
 * @returns {Array.<number>}
 * @inner
 */
function _encipher(lr, off, P, S) {
  // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt
  var n,
    l = lr[off],
    r = lr[off + 1];

  l ^= P[0];

  /*
    for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)
        // Feistel substitution on left word
        n  = S[l >>> 24],
        n += S[0x100 | ((l >> 16) & 0xff)],
        n ^= S[0x200 | ((l >> 8) & 0xff)],
        n += S[0x300 | (l & 0xff)],
        r ^= n ^ P[++i],
        // Feistel substitution on right word
        n  = S[r >>> 24],
        n += S[0x100 | ((r >> 16) & 0xff)],
        n ^= S[0x200 | ((r >> 8) & 0xff)],
        n += S[0x300 | (r & 0xff)],
        l ^= n ^ P[++i];
    */

  //The following is an unrolled version of the above loop.
  //Iteration 0
  n = S[l >>> 24];
  n += S[0x100 | ((l >> 16) & 0xff)];
  n ^= S[0x200 | ((l >> 8) & 0xff)];
  n += S[0x300 | (l & 0xff)];
  r ^= n ^ P[1];
  n = S[r >>> 24];
  n += S[0x100 | ((r >> 16) & 0xff)];
  n ^= S[0x200 | ((r >> 8) & 0xff)];
  n += S[0x300 | (r & 0xff)];
  l ^= n ^ P[2];
  //Iteration 1
  n = S[l >>> 24];
  n += S[0x100 | ((l >> 16) & 0xff)];
  n ^= S[0x200 | ((l >> 8) & 0xff)];
  n += S[0x300 | (l & 0xff)];
  r ^= n ^ P[3];
  n = S[r >>> 24];
  n += S[0x100 | ((r >> 16) & 0xff)];
  n ^= S[0x200 | ((r >> 8) & 0xff)];
  n += S[0x300 | (r & 0xff)];
  l ^= n ^ P[4];
  //Iteration 2
  n = S[l >>> 24];
  n += S[0x100 | ((l >> 16) & 0xff)];
  n ^= S[0x200 | ((l >> 8) & 0xff)];
  n += S[0x300 | (l & 0xff)];
  r ^= n ^ P[5];
  n = S[r >>> 24];
  n += S[0x100 | ((r >> 16) & 0xff)];
  n ^= S[0x200 | ((r >> 8) & 0xff)];
  n += S[0x300 | (r & 0xff)];
  l ^= n ^ P[6];
  //Iteration 3
  n = S[l >>> 24];
  n += S[0x100 | ((l >> 16) & 0xff)];
  n ^= S[0x200 | ((l >> 8) & 0xff)];
  n += S[0x300 | (l & 0xff)];
  r ^= n ^ P[7];
  n = S[r >>> 24];
  n += S[0x100 | ((r >> 16) & 0xff)];
  n ^= S[0x200 | ((r >> 8) & 0xff)];
  n += S[0x300 | (r & 0xff)];
  l ^= n ^ P[8];
  //Iteration 4
  n = S[l >>> 24];
  n += S[0x100 | ((l >> 16) & 0xff)];
  n ^= S[0x200 | ((l >> 8) & 0xff)];
  n += S[0x300 | (l & 0xff)];
  r ^= n ^ P[9];
  n = S[r >>> 24];
  n += S[0x100 | ((r >> 16) & 0xff)];
  n ^= S[0x200 | ((r >> 8) & 0xff)];
  n += S[0x300 | (r & 0xff)];
  l ^= n ^ P[10];
  //Iteration 5
  n = S[l >>> 24];
  n += S[0x100 | ((l >> 16) & 0xff)];
  n ^= S[0x200 | ((l >> 8) & 0xff)];
  n += S[0x300 | (l & 0xff)];
  r ^= n ^ P[11];
  n = S[r >>> 24];
  n += S[0x100 | ((r >> 16) & 0xff)];
  n ^= S[0x200 | ((r >> 8) & 0xff)];
  n += S[0x300 | (r & 0xff)];
  l ^= n ^ P[12];
  //Iteration 6
  n = S[l >>> 24];
  n += S[0x100 | ((l >> 16) & 0xff)];
  n ^= S[0x200 | ((l >> 8) & 0xff)];
  n += S[0x300 | (l & 0xff)];
  r ^= n ^ P[13];
  n = S[r >>> 24];
  n += S[0x100 | ((r >> 16) & 0xff)];
  n ^= S[0x200 | ((r >> 8) & 0xff)];
  n += S[0x300 | (r & 0xff)];
  l ^= n ^ P[14];
  //Iteration 7
  n = S[l >>> 24];
  n += S[0x100 | ((l >> 16) & 0xff)];
  n ^= S[0x200 | ((l >> 8) & 0xff)];
  n += S[0x300 | (l & 0xff)];
  r ^= n ^ P[15];
  n = S[r >>> 24];
  n += S[0x100 | ((r >> 16) & 0xff)];
  n ^= S[0x200 | ((r >> 8) & 0xff)];
  n += S[0x300 | (r & 0xff)];
  l ^= n ^ P[16];

  lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];
  lr[off + 1] = l;
  return lr;
}

/**
 * @param {Array.<number>} data
 * @param {number} offp
 * @returns {{key: number, offp: number}}
 * @inner
 */
function _streamtoword(data, offp) {
  for (var i = 0, word = 0; i < 4; ++i)
    (word = (word << 8) | (data[offp] & 0xff)),
      (offp = (offp + 1) % data.length);
  return { key: word, offp: offp };
}

/**
 * @param {Array.<number>} key
 * @param {Array.<number>} P
 * @param {Array.<number>} S
 * @inner
 */
function _key(key, P, S) {
  var offset = 0,
    lr = [0, 0],
    plen = P.length,
    slen = S.length,
    sw;
  for (var i = 0; i < plen; i++)
    (sw = _streamtoword(key, offset)),
      (offset = sw.offp),
      (P[i] = P[i] ^ sw.key);
  for (i = 0; i < plen; i += 2)
    (lr = _encipher(lr, 0, P, S)), (P[i] = lr[0]), (P[i + 1] = lr[1]);
  for (i = 0; i < slen; i += 2)
    (lr = _encipher(lr, 0, P, S)), (S[i] = lr[0]), (S[i + 1] = lr[1]);
}

/**
 * Expensive key schedule Blowfish.
 * @param {Array.<number>} data
 * @param {Array.<number>} key
 * @param {Array.<number>} P
 * @param {Array.<number>} S
 * @inner
 */
function _ekskey(data, key, P, S) {
  var offp = 0,
    lr = [0, 0],
    plen = P.length,
    slen = S.length,
    sw;
  for (var i = 0; i < plen; i++)
    (sw = _streamtoword(key, offp)), (offp = sw.offp), (P[i] = P[i] ^ sw.key);
  offp = 0;
  for (i = 0; i < plen; i += 2)
    (sw = _streamtoword(data, offp)),
      (offp = sw.offp),
      (lr[0] ^= sw.key),
      (sw = _streamtoword(data, offp)),
      (offp = sw.offp),
      (lr[1] ^= sw.key),
      (lr = _encipher(lr, 0, P, S)),
      (P[i] = lr[0]),
      (P[i + 1] = lr[1]);
  for (i = 0; i < slen; i += 2)
    (sw = _streamtoword(data, offp)),
      (offp = sw.offp),
      (lr[0] ^= sw.key),
      (sw = _streamtoword(data, offp)),
      (offp = sw.offp),
      (lr[1] ^= sw.key),
      (lr = _encipher(lr, 0, P, S)),
      (S[i] = lr[0]),
      (S[i + 1] = lr[1]);
}

/**
 * Internaly crypts a string.
 * @param {Array.<number>} b Bytes to crypt
 * @param {Array.<number>} salt Salt bytes to use
 * @param {number} rounds Number of rounds
 * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If
 *  omitted, the operation will be performed synchronously.
 *  @param {function(number)=} progressCallback Callback called with the current progress
 * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`
 * @inner
 */
function _crypt(b, salt, rounds, callback, progressCallback) {
  var cdata = C_ORIG.slice(),
    clen = cdata.length,
    err;

  // Validate
  if (rounds < 4 || rounds > 31) {
    err = Error("Illegal number of rounds (4-31): " + rounds);
    if (callback) {
      nextTick(callback.bind(this, err));
      return;
    } else throw err;
  }
  if (salt.length !== BCRYPT_SALT_LEN) {
    err = Error(
      "Illegal salt length: " + salt.length + " != " + BCRYPT_SALT_LEN
    );
    if (callback) {
      nextTick(callback.bind(this, err));
      return;
    } else throw err;
  }
  rounds = (1 << rounds) >>> 0;

  var P,
    S,
    i = 0,
    j;

  //Use typed arrays when available - huge speedup!
  if (typeof Int32Array === "function") {
    P = new Int32Array(P_ORIG);
    S = new Int32Array(S_ORIG);
  } else {
    P = P_ORIG.slice();
    S = S_ORIG.slice();
  }

  _ekskey(salt, b, P, S);

  /**
   * Calcualtes the next round.
   * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`
   * @inner
   */
  function next() {
    if (progressCallback) progressCallback(i / rounds);
    if (i < rounds) {
      var start = Date.now();
      for (; i < rounds; ) {
        i = i + 1;
        _key(b, P, S);
        _key(salt, P, S);
        if (Date.now() - start > MAX_EXECUTION_TIME) break;
      }
    } else {
      for (i = 0; i < 64; i++)
        for (j = 0; j < clen >> 1; j++) _encipher(cdata, j << 1, P, S);
      var ret = [];
      for (i = 0; i < clen; i++)
        ret.push(((cdata[i] >> 24) & 0xff) >>> 0),
          ret.push(((cdata[i] >> 16) & 0xff) >>> 0),
          ret.push(((cdata[i] >> 8) & 0xff) >>> 0),
          ret.push((cdata[i] & 0xff) >>> 0);
      if (callback) {
        callback(null, ret);
        return;
      } else return ret;
    }
    if (callback) nextTick(next);
  }

  // Async
  if (typeof callback !== "undefined") {
    next();

    // Sync
  } else {
    var res;
    while (true) if (typeof (res = next()) !== "undefined") return res || [];
  }
}

/**
 * Internally hashes a password.
 * @param {string} password Password to hash
 * @param {?string} salt Salt to use, actually never null
 * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,
 *  hashing is performed synchronously.
 *  @param {function(number)=} progressCallback Callback called with the current progress
 * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`
 * @inner
 */
function _hash(password, salt, callback, progressCallback) {
  var err;
  if (typeof password !== "string" || typeof salt !== "string") {
    err = Error("Invalid string / salt: Not a string");
    if (callback) {
      nextTick(callback.bind(this, err));
      return;
    } else throw err;
  }

  // Validate the salt
  var minor, offset;
  if (salt.charAt(0) !== "$" || salt.charAt(1) !== "2") {
    err = Error("Invalid salt version: " + salt.substring(0, 2));
    if (callback) {
      nextTick(callback.bind(this, err));
      return;
    } else throw err;
  }
  if (salt.charAt(2) === "$") (minor = String.fromCharCode(0)), (offset = 3);
  else {
    minor = salt.charAt(2);
    if (
      (minor !== "a" && minor !== "b" && minor !== "y") ||
      salt.charAt(3) !== "$"
    ) {
      err = Error("Invalid salt revision: " + salt.substring(2, 4));
      if (callback) {
        nextTick(callback.bind(this, err));
        return;
      } else throw err;
    }
    offset = 4;
  }

  // Extract number of rounds
  if (salt.charAt(offset + 2) > "$") {
    err = Error("Missing salt rounds");
    if (callback) {
      nextTick(callback.bind(this, err));
      return;
    } else throw err;
  }
  var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10,
    r2 = parseInt(salt.substring(offset + 1, offset + 2), 10),
    rounds = r1 + r2,
    real_salt = salt.substring(offset + 3, offset + 25);
  password += minor >= "a" ? "\x00" : "";

  var passwordb = utf8Array(password),
    saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);

  /**
   * Finishes hashing.
   * @param {Array.<number>} bytes Byte array
   * @returns {string}
   * @inner
   */
  function finish(bytes) {
    var res = [];
    res.push("$2");
    if (minor >= "a") res.push(minor);
    res.push("$");
    if (rounds < 10) res.push("0");
    res.push(rounds.toString());
    res.push("$");
    res.push(base64_encode(saltb, saltb.length));
    res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));
    return res.join("");
  }

  // Sync
  if (typeof callback == "undefined")
    return finish(_crypt(passwordb, saltb, rounds));
  // Async
  else {
    _crypt(
      passwordb,
      saltb,
      rounds,
      function (err, bytes) {
        if (err) callback(err, null);
        else callback(null, finish(bytes));
      },
      progressCallback
    );
  }
}

/**
 * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.
 * @function
 * @param {!Array.<number>} bytes Byte array
 * @param {number} length Maximum input length
 * @returns {string}
 */
function encodeBase64(bytes, length) {
  return base64_encode(bytes, length);
}

/**
 * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.
 * @function
 * @param {string} string String to decode
 * @param {number} length Maximum output length
 * @returns {!Array.<number>}
 */
function decodeBase64(string, length) {
  return base64_decode(string, length);
}

const bcrypt = {
  setRandomFallback,
  genSaltSync,
  genSalt,
  hashSync,
  hash,
  compareSync,
  compare,
  getRounds,
  getSalt,
  truncates,
  encodeBase64,
  decodeBase64,
};

function useLoadGsiScript(options = {}) {
  const { nonce, onScriptLoadSuccess, onScriptLoadError } = options;
  const [scriptLoadedSuccessfully, setScriptLoadedSuccessfully] =
    reactExports.useState(false);
  const onScriptLoadSuccessRef = reactExports.useRef(onScriptLoadSuccess);
  onScriptLoadSuccessRef.current = onScriptLoadSuccess;
  const onScriptLoadErrorRef = reactExports.useRef(onScriptLoadError);
  onScriptLoadErrorRef.current = onScriptLoadError;
  reactExports.useEffect(() => {
    const scriptTag = document.createElement("script");
    scriptTag.src = "https://accounts.google.com/gsi/client";
    scriptTag.async = true;
    scriptTag.defer = true;
    scriptTag.nonce = nonce;
    scriptTag.onload = () => {
      var _a;
      setScriptLoadedSuccessfully(true);
      (_a = onScriptLoadSuccessRef.current) === null || _a === void 0
        ? void 0
        : _a.call(onScriptLoadSuccessRef);
    };
    scriptTag.onerror = () => {
      var _a;
      setScriptLoadedSuccessfully(false);
      (_a = onScriptLoadErrorRef.current) === null || _a === void 0
        ? void 0
        : _a.call(onScriptLoadErrorRef);
    };
    document.body.appendChild(scriptTag);
    return () => {
      document.body.removeChild(scriptTag);
    };
  }, [nonce]);
  return scriptLoadedSuccessfully;
}

const GoogleOAuthContext = reactExports.createContext(null);
function GoogleOAuthProvider({
  clientId,
  nonce,
  onScriptLoadSuccess,
  onScriptLoadError,
  children,
}) {
  const scriptLoadedSuccessfully = useLoadGsiScript({
    nonce,
    onScriptLoadSuccess,
    onScriptLoadError,
  });
  const contextValue = reactExports.useMemo(
    () => ({
      clientId,
      scriptLoadedSuccessfully,
    }),
    [clientId, scriptLoadedSuccessfully]
  );
  return React.createElement(
    GoogleOAuthContext.Provider,
    { value: contextValue },
    children
  );
}
function useGoogleOAuth() {
  const context = reactExports.useContext(GoogleOAuthContext);
  if (!context) {
    throw new Error(
      "Google OAuth components must be used within GoogleOAuthProvider"
    );
  }
  return context;
}

function extractClientId(credentialResponse) {
  var _a;
  const clientId =
    (_a =
      credentialResponse === null || credentialResponse === void 0
        ? void 0
        : credentialResponse.clientId) !== null && _a !== void 0
      ? _a
      : credentialResponse === null || credentialResponse === void 0
      ? void 0
      : credentialResponse.client_id;
  return clientId;
}

const containerHeightMap = { large: 40, medium: 32, small: 20 };
function GoogleLogin({
  onSuccess,
  onError,
  useOneTap,
  promptMomentNotification,
  type = "standard",
  theme = "outline",
  size = "large",
  text,
  shape,
  logo_alignment,
  width,
  locale,
  click_listener,
  containerProps,
  ...props
}) {
  const btnContainerRef = reactExports.useRef(null);
  const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();
  const onSuccessRef = reactExports.useRef(onSuccess);
  onSuccessRef.current = onSuccess;
  const onErrorRef = reactExports.useRef(onError);
  onErrorRef.current = onError;
  const promptMomentNotificationRef = reactExports.useRef(
    promptMomentNotification
  );
  promptMomentNotificationRef.current = promptMomentNotification;
  reactExports.useEffect(() => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (!scriptLoadedSuccessfully) return;
    (_c =
      (_b =
        (_a = window === null || window === void 0 ? void 0 : window.google) ===
          null || _a === void 0
          ? void 0
          : _a.accounts) === null || _b === void 0
        ? void 0
        : _b.id) === null || _c === void 0
      ? void 0
      : _c.initialize({
          client_id: clientId,
          callback: (credentialResponse) => {
            var _a;
            if (
              !(credentialResponse === null || credentialResponse === void 0
                ? void 0
                : credentialResponse.credential)
            ) {
              return (_a = onErrorRef.current) === null || _a === void 0
                ? void 0
                : _a.call(onErrorRef);
            }
            const { credential, select_by } = credentialResponse;
            onSuccessRef.current({
              credential,
              clientId: extractClientId(credentialResponse),
              select_by,
            });
          },
          ...props,
        });
    (_f =
      (_e =
        (_d = window === null || window === void 0 ? void 0 : window.google) ===
          null || _d === void 0
          ? void 0
          : _d.accounts) === null || _e === void 0
        ? void 0
        : _e.id) === null || _f === void 0
      ? void 0
      : _f.renderButton(btnContainerRef.current, {
          type,
          theme,
          size,
          text,
          shape,
          logo_alignment,
          width,
          locale,
          click_listener,
        });
    if (useOneTap)
      (_j =
        (_h =
          (_g =
            window === null || window === void 0 ? void 0 : window.google) ===
            null || _g === void 0
            ? void 0
            : _g.accounts) === null || _h === void 0
          ? void 0
          : _h.id) === null || _j === void 0
        ? void 0
        : _j.prompt(promptMomentNotificationRef.current);
    return () => {
      var _a, _b, _c;
      if (useOneTap)
        (_c =
          (_b =
            (_a =
              window === null || window === void 0 ? void 0 : window.google) ===
              null || _a === void 0
              ? void 0
              : _a.accounts) === null || _b === void 0
            ? void 0
            : _b.id) === null || _c === void 0
          ? void 0
          : _c.cancel();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    clientId,
    scriptLoadedSuccessfully,
    useOneTap,
    type,
    theme,
    size,
    text,
    shape,
    logo_alignment,
    width,
    locale,
  ]);
  return React.createElement("div", {
    ...containerProps,
    ref: btnContainerRef,
    style: {
      height: containerHeightMap[size],
      ...(containerProps === null || containerProps === void 0
        ? void 0
        : containerProps.style),
    },
  });
}

const ThemeContext = reactExports.createContext({
  theme: "system",
  setTheme: (theme) => {},
});
const CLIENT_ID =
  "942589748245-hvrpckombpd3bsnknp46fltgpilnb14b.apps.googleusercontent.com";
const useTheme = () => {
  const context = reactExports.useContext(ThemeContext);
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};
function ThemeProvider({ children }) {
  const [theme, setTheme] = reactExports.useState(() => {
    if (typeof window !== "undefined") {
      return localStorage.getItem("inspirelens-theme") || "system";
    }
    return "system";
  });
  const updateTheme = async (newTheme) => {
    const user = JSON.parse(localStorage.getItem("inspirelens_user") || "null");
    const userId = user?.id;
    if (!userId) {
      setTheme(newTheme);
      return;
    }
    console.log("Updating theme for userId:", userId);
    console.log("New theme:", newTheme);
    try {
      setTheme(newTheme);
      const response = await ApiService.updateTheme(newTheme, userId);
      console.log("Server response:", response);
      user.mode = newTheme;
      localStorage.setItem("inspirelens_user", JSON.stringify(user));
      showSuccessToast("Theme updated successfully!");
    } catch (error) {
      console.error("Failed to update theme:", error);
      showErrorToast();
    }
  };
  reactExports.useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove("light", "dark");
    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light";
      root.classList.add(systemTheme);
    } else {
      root.classList.add(theme);
    }
    localStorage.setItem("inspirelens-theme", theme);
  }, [theme]);
  reactExports.useEffect(() => {
    if (theme === "system") {
      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      const handleChange = () => {
        const root = window.document.documentElement;
        root.classList.remove("light", "dark");
        root.classList.add(mediaQuery.matches ? "dark" : "light");
      };
      mediaQuery.addEventListener("change", handleChange);
      return () => mediaQuery.removeEventListener("change", handleChange);
    }
  }, [theme]);
  const value = {
    theme,
    setTheme: updateTheme,
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeContext.Provider, {
    value,
    children,
  });
}
const CATEGORIES = [
  {
    id: 1,
    _id: "all",
    icon: "🌟",
    name: "All",
    color:
      "bg-slate-100 hover:bg-slate-200 text-slate-800 dark:bg-slate-700 dark:hover:bg-slate-600 dark:text-slate-200",
  },
  {
    id: 2,
    _id: "mindset",
    icon: "🧠",
    name: "Mindset",
    color:
      "bg-slate-200 hover:bg-slate-300 text-slate-800 dark:bg-slate-600 dark:hover:bg-slate-500 dark:text-slate-200",
  },
  {
    id: 3,
    _id: "productivity",
    icon: "⚡",
    name: "Productivity",
    color:
      "bg-slate-300 hover:bg-slate-400 text-slate-900 dark:bg-slate-500 dark:hover:bg-slate-400 dark:text-slate-100",
  },
  {
    id: 4,
    _id: "leadership",
    icon: "👑",
    name: "Leadership",
    color:
      "bg-slate-400 hover:bg-slate-500 text-white dark:bg-slate-400 dark:hover:bg-slate-300 dark:text-slate-900",
  },
  {
    id: 5,
    _id: "learning",
    icon: "📚",
    name: "Learning",
    color:
      "bg-slate-500 hover:bg-slate-600 text-white dark:bg-slate-300 dark:hover:bg-slate-200 dark:text-slate-900",
  },
  {
    id: 6,
    _id: "wellbeing",
    icon: "🌿",
    name: "Wellbeing",
    color:
      "bg-slate-600 hover:bg-slate-700 text-white dark:bg-slate-200 dark:hover:bg-slate-100 dark:text-slate-900",
  },
  {
    id: 7,
    _id: "spirituality",
    icon: "🙏",
    name: "Spirituality",
    color:
      "bg-slate-700 hover:bg-slate-800 text-white dark:bg-slate-100 dark:hover:bg-slate-50 dark:text-slate-900",
  },
  {
    id: 8,
    _id: "relationship",
    icon: "💝",
    name: "Relationship",
    color:
      "bg-slate-800 hover:bg-slate-900 text-white dark:bg-slate-50 dark:hover:bg-white dark:text-slate-900",
  },
  {
    id: 9,
    _id: "career",
    icon: "🚀",
    name: "Career",
    color:
      "bg-slate-900 hover:bg-black text-white dark:bg-white dark:hover:bg-gray-50 dark:text-slate-900",
  },
];
const TYPE_META = {
  quote: {
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Quote, {
      className: "w-4 h-4",
    }),
    label: "Quote",
    color: "text-slate-700 dark:text-slate-300",
    bg: "bg-slate-100 border-slate-300 dark:bg-slate-700 dark:border-slate-500",
  },
  prompt: {
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(WandSparkles, {
      className: "w-4 h-4",
    }),
    label: "AI Prompt",
    color: "text-slate-700 dark:text-slate-300",
    bg: "bg-slate-100 border-slate-300 dark:bg-slate-700 dark:border-slate-500",
  },
  article: {
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Link, { className: "w-4 h-4" }),
    label: "Article",
    color: "text-slate-700 dark:text-slate-300",
    bg: "bg-slate-100 border-slate-300 dark:bg-slate-700 dark:border-slate-500",
  },
  book: {
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(BookOpen, {
      className: "w-4 h-4",
    }),
    label: "Book",
    color: "text-slate-700 dark:text-slate-300",
    bg: "bg-slate-100 border-slate-300 dark:bg-slate-700 dark:border-slate-500",
  },
  video: {
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Video, {
      className: "w-4 h-4",
    }),
    label: "Video",
    color: "text-slate-700 dark:text-slate-300",
    bg: "bg-slate-100 border-slate-300 dark:bg-slate-700 dark:border-slate-500",
  },
};
const ITEMS_PER_PAGE = 10;
const initialItems = [
  {
    id: 35,
    url: "",
    tags: null,
    type: "quote",
    user: "@Sham Senthilkumar",
    title:
      "The universe has no fixed agenda. Once you make any decision, it works around that decision. There is no right or wrong, only a series of possibilities that shift with each thought, feeling, and action that you experience.",
    author: "Deepak Chopra",
    points: 0,
    content:
      "The universe has no fixed agenda. Once you make any decision, it works around that decision. There is no right or wrong, only a series of possibilities that shift with each thought, feeling, and action that you experience.",
    category: "Spirituality",
    comments: null,
    createdAt: 175887572e4,
    userId: 0,
  },
  {
    id: 34,
    url: "",
    tags: null,
    type: "quote",
    user: "@Sham Senthilkumar",
    title:
      "Love doesn’t need reason. It speaks from the irrational wisdom of the hear",
    author: "Deepak Chopra",
    points: 2,
    content:
      "Love doesn’t need reason. It speaks from the irrational wisdom of the hear",
    category: "Spirituality",
    comments: [
      {
        id: 17,
        text: "I will try this.",
        user: "@ava_allen",
        createdAt: 1758615617e3,
        createdBy: "@ava_allen",
      },
      {
        id: 18,
        text: "Nice article!",
        user: "@john_doe",
        createdAt: 1758615617e3,
        createdBy: "@john_doe",
      },
    ],
    createdAt: 1758869649e3,
    userId: 0,
  },
  {
    id: 33,
    url: "",
    tags: ["happy", "sad"],
    type: "quote",
    user: "@Sham",
    title: "Happy life in hard situation",
    author: "sham",
    points: 0,
    content: "Happy life in hard situation",
    category: "Relationship",
    comments: [
      {
        id: 15,
        text: "Interesting read.",
        user: "@sophia_lewis",
        createdAt: 1758615617e3,
        createdBy: "@sophia_lewis",
      },
      {
        id: 16,
        text: "Useful information.",
        user: "@benjamin_hall",
        createdAt: 1758615617e3,
        createdBy: "@benjamin_hall",
      },
      {
        id: 35,
        text: "nice post",
        user: "@Sham",
        createdAt: 1758875251e3,
        createdBy: "@Sham",
      },
      {
        id: 37,
        text: "open source",
        user: "@Sham",
        createdAt: 1758875549e3,
        createdBy: "@Sham",
      },
    ],
    createdAt: 1758854426e3,
    userId: 0,
  },
  {
    id: 43,
    url: "",
    tags: ["happiness", "surprise"],
    type: "aiprompt",
    user: "@Sham",
    title: "Life is full of surprise and miracles",
    author: "",
    points: 0,
    content: "Life is full of surprise and miracles",
    category: "Wellbeing",
    comments: [
      {
        id: 36,
        text: "nice quote",
        user: "@Sham",
        createdAt: 175887537e4,
        createdBy: "@Sham",
      },
    ],
    createdAt: 1758854028e3,
    userId: 0,
  },
  {
    id: 52,
    url: "http://www.lightuptheweb.in",
    tags: ["product", "extension"],
    type: "article",
    user: "@Sham",
    title: "To be a good knoweledge from worl",
    author: "",
    points: 0,
    content: "",
    category: "Learning",
    comments: [
      {
        id: 21,
        text: "Excellent insights.",
        user: "@emily_jones",
        createdAt: 1758615617e3,
        createdBy: "@emily_jones",
      },
      {
        id: 22,
        text: "Very helpful.",
        user: "@william_white",
        createdAt: 1758615617e3,
        createdBy: "@william_white",
      },
    ],
    createdAt: 1758852536e3,
    userId: 0,
  },
  {
    id: 42,
    url: "",
    tags: ["happy", "new", "type"],
    type: "aiprompt",
    user: "@Sham",
    title: "What is application software in culture?",
    author: "",
    points: 0,
    content: "What is application software in culture?",
    category: "Relationship",
    comments: null,
    createdAt: 1758852188e3,
    userId: 0,
  },
  {
    id: 41,
    url: "https://www.youtube.com/watch?v=-hZIVX0iv9w",
    tags: null,
    type: "video",
    user: "@Sham",
    title: "What comes in goes out?",
    author: "",
    points: 0,
    content: "",
    category: "Career",
    comments: null,
    createdAt: 1758824302e3,
    userId: 0,
  },
  {
    id: 51,
    url: "https://stackoverflow.com/questions",
    tags: null,
    type: "article",
    user: "@Sham",
    title: "Happy for learning habit",
    author: "",
    points: 2,
    content: "",
    category: "Wellbeing",
    comments: [
      {
        id: 19,
        text: "This book is a must-read.",
        user: "@jane_smith",
        createdAt: 1758615617e3,
        createdBy: "@jane_smith",
      },
      {
        id: 20,
        text: "Highly recommend it.",
        user: "@michael_brown",
        createdAt: 1758615617e3,
        createdBy: "@michael_brown",
      },
    ],
    createdAt: 1758824199e3,
    userId: 0,
  },
  {
    id: 41,
    url: "",
    tags: null,
    type: "aiprompt",
    user: "@Sham",
    title: "What is love language in computer?",
    author: "",
    points: 0,
    content: "What is love language in computer?",
    category: "Leadership",
    comments: null,
    createdAt: 1758823835e3,
    userId: 0,
  },
  {
    id: 41,
    url: "",
    tags: null,
    type: "book",
    user: "@Sham",
    title: "Rajesh shetty has inspire",
    author: "sham",
    points: 0,
    content: "Rajesh shetty has inspire by sham thankyou for arts",
    category: "Learning",
    comments: null,
    createdAt: 1758822455e3,
    userId: 0,
  },
];
function domainFromUrl(url = "") {
  try {
    if (!url) return "";
    const u = new URL(url);
    return u.hostname.replace(/^www\./, "");
  } catch (e) {
    return "";
  }
}
function timeAgo(ts) {
  const seconds = Math.floor((Date.now() - ts) / 1e3);
  const intervals = [
    { label: "y", secs: 31536e3 },
    { label: "mo", secs: 2592e3 },
    { label: "d", secs: 86400 },
    { label: "h", secs: 3600 },
    { label: "m", secs: 60 },
  ];
  for (const i of intervals) {
    const count = Math.floor(seconds / i.secs);
    if (count >= 1) return `${count}${i.label}`;
  }
  return `${seconds}s`;
}
function formatNumber(num) {
  if (num >= 1e6) return (num / 1e6).toFixed(1) + "M";
  if (num >= 1e3) return (num / 1e3).toFixed(1) + "K";
  return num.toString();
}
const API_BASE_URL = "http://localhost:8080";
class ApiService {
  static async request(endpoint, options = {}) {
    const url = `${API_BASE_URL}${endpoint}`;
    const defaultOptions = {
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };
    const user = JSON.parse(localStorage.getItem("inspirelens_user") || "null");
    if (user?.token) {
      defaultOptions.headers["Authorization"] = `Bearer ${user.token}`;
    }
    const config = {
      ...defaultOptions,
      ...options,
      headers: {
        ...defaultOptions.headers,
        ...options.headers,
      },
    };
    try {
      const response = await fetch(url, config);
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.message || `HTTP error! status: ${response.status}`
        );
      }
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        return await response.json();
      }
      return await response.text();
    } catch (error) {
      console.error("API Request failed:", error);
      throw error;
    }
  }
  static async get(endpoint, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const url = queryString ? `${endpoint}?${queryString}` : endpoint;
    return this.request(url, { method: "GET" });
  }
  static async post(endpoint, data = {}) {
    return this.request(endpoint, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  static async put(endpoint, data = {}) {
    return this.request(endpoint, {
      method: "PUT",
      body: JSON.stringify(data),
    });
  }
  // Removed duplicate request implementation to fix compile error.
  static async delete(endpoint) {
    return this.request(endpoint, { method: "DELETE" });
  }
  // Category API
  static async getContentByCategory(category, page = 1, type = "all") {
    console.log(
      "Fetching content for category:",
      category,
      "page:",
      page,
      "type:",
      type,
      "limit:",
      ITEMS_PER_PAGE
    );
    return this.get("/content", {
      category: category === "all" ? void 0 : category,
      type: type === "all" ? void 0 : type,
      page,
      limit: ITEMS_PER_PAGE,
    });
  }
  // Content Type API
  static async getContentByType(type, page = 1, category = "all") {
    return this.get("/content-type", {
      type: type === "all" ? void 0 : type,
      category: category === "all" ? void 0 : category,
      page,
      limit: ITEMS_PER_PAGE,
    });
  }
  // Authentication API
  static async login(credentials) {
    return this.post("/auth/login", credentials);
  }
  static async checkEmail(email) {
    return this.get("/auth/check-email", email);
  }
  static async signup(userData) {
    return this.post("/auth/signup", userData);
  }
  static async googleAuth(response) {
    const idToken = response.credential;
    console.log("Token ID:", idToken);
    return this.post("/auth/google", {
      tokenId: idToken,
      // send as JSON object
    });
  }
  static async forgotPassword(email) {
    return this.post("/auth/forgot-password", { email });
  }
  static async logout() {
    return this.post("/auth/logout");
  }
  // Theme API
  static async updateTheme(theme, userId) {
    console.log("Updating theme to:", theme, "for userId:", userId);
    const response = await this.put("/auth/theme", { theme, userId });
    return response;
  }
  // Voting API
  static async vote(contentId, direction) {
    return this.put(`/content/${contentId}/vote`, { direction });
  }
  // Comments API
  static async addComment(contentId, comment, userId) {
    console.log(
      "Adding comment:",
      comment,
      "to contentId:",
      contentId,
      "by userId:",
      userId
    );
    return this.post(`/posts/content/${contentId}/comments`, {
      text: comment,
      userId,
    });
  }
  static async getMoreComments(contentId, offset = 0) {
    return this.get(`/content/${contentId}/comments`, { offset, limit: 10 });
  }
  static async deleteComment(contentId, commentId) {
    return this.delete(`/content/${contentId}/comments/${commentId}`);
  }
  // Content Creation API
  static async createContent(contentData) {
    return this.post("/posts/addContent", contentData);
  }
  // Pagination API
  static async getContentPage(page, category = "all", type = "all") {
    return this.get("/content", {
      page,
      category: category === "all" ? void 0 : category,
      type: type === "all" ? void 0 : type,
      limit: ITEMS_PER_PAGE,
    });
  }
}
function simulateDelay(delay = 300) {
  return new Promise((resolve) => setTimeout(resolve, delay));
}
function validateEmail(email) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}
function validatePassword(password) {
  return password.length >= 8 && /(?=.*[a-zA-Z])(?=.*\d)/.test(password);
}
function validateUsername(username) {
  return /^[a-zA-Z0-9_]{3,20}$/.test(username);
}
function validateUrl(url) {
  try {
    if (!url || url.trim() === "") return false;
    const urlObj = new URL(url.trim());
    return urlObj.protocol === "http:" || urlObj.protocol === "https:";
  } catch {
    return false;
  }
}
const showSuccessToast = (message) => {
  toast.success(message, {
    duration: 4e3,
    style: {
      background: "#475569",
      color: "white",
      border: "none",
      borderRadius: "8px",
    },
  });
};
const showInfoToast = (message) => {
  toast.info(message, {
    duration: 3e3,
    style: {
      background: "#64748b",
      color: "white",
      border: "none",
      borderRadius: "8px",
    },
  });
};
async function copyToClipboard(text) {
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(text);
      return { success: true, method: "clipboard" };
    }
  } catch (error) {
    console.log("Clipboard API not available, using fallback");
  }
  try {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.position = "fixed";
    textArea.style.left = "-999999px";
    textArea.style.top = "-999999px";
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    const successful = document.execCommand("copy");
    textArea.remove();
    return { success: successful, method: "execCommand" };
  } catch (error) {
    return { success: false, error };
  }
}
function SkeletonCard() {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Card, {
    className:
      "w-full border border-slate-200 bg-white dark:border-slate-700 dark:bg-slate-800",
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(CardContent, {
      className: "p-4",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "flex items-start gap-4",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "flex flex-col items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                className: "w-10 h-6 rounded",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                className: "w-6 h-4",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                className: "w-10 h-6 rounded",
              }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "flex-1 space-y-3",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-2",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                    className: "w-16 h-5 rounded",
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                    className: "w-12 h-5 rounded",
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                    className: "w-20 h-3",
                  }),
                ],
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                className: "w-full h-6",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                className: "w-4/5 h-3",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                className: "w-3/5 h-3",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "flex items-center gap-3 pt-2",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                    className: "w-16 h-5",
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, {
                    className: "w-12 h-5",
                  }),
                ],
              }),
            ],
          }),
        ],
      }),
    }),
  });
}
function InspireLensLogo({ size = "md" }) {
  const sizeClasses = {
    sm: "w-8 h-8",
    md: "w-10 h-10",
    lg: "w-12 h-12",
    xl: "w-16 h-16",
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
    className: `${sizeClasses[size]} rounded-xl bg-gradient-to-br from-slate-700 via-slate-600 to-slate-800 dark:from-slate-200 dark:via-slate-300 dark:to-slate-100 grid place-items-center shadow-lg relative overflow-hidden`,
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
        className:
          "absolute inset-0 bg-gradient-to-tr from-transparent via-white/10 to-transparent dark:via-black/10",
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "relative flex items-center justify-center",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
            className:
              "absolute w-3 h-3 bg-white/90 dark:bg-slate-800/90 rounded-full animate-pulse",
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
            className:
              "w-6 h-6 border-2 border-white/80 dark:border-slate-800/80 rounded-full flex items-center justify-center",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Sparkles, {
              className: "w-3 h-3 text-white/90 dark:text-slate-800/90",
            }),
          }),
        ],
      }),
    ],
  });
}
function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(DropdownMenu, {
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(DropdownMenuTrigger, {
        asChild: true,
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, {
          variant: "ghost",
          size: "sm",
          className: "w-9 h-9 p-0",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Sun, {
              className:
                "h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0",
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Moon, {
              className:
                "absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100",
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
              className: "sr-only",
              children: "Toggle theme",
            }),
          ],
        }),
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(DropdownMenuContent, {
        align: "end",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(DropdownMenuItem, {
            onClick: () => setTheme("light"),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Sun, {
                className: "mr-2 h-4 w-4",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                children: "Light",
              }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(DropdownMenuItem, {
            onClick: () => setTheme("dark"),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Moon, {
                className: "mr-2 h-4 w-4",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                children: "Dark",
              }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(DropdownMenuItem, {
            onClick: () => setTheme("system"),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Monitor, {
                className: "mr-2 h-4 w-4",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                children: "System",
              }),
            ],
          }),
        ],
      }),
    ],
  });
}
function VoteColumn({ points, onUp, onDown, voted }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.div, {
    className: "flex flex-col items-center gap-2 min-w-[50px]",
    whileHover: { scale: 1.02 },
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(motion.div, {
        whileHover: { scale: 1.05 },
        whileTap: { scale: 0.95 },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
          variant: voted === 1 ? "default" : "outline",
          size: "sm",
          className: `w-10 h-8 rounded transition-all duration-200 ${
            voted === 1
              ? "bg-slate-700 hover:bg-slate-800 text-white border-slate-700 dark:bg-slate-300 dark:hover:bg-slate-200 dark:text-slate-900 dark:border-slate-300"
              : "hover:bg-slate-100 hover:border-slate-400 text-slate-600 border-slate-300 dark:hover:bg-slate-700 dark:hover:border-slate-500 dark:text-slate-400 dark:border-slate-600"
          }`,
          onClick: onUp,
          "aria-label": "Upvote",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowBigUp, {
            className: "w-4 h-4",
          }),
        }),
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        motion.div,
        {
          className:
            "text-sm font-semibold tabular-nums text-center text-slate-700 dark:text-slate-300",
          initial: { scale: 1.1 },
          animate: { scale: 1 },
          transition: { duration: 0.2 },
          children: formatNumber(points),
        },
        points
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(motion.div, {
        whileHover: { scale: 1.05 },
        whileTap: { scale: 0.95 },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
          variant: voted === -1 ? "destructive" : "outline",
          size: "sm",
          className: `w-10 h-8 rounded transition-all duration-200 ${
            voted === -1
              ? "bg-red-600 hover:bg-red-700 text-white border-red-600"
              : "hover:bg-slate-100 hover:border-slate-400 text-slate-600 border-slate-300 dark:hover:bg-slate-700 dark:hover:border-slate-500 dark:text-slate-400 dark:border-slate-600"
          }`,
          onClick: onDown,
          "aria-label": "Downvote",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowBigDown, {
            className: "w-4 h-4",
          }),
        }),
      }),
    ],
  });
}
function ItemCard({
  item,
  onVote,
  onAddComment,
  onDeleteComment,
  onRequireAuth,
  currentUser,
  index,
}) {
  const meta = TYPE_META[item.type] || {
    icon: null,
    label: item.type,
    color: "text-slate-600 dark:text-slate-400",
    bg: "bg-slate-100 dark:bg-slate-700",
  };
  const [voted, setVoted] = reactExports.useState(0);
  const [commentsOpen, setCommentsOpen] = reactExports.useState(false);
  const [commentText, setCommentText] = reactExports.useState("");
  const [showAllComments, setShowAllComments] = reactExports.useState(false);
  const isAuthed = !!currentUser;
  const domain = domainFromUrl(item.url);
  const handleVote = (dir) => {
    let delta = 0;
    if (dir === 1) {
      delta = voted === 1 ? -1 : voted === -1 ? 2 : 1;
      setVoted(voted === 1 ? 0 : 1);
    } else {
      delta = voted === -1 ? 1 : voted === 1 ? -2 : -1;
      setVoted(voted === -1 ? 0 : -1);
    }
    onVote(item.id, delta);
  };
  const handleCopyUrl = async () => {
    const urlToCopy = item.url || window.location.href;
    const result = await copyToClipboard(urlToCopy);
    if (result.success) {
      showSuccessToast("URL copied to clipboard!");
    } else {
      showInfoToast("Unable to copy URL. Please copy manually.");
    }
  };
  const handleCopyText = async () => {
    let textToCopy = "";
    if (item.type === "quote") {
      textToCopy = `"${item.title}"

— ${item.author || item.content}`;
    } else if (item.type === "book") {
      textToCopy = `${item.title}
by ${item.author}

${item.content}`;
    } else if (item.type === "prompt") {
      textToCopy = `${item.title}

${item.content}`;
    }
    const result = await copyToClipboard(textToCopy);
    if (result.success) {
      showSuccessToast("Text copied to clipboard!");
    } else {
      showInfoToast("Unable to copy text. Please copy manually.");
    }
  };
  const handleAddComment = () => {
    if (!isAuthed) {
      onRequireAuth?.();
      return;
    }
    const text = commentText.trim();
    if (!text) return;
    onAddComment(item.id, {
      id: Date.now(),
      user: `@${currentUser.username}`,
      userId: currentUser.id,
      text,
      createdAt: Date.now(),
      createdBy: `@${currentUser.username}`,
    });
    setCommentText("");
    showSuccessToast("Comment added!");
  };
  const handleDeleteComment = (commentId) => {
    onDeleteComment(item.id, commentId);
    showSuccessToast("Comment deleted!");
  };
  const openInChatGPT = () => {
    const prompt = encodeURIComponent(`${item.title}

${item.content}`);
    window.open(`https://chat.openai.com/?q=${prompt}`, "_blank");
  };
  const openInPerplexity = () => {
    const prompt = encodeURIComponent(`${item.title}

${item.content}`);
    window.open(`https://www.perplexity.ai/?q=${prompt}`, "_blank");
  };
  console.log("Rendering ItemCard for item:", item);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(motion.div, {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.3, delay: index * 0.05 },
    className: "w-full",
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card, {
      className:
        "group hover:shadow-md transition-all duration-200 border border-slate-200 bg-white dark:border-slate-700 dark:bg-slate-800",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent, {
        className: "p-4",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "flex items-start gap-4",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(VoteColumn, {
                points: item.points,
                onUp: () => handleVote(1),
                onDown: () => handleVote(-1),
                voted,
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "flex-1 min-w-0 space-y-3",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center gap-2 flex-wrap",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(Badge, {
                        className: `${meta.bg} ${meta.color} border px-2 py-1 text-xs`,
                        children: [
                          meta.icon,
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                            className: "ml-1",
                            children: meta.label,
                          }),
                        ],
                      }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(Badge, {
                        variant: "outline",
                        className:
                          "capitalize px-2 py-1 text-xs border-slate-300 text-slate-600 dark:border-slate-600 dark:text-slate-400",
                        children: [
                          CATEGORIES.find((c) => c._id === item.category)?.icon,
                          " ",
                          item.category,
                        ],
                      }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                        className:
                          "flex items-center gap-2 text-xs text-slate-500 dark:text-slate-400 ml-auto",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                            className: "font-medium hidden sm:inline",
                            children: item.user,
                          }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                            className: "hidden sm:inline",
                            children: "•",
                          }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", {
                            className: "hidden sm:inline",
                            children: [timeAgo(item.createdAt), " ago"],
                          }),
                        ],
                      }),
                    ],
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                    className:
                      "flex items-center gap-2 text-xs text-slate-500 dark:text-slate-400 sm:hidden",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                        className: "font-medium",
                        children: item.user,
                      }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                        children: "•",
                      }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", {
                        children: [timeAgo(item.createdAt), " ago"],
                      }),
                    ],
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                    className: "space-y-1",
                    children:
                      item.type === "article" || item.type === "video"
                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs("a", {
                            href: item.url,
                            target: "_blank",
                            rel: "noreferrer",
                            className: "block group/link",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", {
                                className:
                                  "text-base sm:text-lg font-semibold leading-tight text-slate-900 dark:text-slate-100 group-hover/link:text-slate-700 dark:group-hover/link:text-slate-300 transition-colors duration-200",
                                children: item.title,
                              }),
                              domain &&
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", {
                                  className:
                                    "text-xs text-slate-600 dark:text-slate-400 font-medium",
                                  children: ["🔗 ", domain],
                                }),
                            ],
                          })
                        : /* @__PURE__ */ jsxRuntimeExports.jsx("h2", {
                            className:
                              "text-base sm:text-lg font-semibold leading-tight text-slate-900 dark:text-slate-100",
                            children: item.title,
                          }),
                  }),
                  item.content &&
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                      className: "prose prose-sm max-w-none",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", {
                        className:
                          "text-slate-700 dark:text-slate-300 leading-relaxed text-sm",
                        children: item.content,
                      }),
                    }),
                  item.author &&
                    (item.type === "book" || item.type === "quote") &&
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", {
                      className:
                        "text-sm text-slate-600 dark:text-slate-400 font-medium",
                      children: ["— ", item.author],
                    }),
                  item.type === "prompt" &&
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className: "flex gap-2 pt-2",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, {
                          size: "sm",
                          variant: "outline",
                          onClick: openInChatGPT,
                          className:
                            "flex items-center gap-2 text-xs border-green-300 hover:bg-green-50 hover:border-green-400 dark:border-green-600 dark:hover:bg-green-900 dark:hover:border-green-500",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Bot, {
                              className: "w-3 h-3",
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                              children: "Try in ChatGPT",
                            }),
                          ],
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, {
                          size: "sm",
                          variant: "outline",
                          onClick: openInPerplexity,
                          className:
                            "flex items-center gap-2 text-xs border-blue-300 hover:bg-blue-50 hover:border-blue-400 dark:border-blue-600 dark:hover:bg-blue-900 dark:hover:border-blue-500",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Search, {
                              className: "w-3 h-3",
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                              children: "Try in Perplexity",
                            }),
                          ],
                        }),
                      ],
                    }),
                  item.tags?.length > 0 &&
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                      className: "flex flex-wrap gap-1",
                      children: item.tags.map((tag) =>
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                          Badge,
                          {
                            variant: "secondary",
                            className:
                              "px-2 py-0.5 bg-slate-100 hover:bg-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 transition-colors cursor-pointer text-xs text-slate-600 dark:text-slate-300",
                            children: ["#", tag],
                          },
                          tag
                        )
                      ),
                    }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                    className:
                      "flex items-center justify-between pt-2 border-t border-slate-100 dark:border-slate-700",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className: "flex items-center gap-4",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.button, {
                          whileHover: { scale: 1.02 },
                          whileTap: { scale: 0.98 },
                          className:
                            "flex items-center gap-1 text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 transition-colors",
                          onClick: () => setCommentsOpen(!commentsOpen),
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              MessageSquare,
                              { className: "w-4 h-4" }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                              className: "text-xs font-medium",
                              children: item.comments?.length || 0,
                            }),
                            commentsOpen
                              ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  ChevronUp,
                                  { className: "w-3 h-3" }
                                )
                              : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  ChevronDown,
                                  { className: "w-3 h-3" }
                                ),
                          ],
                        }),
                        (item.type === "video" || item.type === "article") &&
                          item.url &&
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            motion.button,
                            {
                              whileHover: { scale: 1.02 },
                              whileTap: { scale: 0.98 },
                              className:
                                "flex items-center gap-1 text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 transition-colors",
                              onClick: handleCopyUrl,
                              title: "Copy URL",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(Link2, {
                                  className: "w-4 h-4",
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                                  className:
                                    "text-xs font-medium hidden sm:inline",
                                  children: "Copy URL",
                                }),
                              ],
                            }
                          ),
                        (item.type === "book" ||
                          item.type === "prompt" ||
                          item.type === "quote") &&
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            motion.button,
                            {
                              whileHover: { scale: 1.02 },
                              whileTap: { scale: 0.98 },
                              className:
                                "flex items-center gap-1 text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 transition-colors",
                              onClick: handleCopyText,
                              title: "Copy Text",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  FileText,
                                  { className: "w-4 h-4" }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                                  className:
                                    "text-xs font-medium hidden sm:inline",
                                  children: "Copy Text",
                                }),
                              ],
                            }
                          ),
                      ],
                    }),
                  }),
                ],
              }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, {
            children:
              commentsOpen &&
              /* @__PURE__ */ jsxRuntimeExports.jsx(motion.div, {
                initial: { opacity: 0, height: 0 },
                animate: { opacity: 1, height: "auto" },
                exit: { opacity: 0, height: 0 },
                transition: { duration: 0.2 },
                className:
                  "mt-4 pt-4 border-t border-slate-100 dark:border-slate-700",
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                  className: "space-y-3",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("h4", {
                      className:
                        "text-sm font-medium text-slate-800 dark:text-slate-200",
                      children: [
                        "Comments (",
                        item.comments === null ? 0 : item.comments.length,
                        ")",
                      ],
                    }),
                    item.comments === null || item.comments.length === 0
                      ? /* @__PURE__ */ jsxRuntimeExports.jsx("p", {
                          className:
                            "text-slate-500 dark:text-slate-400 text-center py-4 text-sm",
                          children: "No comments yet. Start the conversation!",
                        })
                      : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                          className: "space-y-3",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                              className: "space-y-3",
                              children: (showAllComments
                                ? item.comments
                                : item.comments.slice(0, 3)
                              ).map((comment) =>
                                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                  "div",
                                  {
                                    className:
                                      "flex gap-3 p-3 bg-slate-50 dark:bg-slate-700 rounded-lg",
                                    children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "div",
                                        {
                                          className:
                                            "w-7 h-7 rounded-full bg-slate-400 dark:bg-slate-600 flex items-center justify-center text-white font-medium text-xs flex-shrink-0",
                                          children: comment?.user
                                            ? comment.user
                                                .replace("@", "")
                                                .slice(0, 2)
                                                .toUpperCase()
                                            : "NA",
                                        }
                                      ),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                        "div",
                                        {
                                          className: "flex-1 min-w-0",
                                          children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                              "div",
                                              {
                                                className:
                                                  "flex items-center gap-2 mb-1",
                                                children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    "span",
                                                    {
                                                      className:
                                                        "font-medium text-slate-800 dark:text-slate-200 text-sm",
                                                      children:
                                                        comment?.user ||
                                                        "Unknown",
                                                    }
                                                  ),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    "span",
                                                    {
                                                      className:
                                                        "text-slate-400",
                                                      children: "•",
                                                    }
                                                  ),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                    "span",
                                                    {
                                                      className:
                                                        "text-xs text-slate-500 dark:text-slate-400",
                                                      children: [
                                                        timeAgo(
                                                          comment?.createdAt
                                                        ),
                                                        " ago",
                                                      ],
                                                    }
                                                  ),
                                                  currentUser &&
                                                    comment?.createdBy ===
                                                      `@${currentUser.username}` &&
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                      Button,
                                                      {
                                                        size: "sm",
                                                        variant: "ghost",
                                                        onClick: () =>
                                                          handleDeleteComment(
                                                            comment.id
                                                          ),
                                                        className:
                                                          "ml-auto p-1 h-auto text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900",
                                                        children:
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            Trash2,
                                                            {
                                                              className:
                                                                "w-3 h-3",
                                                            }
                                                          ),
                                                      }
                                                    ),
                                                ],
                                              }
                                            ),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                              "p",
                                              {
                                                className:
                                                  "text-slate-700 dark:text-slate-300 text-sm break-words",
                                                children: comment?.text || "",
                                              }
                                            ),
                                          ],
                                        }
                                      ),
                                    ],
                                  },
                                  comment?.id
                                )
                              ),
                            }),
                            item.comments.length > 3 &&
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                                className: "flex justify-center pt-2",
                                children:
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                    Button,
                                    {
                                      variant: "ghost",
                                      size: "sm",
                                      onClick: () =>
                                        setShowAllComments(!showAllComments),
                                      className:
                                        "text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 flex items-center gap-1",
                                      children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          Ellipsis,
                                          { className: "w-4 h-4" }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                          "span",
                                          {
                                            className: "text-xs",
                                            children: showAllComments
                                              ? "Show Less"
                                              : `Show ${
                                                  item.comments.length - 3
                                                } more comments`,
                                          }
                                        ),
                                      ],
                                    }
                                  ),
                              }),
                          ],
                        }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className: "flex gap-3 pt-2",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                          className:
                            "w-7 h-7 rounded-full bg-slate-500 dark:bg-slate-400 flex items-center justify-center text-white dark:text-slate-900 font-medium text-xs flex-shrink-0",
                          children: currentUser
                            ? currentUser.username.slice(0, 2).toUpperCase()
                            : "?",
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                          className: "flex-1 flex gap-2",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                              value: commentText,
                              onChange: (e) => setCommentText(e.target.value),
                              placeholder: isAuthed
                                ? "Add a comment..."
                                : "Log in to comment",
                              disabled: !isAuthed,
                              className:
                                "flex-1 border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400 rounded text-sm h-8",
                              onKeyDown: (e) => {
                                if (e.key === "Enter" && !e.shiftKey) {
                                  e.preventDefault();
                                  handleAddComment();
                                }
                              },
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                              onClick: handleAddComment,
                              disabled: !isAuthed || !commentText.trim(),
                              size: "sm",
                              className:
                                "bg-slate-700 hover:bg-slate-800 dark:bg-slate-300 dark:hover:bg-slate-200 text-white dark:text-slate-900 px-3 rounded h-8 flex-shrink-0",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                Send,
                                { className: "w-3 h-3" }
                              ),
                            }),
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              }),
          }),
        ],
      }),
    }),
  });
}
function ContentTypeFilter({ activeType, onTypeChange }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
    className: "mb-4",
    children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
      className: "flex flex-wrap gap-2",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
          variant: activeType === "all" ? "default" : "outline",
          size: "sm",
          onClick: () => onTypeChange("all"),
          className: `transition-all duration-200 ${
            activeType === "all"
              ? "bg-slate-800 text-white border-slate-800 dark:bg-slate-200 dark:text-slate-900 dark:border-slate-200"
              : "hover:bg-slate-100 border-slate-300 dark:hover:bg-slate-700 dark:border-slate-600"
          }`,
          children: "All Types",
        }),
        Object.entries(TYPE_META).map(([key, meta]) =>
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Button,
            {
              variant: activeType === key ? "default" : "outline",
              size: "sm",
              onClick: () => onTypeChange(key),
              className: `flex items-center gap-1 transition-all duration-200 ${
                activeType === key
                  ? "bg-slate-800 text-white border-slate-800 dark:bg-slate-200 dark:text-slate-900 dark:border-slate-200"
                  : "hover:bg-slate-100 border-slate-300 dark:hover:bg-slate-700 dark:border-slate-600"
              }`,
              children: [
                meta.icon,
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                  className: "text-xs",
                  children: meta.label,
                }),
              ],
            },
            key
          )
        ),
      ],
    }),
  });
}
function Sidebar({
  activeCategory,
  setActiveCategory,
  onCategoryChange,
  isLoading,
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
    className: "space-y-4",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "space-y-2",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", {
            className:
              "text-sm font-semibold text-slate-700 dark:text-slate-300 uppercase tracking-wider",
            children: "Categories",
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
            className: "space-y-1",
            children: CATEGORIES.map((category) =>
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                motion.div,
                {
                  whileHover: { scale: 1.01 },
                  whileTap: { scale: 0.99 },
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                    variant:
                      activeCategory === category.id ? "default" : "ghost",
                    className: `w-full justify-start text-left h-auto p-3 rounded transition-all duration-200 ${
                      activeCategory === category.id
                        ? "bg-slate-800 text-white shadow-sm dark:bg-slate-200 dark:text-slate-900"
                        : "hover:bg-slate-100 text-slate-700 dark:hover:bg-slate-700 dark:text-slate-300"
                    }`,
                    onClick: () => onCategoryChange(category.id),
                    disabled: isLoading,
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className: "flex items-center gap-2",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                          className: "text-base",
                          children: category.icon,
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                          className: "font-medium text-sm",
                          children: category.name,
                        }),
                        isLoading &&
                          activeCategory === category.id &&
                          /* @__PURE__ */ jsxRuntimeExports.jsx(LoaderCircle, {
                            className: "w-3 h-3 animate-spin ml-auto",
                          }),
                      ],
                    }),
                  }),
                },
                category._id
              )
            ),
          }),
        ],
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Card, {
        className:
          "bg-slate-50 border-slate-200 dark:bg-slate-800 dark:border-slate-700",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent, {
          className: "p-4",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", {
              className:
                "font-semibold text-slate-800 dark:text-slate-200 mb-2 text-sm",
              children: "💡 Community Tips",
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
              className: "space-y-2 text-xs text-slate-600 dark:text-slate-400",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                  className: "flex gap-2",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                      className: "text-slate-500",
                      children: "•",
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                      children:
                        "Share crisp, compelling titles that capture attention",
                    }),
                  ],
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                  className: "flex gap-2",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                      className: "text-slate-500",
                      children: "•",
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                      children:
                        "For prompts: include role, constraints, and expected output",
                    }),
                  ],
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                  className: "flex gap-2",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                      className: "text-slate-500",
                      children: "•",
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                      children:
                        "Vote based on value and quality, not just popularity",
                    }),
                  ],
                }),
              ],
            }),
          ],
        }),
      }),
    ],
  });
}
function MobileCategorySidebar({
  activeCategory,
  onCategoryChange,
  isLoading,
}) {
  const [open, setOpen] = reactExports.useState(false);
  const handleCategoryChange = (categoryId) => {
    onCategoryChange(categoryId);
    setOpen(false);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Sheet, {
    open,
    onOpenChange: setOpen,
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(SheetTrigger, {
        asChild: true,
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, {
          variant: "outline",
          size: "sm",
          className: "lg:hidden flex items-center gap-2",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Menu$1, {
              className: "w-4 h-4",
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
              className: "text-sm",
              children: "Categories",
            }),
          ],
        }),
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(SheetContent, {
        side: "left",
        className: "w-80 dark:bg-slate-800",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(SheetHeader, {
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(SheetTitle, {
                className: "dark:text-slate-200",
                children: "Categories",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(SheetDescription, {
                className: "dark:text-slate-400",
                children: "Select a category to filter inspirational content",
              }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
            className: "mt-6",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
              className: "space-y-2",
              children: CATEGORIES.map((category) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  motion.div,
                  {
                    whileHover: { scale: 1.01 },
                    whileTap: { scale: 0.99 },
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                      variant:
                        activeCategory === category.id ? "default" : "ghost",
                      className: `w-full justify-start text-left h-auto p-3 rounded transition-all duration-200 ${
                        activeCategory === category.id
                          ? "bg-slate-800 text-white shadow-sm dark:bg-slate-200 dark:text-slate-900"
                          : "hover:bg-slate-100 text-slate-700 dark:hover:bg-slate-700 dark:text-slate-300"
                      }`,
                      onClick: () => handleCategoryChange(category.id),
                      disabled: isLoading,
                      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                        className: "flex items-center gap-2",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                            className: "text-base",
                            children: category.icon,
                          }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                            className: "font-medium text-sm",
                            children: category.name,
                          }),
                          isLoading &&
                            activeCategory === category.id &&
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              LoaderCircle,
                              { className: "w-3 h-3 animate-spin ml-auto" }
                            ),
                        ],
                      }),
                    }),
                  },
                  category._id
                )
              ),
            }),
          }),
        ],
      }),
    ],
  });
}
function Pagination({ currentPage, totalPages, onPageChange, isLoading }) {
  const getPageNumbers = () => {
    const pages = [];
    const showPages = 5;
    let start = Math.max(1, currentPage - Math.floor(showPages / 2));
    let end = Math.min(totalPages, start + showPages - 1);
    if (end - start < showPages - 1) {
      start = Math.max(1, end - showPages + 1);
    }
    for (let i = start; i <= end; i++) {
      pages.push(i);
    }
    return pages;
  };
  if (totalPages <= 1) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
    className: "flex items-center justify-center gap-1 mt-8",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
        variant: "outline",
        size: "sm",
        onClick: () => onPageChange(currentPage - 1),
        disabled: currentPage === 1 || isLoading,
        className: "w-8 h-8 rounded border-slate-300 dark:border-slate-600",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronLeft, {
          className: "w-3 h-3",
        }),
      }),
      getPageNumbers().map((page) =>
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: page === currentPage ? "default" : "outline",
            size: "sm",
            onClick: () => onPageChange(page),
            disabled: isLoading,
            className: `w-8 h-8 rounded ${
              page === currentPage
                ? "bg-slate-800 text-white border-slate-800 dark:bg-slate-200 dark:text-slate-900 dark:border-slate-200"
                : "border-slate-300 hover:bg-slate-100 dark:border-slate-600 dark:hover:bg-slate-700"
            }`,
            children: page,
          },
          page
        )
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
        variant: "outline",
        size: "sm",
        onClick: () => onPageChange(currentPage + 1),
        disabled: currentPage === totalPages || isLoading,
        className: "w-8 h-8 rounded border-slate-300 dark:border-slate-600",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, {
          className: "w-3 h-3",
        }),
      }),
    ],
  });
}
function Header({ currentUser, onOpenAuth, onOpenCreateModal }) {
  console.log("Rendering Header with currentUser:", currentUser);
  if (currentUser) {
    localStorage.setItem("inspirelens-theme", currentUser.mode);
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
    className: "bg-slate-800 dark:bg-slate-900 text-white rounded-lg shadow-sm",
    children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
      className: "px-4 py-4",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "flex items-center justify-between",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.div, {
            initial: { opacity: 0, x: -20 },
            animate: { opacity: 1, x: 0 },
            transition: { duration: 0.5 },
            className: "flex items-center gap-3",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(InspireLensLogo, {
                size: "md",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", {
                    className: "text-xl font-bold",
                    children: "InspireLens",
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", {
                    className: "text-slate-300 dark:text-slate-400 text-sm",
                    children: "Discover • Share • Grow Together",
                  }),
                ],
              }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.div, {
            initial: { opacity: 0, x: 20 },
            animate: { opacity: 1, x: 0 },
            transition: { duration: 0.5, delay: 0.1 },
            className: "flex items-center gap-2",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeToggle, {}),
              currentUser &&
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, {
                  onClick: onOpenCreateModal,
                  size: "sm",
                  className:
                    "bg-slate-700 text-white hover:bg-slate-600 dark:bg-slate-700 dark:hover:bg-slate-600 border-slate-600 rounded px-4",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, {
                      className: "w-4 h-4 mr-1",
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                      className: "hidden sm:inline",
                      children: "Create",
                    }),
                  ],
                }),
              !currentUser
                ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    jsxRuntimeExports.Fragment,
                    {
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                          variant: "ghost",
                          size: "sm",
                          onClick: () => onOpenAuth("login"),
                          className:
                            "text-white hover:bg-slate-700 dark:hover:bg-slate-800 rounded px-3",
                          children: "Log in",
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                          size: "sm",
                          onClick: () => onOpenAuth("signup"),
                          className:
                            "bg-white text-slate-800 hover:bg-slate-100 dark:bg-slate-100 dark:text-slate-900 dark:hover:bg-slate-200 rounded px-3",
                          children: "Sign up",
                        }),
                      ],
                    }
                  )
                : /* @__PURE__ */ jsxRuntimeExports.jsxs(DropdownMenu, {
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        DropdownMenuTrigger,
                        {
                          asChild: true,
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            Button,
                            {
                              variant: "ghost",
                              size: "sm",
                              className:
                                "bg-slate-700 text-white hover:bg-slate-600 dark:bg-slate-700 dark:hover:bg-slate-600 rounded px-3 h-8",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                "div",
                                {
                                  className: "flex items-center gap-2",
                                  children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      "div",
                                      {
                                        className:
                                          "w-6 h-6 rounded-full bg-slate-600 dark:bg-slate-500 grid place-items-center text-white font-medium text-xs",
                                        children: currentUser?.username
                                          ? currentUser.username
                                              .slice(0, 2)
                                              .toUpperCase()
                                          : currentUser?.name
                                              .slice(0, 2)
                                              .toUpperCase(),
                                      }
                                    ),
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                      "span",
                                      {
                                        className:
                                          "font-medium text-sm hidden sm:inline",
                                        children: [
                                          "@",
                                          currentUser.username ||
                                            currentUser.name,
                                        ],
                                      }
                                    ),
                                  ],
                                }
                              ),
                            }
                          ),
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        DropdownMenuContent,
                        {
                          align: "end",
                          className:
                            "w-40 bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 shadow-lg rounded-lg",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            DropdownMenuItem,
                            {
                              onClick: () => onOpenAuth("logout"),
                              className:
                                "text-red-600 focus:text-red-600 focus:bg-red-50 dark:focus:bg-red-900 rounded",
                              children: "Log out",
                            }
                          ),
                        }
                      ),
                    ],
                  }),
            ],
          }),
        ],
      }),
    }),
  });
}
function CreateContentModal({
  open,
  onClose,
  onSubmit,
  currentUser,
  onRequireAuth,
}) {
  const [step, setStep] = reactExports.useState(1);
  const [type, setType] = reactExports.useState("prompt");
  const [title, setTitle] = reactExports.useState("");
  const [quote, setQuote] = reactExports.useState("");
  const [author, setAuthor] = reactExports.useState("");
  const [promptDetails, setPromptDetails] = reactExports.useState("");
  const [url, setUrl] = reactExports.useState("");
  const [summary, setSummary] = reactExports.useState("");
  const [category, setCategory] = reactExports.useState("");
  const [tags, setTags] = reactExports.useState("");
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [errors, setErrors2] = reactExports.useState({});
  const totalSteps = 3;
  const validateForm = () => {
    const newErrors = {};
    if (category === "") {
      newErrors.category = "Category is required";
    }
    if (type === "quote") {
      if (!quote.trim()) {
        newErrors.quote = "Quote is required";
      } else if (quote.trim().length < 10) {
        newErrors.quote = "Quote should be at least 10 characters";
      } else if (quote.trim().length > 500) {
        newErrors.quote = "Quote should not exceed 500 characters";
      }
      if (!author.trim()) {
        newErrors.author = "Author is required";
      } else if (author.trim().length < 2) {
        newErrors.author = "Author name must be at least 2 characters";
      }
    }
    if (type === "prompt") {
      if (!promptDetails.trim()) {
        newErrors.promptDetails = "AI prompt details are required";
      } else if (promptDetails.trim().length < 20) {
        newErrors.promptDetails = "Prompt should be at least 20 characters";
      } else if (promptDetails.trim().length > 2e3) {
        newErrors.promptDetails = "Prompt should not exceed 2000 characters";
      }
    }
    if (type === "article" || type === "video") {
      if (!title.trim()) {
        newErrors.title = "Title is required";
      } else if (title.length < 5) {
        newErrors.title = "Title must be at least 5 characters";
      }
      if (!url.trim()) {
        newErrors.url = "URL is required";
      } else if (!validateUrl(url.trim())) {
        newErrors.url =
          "Please enter a valid URL starting with http:// or https://";
      }
    }
    if (type === "book") {
      if (!title.trim()) {
        newErrors.title = "Title is required";
      } else if (title.length < 5) {
        newErrors.title = "Title must be at least 5 characters";
      }
      if (!author.trim()) {
        newErrors.author = "Author is required";
      } else if (author.trim().length < 2) {
        newErrors.author = "Author name must be at least 2 characters";
      }
      if (url && url.trim() && !validateUrl(url.trim())) {
        newErrors.url =
          "Please enter a valid URL starting with http:// or https://";
      }
      if (!summary.trim()) {
        newErrors.summary = "Summary is required";
      } else if (summary.trim().length < 20) {
        newErrors.summary = "Summary should be at least 20 characters";
      } else if (summary.trim().length > 1e3) {
        newErrors.summary = "Summary should not exceed 1000 characters";
      }
    }
    return newErrors;
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!currentUser) {
      onRequireAuth?.();
      return;
    }
    const formErrors = validateForm();
    if (Object.keys(formErrors).length > 0) {
      setErrors2(formErrors);
      return;
    }
    setIsLoading(true);
    setErrors2({});
    await simulateDelay(500);
    let content = "";
    let finalAuthor = "";
    if (type === "quote") {
      content = quote;
      finalAuthor = author;
    } else if (type === "prompt") {
      content = promptDetails;
    } else if (type === "book") {
      content = summary;
      finalAuthor = author;
    }
    const payload = {
      userId: currentUser.id,
      type,
      title: title.trim(),
      content: content.trim(),
      author: finalAuthor.trim(),
      url: url.trim(),
      category,
      tags: tags
        .split(",")
        .map((t) => t.trim().toLowerCase())
        .filter(Boolean),
    };
    console.log("Submitted payload:", payload);
    const response = await ApiService.createContent(payload);
    console.log("Created content:", response.id);
    if (response.id === void 0 || response.id === null) {
      showErrorToast(
        response.message || "Failed to create content. Please try again."
      );
      setIsLoading(false);
      return;
    }
    const newItem = {
      id: response.id || "",
      // Use the ID returned from the API
      ...payload,
      points: 0,
      views: 0,
      comments: [],
      user: `@${currentUser.username}`,
      createdAt: Date.now(),
    };
    console.log("New item to add:", newItem);
    onSubmit(newItem);
    setStep(1);
    setTitle("");
    setQuote("");
    setAuthor("");
    setPromptDetails("");
    setUrl("");
    setSummary("");
    setTags("");
    setType("prompt");
    setCategory("");
    showSuccessToast("Content created successfully!");
    setIsLoading(false);
    onClose();
  };
  const handleClose = () => {
    if (!isLoading) {
      setStep(1);
      setType("prompt");
      setTitle("");
      setQuote("");
      setAuthor("");
      setPromptDetails("");
      setUrl("");
      setSummary("");
      setCategory("");
      setTags("");
      setErrors2({});
      onClose();
    }
  };
  const handleNext = () => {
    if (step < totalSteps) {
      setStep(step + 1);
    }
  };
  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };
  const getStepTitle = () => {
    switch (step) {
      case 1:
        return "Choose Content Type";
      case 2:
        return "Add Your Content";
      case 3:
        return "Categorize & Share";
      default:
        return "Create Content";
    }
  };
  const getStepDescription = () => {
    switch (step) {
      case 1:
        return "What type of inspirational content would you like to share?";
      case 2:
        return "Fill in the details for your content";
      case 3:
        return "Choose a category and add tags to help others discover your content";
      default:
        return "";
    }
  };
  const renderTypeSpecificFields = () => {
    switch (type) {
      case "quote":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
          className: "space-y-4",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
              className: "space-y-2",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                  htmlFor: "quote",
                  className:
                    "text-sm font-semibold text-slate-800 dark:text-slate-200",
                  children: "Quote Content *",
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Textarea, {
                  id: "quote",
                  rows: 4,
                  value: quote,
                  onChange: (e) => {
                    setQuote(e.target.value);
                    if (errors.quote)
                      setErrors2((prev) => ({ ...prev, quote: null }));
                  },
                  placeholder: "Enter the inspiring quote...",
                  className: `border rounded-lg transition-colors resize-none text-base ${
                    errors.quote
                      ? "border-red-300 focus:border-red-500"
                      : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                  }`,
                  disabled: isLoading,
                }),
                errors.quote &&
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                    initial: { opacity: 0, y: -10 },
                    animate: { opacity: 1, y: 0 },
                    className: "text-red-600 text-sm flex items-center gap-1",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                        className: "w-3 h-3",
                      }),
                      errors.quote,
                    ],
                  }),
              ],
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
              className: "space-y-2",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                  htmlFor: "author",
                  className:
                    "text-sm font-semibold text-slate-800 dark:text-slate-200",
                  children: "Author *",
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                  id: "author",
                  value: author,
                  onChange: (e) => {
                    setAuthor(e.target.value);
                    if (errors.author)
                      setErrors2((prev) => ({ ...prev, author: null }));
                  },
                  placeholder: "Who said this quote?",
                  className: `h-12 border rounded-lg transition-colors text-base ${
                    errors.author
                      ? "border-red-300 focus:border-red-500"
                      : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                  }`,
                  disabled: isLoading,
                }),
                errors.author &&
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                    initial: { opacity: 0, y: -10 },
                    animate: { opacity: 1, y: 0 },
                    className: "text-red-600 text-sm flex items-center gap-1",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                        className: "w-3 h-3",
                      }),
                      errors.author,
                    ],
                  }),
              ],
            }),
          ],
        });
      case "prompt":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
          className: "space-y-2",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
              htmlFor: "promptDetails",
              className:
                "text-sm font-semibold text-slate-800 dark:text-slate-200",
              children: "AI Prompt Content *",
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Textarea, {
              id: "promptDetails",
              rows: 8,
              value: promptDetails,
              onChange: (e) => {
                setPromptDetails(e.target.value);
                if (errors.promptDetails)
                  setErrors2((prev) => ({ ...prev, promptDetails: null }));
              },
              placeholder:
                "Write your AI prompt here. Be specific about the role, context, instructions, and expected output format...",
              className: `border rounded-lg transition-colors resize-none text-base ${
                errors.promptDetails
                  ? "border-red-300 focus:border-red-500"
                  : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
              }`,
              disabled: isLoading,
            }),
            errors.promptDetails &&
              /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                initial: { opacity: 0, y: -10 },
                animate: { opacity: 1, y: 0 },
                className: "text-red-600 text-sm flex items-center gap-1",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                    className: "w-3 h-3",
                  }),
                  errors.promptDetails,
                ],
              }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
              className:
                "bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3",
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", {
                className: "text-xs text-blue-700 dark:text-blue-300",
                children: [
                  "💡 ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("strong", {
                    children: "Tip:",
                  }),
                  " Write your complete AI prompt here. Include the role, context, specific instructions, and expected output format for best results.",
                ],
              }),
            }),
          ],
        });
      case "article":
      case "video":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          jsxRuntimeExports.Fragment,
          {
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "space-y-2",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                    htmlFor: "title",
                    className:
                      "text-sm font-semibold text-slate-800 dark:text-slate-200",
                    children: "Title *",
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                    id: "title",
                    value: title,
                    onChange: (e) => {
                      setTitle(e.target.value);
                      if (errors.title)
                        setErrors2((prev) => ({ ...prev, title: null }));
                    },
                    placeholder:
                      "Enter a compelling title that captures attention...",
                    className: `h-12 border rounded-lg transition-colors text-base ${
                      errors.title
                        ? "border-red-300 focus:border-red-500"
                        : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                    }`,
                    disabled: isLoading,
                  }),
                  errors.title &&
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                      initial: { opacity: 0, y: -10 },
                      animate: { opacity: 1, y: 0 },
                      className: "text-red-600 text-sm flex items-center gap-1",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                          className: "w-3 h-3",
                        }),
                        errors.title,
                      ],
                    }),
                ],
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "space-y-2",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Label$1, {
                    htmlFor: "url",
                    className:
                      "text-sm font-semibold text-slate-800 dark:text-slate-200",
                    children: [
                      type === "article" ? "Article" : "Video",
                      " URL *",
                    ],
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                    id: "url",
                    type: "url",
                    value: url,
                    onChange: (e) => {
                      setUrl(e.target.value);
                      if (errors.url)
                        setErrors2((prev) => ({ ...prev, url: null }));
                    },
                    placeholder: `https://example.com/${
                      type === "article" ? "article" : "watch"
                    }`,
                    className: `h-12 border rounded-lg transition-colors text-base ${
                      errors.url
                        ? "border-red-300 focus:border-red-500"
                        : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                    }`,
                    disabled: isLoading,
                  }),
                  errors.url &&
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                      initial: { opacity: 0, y: -10 },
                      animate: { opacity: 1, y: 0 },
                      className: "text-red-600 text-sm flex items-center gap-1",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                          className: "w-3 h-3",
                        }),
                        errors.url,
                      ],
                    }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                    className:
                      "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-3",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", {
                      className: "text-xs text-green-700 dark:text-green-300",
                      children: [
                        "🔗 Share a link to an inspiring ",
                        type,
                        " that others will find valuable.",
                      ],
                    }),
                  }),
                ],
              }),
            ],
          }
        );
      case "book":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          jsxRuntimeExports.Fragment,
          {
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "space-y-2",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                    htmlFor: "title",
                    className:
                      "text-sm font-semibold text-slate-800 dark:text-slate-200",
                    children: "Title *",
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                    id: "title",
                    value: title,
                    onChange: (e) => {
                      setTitle(e.target.value);
                      if (errors.title)
                        setErrors2((prev) => ({ ...prev, title: null }));
                    },
                    placeholder:
                      "Enter a compelling title that captures attention...",
                    className: `h-12 border rounded-lg transition-colors text-base ${
                      errors.title
                        ? "border-red-300 focus:border-red-500"
                        : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                    }`,
                    disabled: isLoading,
                  }),
                  errors.title &&
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                      initial: { opacity: 0, y: -10 },
                      animate: { opacity: 1, y: 0 },
                      className: "text-red-600 text-sm flex items-center gap-1",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                          className: "w-3 h-3",
                        }),
                        errors.title,
                      ],
                    }),
                ],
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "space-y-4",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                        htmlFor: "author",
                        className:
                          "text-sm font-semibold text-slate-800 dark:text-slate-200",
                        children: "Author *",
                      }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                        id: "author",
                        value: author,
                        onChange: (e) => {
                          setAuthor(e.target.value);
                          if (errors.author)
                            setErrors2((prev) => ({ ...prev, author: null }));
                        },
                        placeholder: "Who wrote this book?",
                        className: `h-12 border rounded-lg transition-colors text-base ${
                          errors.author
                            ? "border-red-300 focus:border-red-500"
                            : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                        }`,
                        disabled: isLoading,
                      }),
                      errors.author &&
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                          initial: { opacity: 0, y: -10 },
                          animate: { opacity: 1, y: 0 },
                          className:
                            "text-red-600 text-sm flex items-center gap-1",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                              className: "w-3 h-3",
                            }),
                            errors.author,
                          ],
                        }),
                    ],
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                        htmlFor: "summary",
                        className:
                          "text-sm font-semibold text-slate-800 dark:text-slate-200",
                        children: "Summary & Key Insights *",
                      }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Textarea, {
                        id: "summary",
                        rows: 5,
                        value: summary,
                        onChange: (e) => {
                          setSummary(e.target.value);
                          if (errors.summary)
                            setErrors2((prev) => ({ ...prev, summary: null }));
                        },
                        placeholder:
                          "Share the key insights, main takeaways, and why this book is valuable...",
                        className: `border rounded-lg transition-colors resize-none text-base ${
                          errors.summary
                            ? "border-red-300 focus:border-red-500"
                            : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                        }`,
                        disabled: isLoading,
                      }),
                      errors.summary &&
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                          initial: { opacity: 0, y: -10 },
                          animate: { opacity: 1, y: 0 },
                          className:
                            "text-red-600 text-sm flex items-center gap-1",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                              className: "w-3 h-3",
                            }),
                            errors.summary,
                          ],
                        }),
                    ],
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                    className: "space-y-2",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                        htmlFor: "url",
                        className:
                          "text-sm font-semibold text-slate-800 dark:text-slate-200",
                        children: "Book Link (optional)",
                      }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                        id: "url",
                        type: "url",
                        value: url,
                        onChange: (e) => {
                          setUrl(e.target.value);
                          if (errors.url)
                            setErrors2((prev) => ({ ...prev, url: null }));
                        },
                        placeholder: "https://example.com/book-link",
                        className: `h-12 border rounded-lg transition-colors text-base ${
                          errors.url
                            ? "border-red-300 focus:border-red-500"
                            : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                        }`,
                        disabled: isLoading,
                      }),
                      errors.url &&
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                          initial: { opacity: 0, y: -10 },
                          animate: { opacity: 1, y: 0 },
                          className:
                            "text-red-600 text-sm flex items-center gap-1",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                              className: "w-3 h-3",
                            }),
                            errors.url,
                          ],
                        }),
                    ],
                  }),
                ],
              }),
            ],
          }
        );
      default:
        return null;
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Dialog, {
    open,
    onOpenChange: handleClose,
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContent, {
      className:
        "max-w-4xl p-0 overflow-hidden border-0 bg-white dark:bg-slate-800 shadow-xl rounded-xl max-h-[95vh] overflow-y-auto",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "relative",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className:
              "bg-gradient-to-r from-slate-800 via-slate-700 to-slate-800 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 p-6 text-white relative overflow-hidden",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                className:
                  "absolute inset-0 bg-gradient-to-r from-blue-600/10 via-purple-600/10 to-pink-600/10",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                className: "relative",
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs(DialogHeader, {
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className: "flex items-center gap-3 mb-2",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(InspireLensLogo, {
                          size: "md",
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(DialogTitle, {
                              className: "text-xl font-bold",
                              children: "Share Your Inspiration",
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              DialogDescription,
                              {
                                className:
                                  "text-slate-300 dark:text-slate-400 text-sm",
                                children:
                                  "Create content that inspires and empowers others",
                              }
                            ),
                          ],
                        }),
                      ],
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                      className: "flex items-center gap-2 mt-4",
                      children: Array.from({ length: totalSteps }, (_, i) =>
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                          "div",
                          {
                            className: "flex items-center",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                                className: `w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-all duration-300 ${
                                  i + 1 === step
                                    ? "bg-white text-slate-800 shadow-lg"
                                    : i + 1 < step
                                    ? "bg-green-500 text-white"
                                    : "bg-slate-600 dark:bg-slate-700 text-slate-300"
                                }`,
                                children:
                                  i + 1 < step
                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        Check,
                                        { className: "w-4 h-4" }
                                      )
                                    : i + 1,
                              }),
                              i < totalSteps - 1 &&
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                                  className: `w-12 h-0.5 mx-2 transition-all duration-300 ${
                                    i + 1 < step
                                      ? "bg-green-500"
                                      : "bg-slate-600 dark:bg-slate-700"
                                  }`,
                                }),
                            ],
                          },
                          i
                        )
                      ),
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className: "mt-3",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", {
                          className: "font-semibold text-lg",
                          children: getStepTitle(),
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", {
                          className:
                            "text-slate-300 dark:text-slate-400 text-sm",
                          children: getStepDescription(),
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("form", {
            onSubmit: handleSubmit,
            className: "p-6",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(AnimatePresence, {
                mode: "wait",
                children: [
                  step === 1 &&
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      motion.div,
                      {
                        initial: { opacity: 0, x: 20 },
                        animate: { opacity: 1, x: 0 },
                        exit: { opacity: 0, x: -20 },
                        transition: { duration: 0.3 },
                        className: "space-y-6",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                          className:
                            "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4",
                          children: Object.entries(TYPE_META).map(
                            ([key, meta]) =>
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                motion.div,
                                {
                                  whileHover: { scale: 1.02 },
                                  whileTap: { scale: 0.98 },
                                  children:
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                      Button,
                                      {
                                        type: "button",
                                        variant:
                                          type === key ? "default" : "outline",
                                        className: `w-full h-24 p-4 flex flex-col gap-2 transition-all duration-300 ${
                                          type === key
                                            ? "bg-slate-800 text-white border-slate-800 shadow-lg dark:bg-slate-200 dark:text-slate-900 dark:border-slate-200"
                                            : "hover:bg-slate-50 hover:border-slate-300 border-slate-200 dark:hover:bg-slate-700 dark:border-slate-600 dark:hover:border-slate-500"
                                        }`,
                                        onClick: () => setType(key),
                                        children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "div",
                                            {
                                              className: "text-2xl",
                                              children: meta.icon,
                                            }
                                          ),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "span",
                                            {
                                              className: "font-medium",
                                              children: meta.label,
                                            }
                                          ),
                                        ],
                                      }
                                    ),
                                },
                                key
                              )
                          ),
                        }),
                      },
                      "step1"
                    ),
                  step === 2 &&
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      motion.div,
                      {
                        initial: { opacity: 0, x: 20 },
                        animate: { opacity: 1, x: 0 },
                        exit: { opacity: 0, x: -20 },
                        transition: { duration: 0.3 },
                        className: "space-y-6",
                        children: renderTypeSpecificFields(),
                      },
                      "step2"
                    ),
                  step === 3 &&
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      motion.div,
                      {
                        initial: { opacity: 0, x: 20 },
                        animate: { opacity: 1, x: 0 },
                        exit: { opacity: 0, x: -20 },
                        transition: { duration: 0.3 },
                        className: "space-y-6",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                            className: "space-y-3",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                                className:
                                  "text-sm font-semibold text-slate-800 dark:text-slate-200",
                                children: "Choose a Category",
                              }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                                className:
                                  "grid grid-cols-2 sm:grid-cols-3 gap-3",
                                children: CATEGORIES.filter(
                                  (c) => c._id !== "all"
                                ).map((cat) =>
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    motion.div,
                                    {
                                      whileHover: { scale: 1.02 },
                                      whileTap: { scale: 0.98 },
                                      children:
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          Button,
                                          {
                                            type: "button",
                                            variant:
                                              category === cat.id
                                                ? "default"
                                                : "outline",
                                            className: `w-full h-16 p-3 flex flex-col items-center gap-1 transition-all duration-300 ${
                                              category === cat.id
                                                ? "bg-slate-800 text-white border-slate-800 shadow-lg dark:bg-slate-200 dark:text-slate-900 dark:border-slate-200"
                                                : "hover:bg-slate-50 border-slate-200 dark:hover:bg-slate-700 dark:border-slate-600"
                                            }`,
                                            onClick: () => setCategory(cat.id),
                                            children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "span",
                                                {
                                                  className: "text-lg",
                                                  children: cat.icon,
                                                }
                                              ),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "span",
                                                {
                                                  className:
                                                    "text-xs font-medium",
                                                  children: cat.name,
                                                }
                                              ),
                                            ],
                                          }
                                        ),
                                    },
                                    cat.id
                                  )
                                ),
                              }),
                            ],
                          }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                            className: "space-y-2",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                                htmlFor: "tags",
                                className:
                                  "text-sm font-semibold text-slate-800 dark:text-slate-200",
                                children: "Add Tags (optional)",
                              }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                                id: "tags",
                                value: tags,
                                onChange: (e) => setTags(e.target.value),
                                placeholder:
                                  "productivity, mindset, habits (separate with commas)",
                                className:
                                  "h-12 border rounded-lg transition-colors text-base border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400",
                                disabled: isLoading,
                              }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("p", {
                                className:
                                  "text-xs text-slate-500 dark:text-slate-400",
                                children:
                                  "Add relevant tags to help others discover your content",
                              }),
                            ],
                          }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                            className:
                              "bg-slate-50 dark:bg-slate-700 rounded-lg p-4 border border-slate-200 dark:border-slate-600",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h4", {
                                className:
                                  "text-sm font-semibold text-slate-800 dark:text-slate-200 mb-2",
                                children: "Preview",
                              }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                                className: "space-y-2",
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                    "div",
                                    {
                                      className: "flex items-center gap-2",
                                      children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          Badge,
                                          {
                                            className:
                                              "bg-slate-100 border-slate-300 dark:bg-slate-600 dark:border-slate-500 text-slate-700 dark:text-slate-300",
                                            children: [
                                              TYPE_META[type]?.icon,
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "span",
                                                {
                                                  className: "ml-1",
                                                  children:
                                                    TYPE_META[type]?.label,
                                                }
                                              ),
                                            ],
                                          }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          Badge,
                                          {
                                            variant: "outline",
                                            className: "capitalize",
                                            children: [
                                              CATEGORIES.find(
                                                (c) => c._id === category
                                              )?.icon,
                                              " ",
                                              category,
                                            ],
                                          }
                                        ),
                                      ],
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("h5", {
                                    className:
                                      "font-medium text-slate-900 dark:text-slate-100",
                                    children:
                                      title || "Your title will appear here",
                                  }),
                                  tags &&
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      "div",
                                      {
                                        className: "flex flex-wrap gap-1",
                                        children: tags
                                          .split(",")
                                          .map((tag, i) =>
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                              Badge,
                                              {
                                                variant: "secondary",
                                                className: "text-xs",
                                                children: ["#", tag.trim()],
                                              },
                                              i
                                            )
                                          ),
                                      }
                                    ),
                                ],
                              }),
                            ],
                          }),
                        ],
                      },
                      "step3"
                    ),
                ],
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className:
                  "flex justify-between items-center pt-6 border-t border-slate-200 dark:border-slate-700 mt-6",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                    type: "button",
                    variant: "ghost",
                    onClick: step === 1 ? handleClose : handleBack,
                    disabled: isLoading,
                    className: "flex items-center gap-2",
                    children:
                      step === 1
                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            jsxRuntimeExports.Fragment,
                            {
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(X, {
                                  className: "w-4 h-4",
                                }),
                                "Cancel",
                              ],
                            }
                          )
                        : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            jsxRuntimeExports.Fragment,
                            {
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  ChevronLeft,
                                  { className: "w-4 h-4" }
                                ),
                                "Back",
                              ],
                            }
                          ),
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                    className: "flex gap-2",
                    children:
                      step < totalSteps
                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, {
                            type: "button",
                            onClick: handleNext,
                            disabled: isLoading,
                            className:
                              "bg-slate-800 hover:bg-slate-900 dark:bg-slate-200 dark:hover:bg-slate-100 text-white dark:text-slate-900 px-6",
                            children: [
                              "Next",
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                ChevronRight,
                                { className: "w-4 h-4 ml-2" }
                              ),
                            ],
                          })
                        : /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                            type: "submit",
                            className:
                              "bg-gradient-to-r from-slate-800 to-slate-900 hover:from-slate-900 hover:to-black dark:from-slate-200 dark:to-slate-100 dark:hover:from-slate-100 dark:hover:to-white text-white dark:text-slate-900 px-8 shadow-lg",
                            disabled: isLoading,
                            children: isLoading
                              ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                  jsxRuntimeExports.Fragment,
                                  {
                                    children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        LoaderCircle,
                                        {
                                          className:
                                            "w-4 h-4 mr-2 animate-spin",
                                        }
                                      ),
                                      "Creating...",
                                    ],
                                  }
                                )
                              : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                  jsxRuntimeExports.Fragment,
                                  {
                                    children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        Sparkles,
                                        { className: "w-4 h-4 mr-2" }
                                      ),
                                      "Create",
                                    ],
                                  }
                                ),
                          }),
                  }),
                ],
              }),
            ],
          }),
        ],
      }),
    }),
  });
}
function AuthModal({ open, mode = "login", onClose, onSuccess }) {
  const [active, setActive] = reactExports.useState(mode);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  reactExports.useEffect(() => {
    setActive(mode);
  }, [mode]);
  const handleSubmit = async (formData) => {
    console.log("Form submitted:", formData);
    console.log(active);
    setIsLoading(true);
    try {
      let response;
      if (active === "login") {
        response = await ApiService.login({
          email: formData.email,
          password: formData.password,
        });
      } else if (active === "signup") {
        var checkEmail = await ApiService.checkEmail({
          email: formData.email,
        });
        console.log(checkEmail);
        if (checkEmail) {
          response = await ApiService.signup({
            username: formData.username,
            email: formData.email,
            password: formData.password,
          });
        }
      }
      if (response && response.token) {
        onSuccess(response);
        showSuccessToast(
          `Welcome ${active === "login" ? "back" : "to InspireLens"}, ${
            response.username
          }!`
        );
        setIsLoading(false);
        onClose();
      } else {
        showErrorToast(
          response.message || "Authentication failed. Please try again."
        );
        setIsLoading(false);
        return;
      }
    } catch (error) {
      console.error("Error during authentication:", error);
      showErrorToast(error.message || "An error occurred. Please try again.");
      setIsLoading(false);
      return;
    }
    await simulateDelay(800);
    const userData = {
      ...formData,
      id: Date.now(),
    };
    onSuccess(userData);
    showSuccessToast(
      `Welcome ${active === "login" ? "back" : "to InspireLens"}, ${
        formData.username
      }!`
    );
    setIsLoading(false);
  };
  const handleGoogleLogin = async (credentialResponse) => {
    setIsLoading(true);
    try {
      const token = credentialResponse?.credential;
      if (!token) {
        throw new Error("No credential returned from Google");
      }
      const response = await fetch("http://localhost:8080/auth/google", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token }),
        credentials: "include",
        // send cookies if any
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Google sign-in failed");
      }
      const data = await response.json();
      console.log("Google login response:", data);
      if (data && data.token) {
        onSuccess(data);
        showSuccessToast("Successfully signed in with Google!");
        setIsLoading(false);
        onClose();
      } else {
        throw new Error("Invalid response from server");
      }
    } catch (error) {
      setErrors(error.message || "Google sign-in failed");
      console.error("Google login error:", error);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Dialog, {
    open,
    onOpenChange: (v) => {
      if (!v && !isLoading) onClose?.();
    },
    children: /* @__PURE__ */ jsxRuntimeExports.jsxs(DialogContent, {
      className:
        "max-w-4xl sm:max-w-4xl p-0 overflow-hidden border-0 bg-white dark:bg-slate-800 shadow-xl rounded-lg max-h-[95vh] overflow-y-auto",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(DialogHeader, {
          className: "sr-only",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(DialogTitle, {
              children: "Authentication",
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(DialogDescription, {
              children: "Login or signup for InspireLens",
            }),
          ],
        }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.div, {
          initial: { scale: 0.98, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0.98, opacity: 0 },
          transition: { duration: 0.2 },
          className: "grid md:grid-cols-2",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
              className:
                "hidden md:block bg-slate-800 dark:bg-slate-900 text-white p-6",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                className: "h-full flex flex-col justify-center",
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.div, {
                  initial: { opacity: 0, y: 20 },
                  animate: { opacity: 1, y: 0 },
                  transition: { duration: 0.5, delay: 0.1 },
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                      className: "mb-4",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        InspireLensLogo,
                        { size: "lg" }
                      ),
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h2", {
                      className: "text-2xl font-bold mb-3",
                      children: "Welcome to InspireLens",
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", {
                      className: "text-slate-300 dark:text-slate-400 mb-6",
                      children:
                        "Join a community of growth-minded individuals sharing wisdom, inspiration, and insights.",
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className: "space-y-3",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.div, {
                          className: "flex items-center gap-3",
                          initial: { opacity: 0, x: -20 },
                          animate: { opacity: 1, x: 0 },
                          transition: { delay: 0.3 },
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                              className:
                                "w-6 h-6 rounded-full bg-slate-700 dark:bg-slate-600 flex items-center justify-center",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "span",
                                { className: "text-sm", children: "✨" }
                              ),
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                              className: "text-sm",
                              children:
                                "Discover curated content from experts and thought leaders",
                            }),
                          ],
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.div, {
                          className: "flex items-center gap-3",
                          initial: { opacity: 0, x: -20 },
                          animate: { opacity: 1, x: 0 },
                          transition: { delay: 0.4 },
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                              className:
                                "w-6 h-6 rounded-full bg-slate-700 dark:bg-slate-600 flex items-center justify-center",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "span",
                                { className: "text-sm", children: "🚀" }
                              ),
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                              className: "text-sm",
                              children:
                                "Share your insights and inspire others on their journey",
                            }),
                          ],
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.div, {
                          className: "flex items-center gap-3",
                          initial: { opacity: 0, x: -20 },
                          animate: { opacity: 1, x: 0 },
                          transition: { delay: 0.5 },
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                              className:
                                "w-6 h-6 rounded-full bg-slate-700 dark:bg-slate-600 flex items-center justify-center",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "span",
                                { className: "text-sm", children: "💡" }
                              ),
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                              className: "text-sm",
                              children:
                                "Connect with like-minded individuals and grow together",
                            }),
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
              className: "p-6",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                  className: "mb-4",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", {
                      className:
                        "text-xl font-bold text-slate-800 dark:text-slate-200",
                      children:
                        active === "login"
                          ? "Welcome back"
                          : active === "signup"
                          ? "Create your account"
                          : "Reset your password",
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", {
                      className:
                        "text-slate-600 dark:text-slate-400 mt-1 text-sm",
                      children:
                        active === "login"
                          ? "Sign in to continue your growth journey"
                          : active === "signup"
                          ? "Start your journey of continuous learning and inspiration"
                          : "Enter your email to receive a password reset link",
                    }),
                  ],
                }),
                active !== "forgot" &&
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                    className: "mb-4",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className:
                        "flex gap-1 p-1 bg-slate-100 dark:bg-slate-700 rounded-lg",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                          type: "button",
                          variant: active === "login" ? "default" : "ghost",
                          className: `flex-1 rounded transition-all duration-200 ${
                            active === "login"
                              ? "bg-white shadow-sm text-slate-800 dark:bg-slate-800 dark:text-slate-200"
                              : "text-slate-600 hover:text-slate-800 dark:text-slate-400 dark:hover:text-slate-200"
                          }`,
                          onClick: () => setActive("login"),
                          disabled: isLoading,
                          children: "Log in",
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                          type: "button",
                          variant: active === "signup" ? "default" : "ghost",
                          className: `flex-1 rounded transition-all duration-200 ${
                            active === "signup"
                              ? "bg-white shadow-sm text-slate-800 dark:bg-slate-800 dark:text-slate-200"
                              : "text-slate-600 hover:text-slate-800 dark:text-slate-400 dark:hover:text-slate-200"
                          }`,
                          onClick: () => setActive("signup"),
                          disabled: isLoading,
                          children: "Sign up",
                        }),
                      ],
                    }),
                  }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, {
                  mode: "wait",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    motion.div,
                    {
                      initial: { opacity: 0, x: 20 },
                      animate: { opacity: 1, x: 0 },
                      exit: { opacity: 0, x: -20 },
                      transition: { duration: 0.2 },
                      children:
                        active === "login"
                          ? /* @__PURE__ */ jsxRuntimeExports.jsx(LoginForm, {
                              onSuccess: handleSubmit,
                              onGoogleLogin: handleGoogleLogin,
                              isLoading,
                              onForgotPassword: () => setActive("forgot"),
                            })
                          : active === "signup"
                          ? /* @__PURE__ */ jsxRuntimeExports.jsx(SignupForm, {
                              onSuccess: handleSubmit,
                              onGoogleLogin: handleGoogleLogin,
                              isLoading,
                            })
                          : /* @__PURE__ */ jsxRuntimeExports.jsx(
                              ForgotPasswordForm,
                              { onBack: () => setActive("login"), isLoading }
                            ),
                    },
                    active
                  ),
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", {
                  className:
                    "text-xs text-slate-500 dark:text-slate-400 mt-4 text-center",
                  children: [
                    "By continuing, you agree to our",
                    " ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("button", {
                      className:
                        "underline hover:text-slate-700 dark:hover:text-slate-300",
                      children: "Terms of Service",
                    }),
                    " ",
                    "and",
                    " ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("button", {
                      className:
                        "underline hover:text-slate-700 dark:hover:text-slate-300",
                      children: "Privacy Policy",
                    }),
                  ],
                }),
              ],
            }),
          ],
        }),
      ],
    }),
  });
}
function LoginForm({ onSuccess, isLoading, onGoogleLogin, onForgotPassword }) {
  const [email, setEmail] = reactExports.useState("");
  const [password, setPassword] = reactExports.useState("");
  const [errors, setErrors2] = reactExports.useState({});
  const [showPassword, setShowPassword] = reactExports.useState(false);
  const validateForm = () => {
    const newErrors = {};
    if (!email.trim()) {
      newErrors.email = "Email is required";
    } else if (!validateEmail(email)) {
      newErrors.email = "Please enter a valid email address";
    }
    if (!password) {
      newErrors.password = "Password is required";
    }
    return newErrors;
  };
  const handleSubmitLogin = (e) => {
    console.log("Submitting login form:", { email, password });
    e.preventDefault();
    const formErrors = validateForm();
    console.log("Form errors:", formErrors);
    if (Object.keys(formErrors).length > 0) {
      setErrors2(formErrors);
      return;
    }
    setErrors2({});
    onSuccess({
      username: email.split("@")[0],
      email,
      password: password || "",
      // replace with hashedPassword if hashing
    });
  };
  function handleGoogle(credentialResponse) {
    onGoogleLogin(credentialResponse);
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("form", {
    onSubmit: handleSubmitLogin,
    className: "space-y-4",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoogleOAuthProvider, {
        clientId: CLIENT_ID,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoogleLogin, {
          onSuccess: handleGoogle,
          onError: () => console.log("Login Failed"),
          render: (renderProps) =>
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
              onClick: renderProps.onClick,
              className:
                "flex items-center justify-center w-full h-12 rounded-xl border border-gray-300 bg-white shadow-sm cursor-pointer \n                       hover:shadow-md hover:bg-gray-50 active:shadow-sm transition-all duration-200 ease-in-out",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                className: "text-slate-700 dark:text-slate-300",
                children: "Continue with Google",
              }),
            }),
        }),
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "relative",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
            className: "absolute inset-0 flex items-center",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
              className:
                "w-full border-t border-slate-200 dark:border-slate-600",
            }),
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
            className: "relative flex justify-center text-sm",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
              className:
                "px-3 bg-white dark:bg-slate-800 text-slate-500 dark:text-slate-400",
              children: "or continue with email",
            }),
          }),
        ],
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "space-y-3",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "space-y-1",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                htmlFor: "email",
                className: "text-slate-700 dark:text-slate-300 text-sm",
                children: "Email address",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                id: "email",
                type: "email",
                value: email,
                onChange: (e) => {
                  setEmail(e.target.value);
                  if (errors.email)
                    setErrors2((prev) => ({ ...prev, email: null }));
                },
                placeholder: "you@example.com",
                className: `h-10 border rounded transition-colors ${
                  errors.email
                    ? "border-red-300 focus:border-red-500"
                    : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                }`,
                disabled: isLoading,
              }),
              errors.email &&
                /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                  initial: { opacity: 0, y: -10 },
                  animate: { opacity: 1, y: 0 },
                  className: "text-red-600 text-sm flex items-center gap-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                      className: "w-3 h-3",
                    }),
                    errors.email,
                  ],
                }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "space-y-1",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                htmlFor: "password",
                className: "text-slate-700 dark:text-slate-300 text-sm",
                children: "Password",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "relative",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                    id: "password",
                    type: showPassword ? "text" : "password",
                    value: password,
                    onChange: (e) => {
                      setPassword(e.target.value);
                      if (errors.password)
                        setErrors2((prev) => ({ ...prev, password: null }));
                    },
                    placeholder: "Enter your password",
                    className: `h-10 border rounded pr-10 transition-colors ${
                      errors.password
                        ? "border-red-300 focus:border-red-500"
                        : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                    }`,
                    disabled: isLoading,
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                    type: "button",
                    variant: "ghost",
                    size: "sm",
                    className:
                      "absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8 p-0 hover:bg-slate-100 dark:hover:bg-slate-700 rounded",
                    onClick: () => setShowPassword(!showPassword),
                    disabled: isLoading,
                    children: showPassword
                      ? /* @__PURE__ */ jsxRuntimeExports.jsx(EyeOff, {
                          className: "w-3 h-3",
                        })
                      : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, {
                          className: "w-3 h-3",
                        }),
                  }),
                ],
              }),
              errors.password &&
                /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                  initial: { opacity: 0, y: -10 },
                  animate: { opacity: 1, y: 0 },
                  className: "text-red-600 text-sm flex items-center gap-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                      className: "w-3 h-3",
                    }),
                    errors.password,
                  ],
                }),
            ],
          }),
        ],
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
        className: "flex items-center justify-between text-sm",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("button", {
          type: "button",
          onClick: onForgotPassword,
          className:
            "text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200",
          children: "Forgot password?",
        }),
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
        type: "submit",
        className:
          "w-full h-10 bg-slate-800 hover:bg-slate-900 dark:bg-slate-200 dark:hover:bg-slate-100 text-white dark:text-slate-900 rounded disabled:opacity-50 transition-all duration-200",
        disabled: isLoading,
        children: isLoading
          ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(LoaderCircle, {
                  className: "w-4 h-4 mr-2 animate-spin",
                }),
                "Signing in...",
              ],
            })
          : "Sign in",
      }),
    ],
  });
}
function SignupForm({ onSuccess, isLoading, onGoogleLogin }) {
  const [username, setUsername] = reactExports.useState("");
  const [email, setEmail] = reactExports.useState("");
  const [password, setPassword] = reactExports.useState("");
  const [confirmPassword, setConfirmPassword] = reactExports.useState("");
  const [errors, setErrors2] = reactExports.useState({});
  const [showPassword, setShowPassword] = reactExports.useState(false);
  const validateForm = () => {
    const newErrors = {};
    if (!username.trim()) {
      newErrors.username = "Username is required";
    } else if (!validateUsername(username)) {
      newErrors.username =
        "Username must be 3-20 characters, letters, numbers, and underscores only";
    }
    if (!email.trim()) {
      newErrors.email = "Email is required";
    } else if (!validateEmail(email)) {
      newErrors.email = "Please enter a valid email address";
    }
    if (!password) {
      newErrors.password = "Password is required";
    } else if (!validatePassword(password)) {
      newErrors.password =
        "Password must be at least 8 characters with letters and numbers";
    }
    if (password !== confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
    }
    return newErrors;
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const formErrors = validateForm();
    if (Object.keys(formErrors).length > 0) {
      setErrors2(formErrors);
      return;
    }
    const salt = bcrypt.genSaltSync(10);
    const hashedPassword = bcrypt.hashSync(password, salt);
    setErrors2({});
    onSuccess({ username, email, password: hashedPassword });
  };
  const handleGoogleSignup = async (credentialResponse) => {
    onGoogleLogin(credentialResponse);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("form", {
    onSubmit: handleSubmit,
    className: "space-y-4",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(GoogleOAuthProvider, {
        clientId: CLIENT_ID,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoogleLogin, {
          onSuccess: handleGoogleSignup,
          onError: () => console.log("Login Failed"),
          render: (renderProps) =>
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
              onClick: renderProps.onClick,
              className:
                "flex items-center justify-center w-full h-12 rounded-xl border border-gray-300 bg-white shadow-sm cursor-pointer \n                       hover:shadow-md hover:bg-gray-50 active:shadow-sm transition-all duration-200 ease-in-out",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                className: "text-slate-700 dark:text-slate-300",
                children: "Continue with Google",
              }),
            }),
        }),
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "relative",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
            className: "absolute inset-0 flex items-center",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
              className:
                "w-full border-t border-slate-200 dark:border-slate-600",
            }),
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
            className: "relative flex justify-center text-sm",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
              className:
                "px-3 bg-white dark:bg-slate-800 text-slate-500 dark:text-slate-400",
              children: "or create your account",
            }),
          }),
        ],
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "space-y-3",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "space-y-1",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                htmlFor: "username",
                className: "text-slate-700 dark:text-slate-300 text-sm",
                children: "Username",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                id: "username",
                value: username,
                onChange: (e) => {
                  setUsername(e.target.value);
                  if (errors.username)
                    setErrors2((prev) => ({ ...prev, username: null }));
                },
                placeholder: "Enter your username",
                className: `h-10 border rounded transition-colors ${
                  errors.username
                    ? "border-red-300 focus:border-red-500"
                    : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                }`,
                disabled: isLoading,
              }),
              errors.username &&
                /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                  initial: { opacity: 0, y: -10 },
                  animate: { opacity: 1, y: 0 },
                  className: "text-red-600 text-sm flex items-center gap-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                      className: "w-3 h-3",
                    }),
                    errors.username,
                  ],
                }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "space-y-1",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                htmlFor: "email",
                className: "text-slate-700 dark:text-slate-300 text-sm",
                children: "Email address",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                id: "email",
                type: "email",
                value: email,
                onChange: (e) => {
                  setEmail(e.target.value);
                  if (errors.email)
                    setErrors2((prev) => ({ ...prev, email: null }));
                },
                placeholder: "you@example.com",
                className: `h-10 border rounded transition-colors ${
                  errors.email
                    ? "border-red-300 focus:border-red-500"
                    : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                }`,
                disabled: isLoading,
              }),
              errors.email &&
                /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                  initial: { opacity: 0, y: -10 },
                  animate: { opacity: 1, y: 0 },
                  className: "text-red-600 text-sm flex items-center gap-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                      className: "w-3 h-3",
                    }),
                    errors.email,
                  ],
                }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "space-y-1",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                htmlFor: "password",
                className: "text-slate-700 dark:text-slate-300 text-sm",
                children: "Password",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                className: "relative",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                    id: "password",
                    type: showPassword ? "text" : "password",
                    value: password,
                    onChange: (e) => {
                      setPassword(e.target.value);
                      if (errors.password)
                        setErrors2((prev) => ({ ...prev, password: null }));
                    },
                    placeholder: "Create a strong password",
                    className: `h-10 border rounded pr-10 transition-colors ${
                      errors.password
                        ? "border-red-300 focus:border-red-500"
                        : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                    }`,
                    disabled: isLoading,
                  }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
                    type: "button",
                    variant: "ghost",
                    size: "sm",
                    className:
                      "absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8 p-0 hover:bg-slate-100 dark:hover:bg-slate-700 rounded",
                    onClick: () => setShowPassword(!showPassword),
                    disabled: isLoading,
                    children: showPassword
                      ? /* @__PURE__ */ jsxRuntimeExports.jsx(EyeOff, {
                          className: "w-3 h-3",
                        })
                      : /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, {
                          className: "w-3 h-3",
                        }),
                  }),
                ],
              }),
              errors.password &&
                /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                  initial: { opacity: 0, y: -10 },
                  animate: { opacity: 1, y: 0 },
                  className: "text-red-600 text-sm flex items-center gap-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                      className: "w-3 h-3",
                    }),
                    errors.password,
                  ],
                }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "space-y-1",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
                htmlFor: "confirmPassword",
                className: "text-slate-700 dark:text-slate-300 text-sm",
                children: "Confirm password",
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
                id: "confirmPassword",
                type: "password",
                value: confirmPassword,
                onChange: (e) => {
                  setConfirmPassword(e.target.value);
                  if (errors.confirmPassword)
                    setErrors2((prev) => ({ ...prev, confirmPassword: null }));
                },
                placeholder: "Confirm your password",
                className: `h-10 border rounded transition-colors ${
                  errors.confirmPassword
                    ? "border-red-300 focus:border-red-500"
                    : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
                }`,
                disabled: isLoading,
              }),
              errors.confirmPassword &&
                /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
                  initial: { opacity: 0, y: -10 },
                  animate: { opacity: 1, y: 0 },
                  className: "text-red-600 text-sm flex items-center gap-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                      className: "w-3 h-3",
                    }),
                    errors.confirmPassword,
                  ],
                }),
            ],
          }),
        ],
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
        type: "submit",
        className:
          "w-full h-10 bg-slate-800 hover:bg-slate-900 dark:bg-slate-200 dark:hover:bg-slate-100 text-white dark:text-slate-900 rounded disabled:opacity-50 transition-all duration-200",
        disabled: isLoading,
        children: isLoading
          ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(LoaderCircle, {
                  className: "w-4 h-4 mr-2 animate-spin",
                }),
                "Creating account...",
              ],
            })
          : "Create account",
      }),
    ],
  });
}
function ForgotPasswordForm({ onBack, isLoading }) {
  const [email, setEmail] = reactExports.useState("");
  const [errors, setErrors2] = reactExports.useState({});
  const [submitted, setSubmitted] = reactExports.useState(false);
  const validateForm = () => {
    const newErrors = {};
    if (!email.trim()) {
      newErrors.email = "Email is required";
    } else if (!validateEmail(email)) {
      newErrors.email = "Please enter a valid email address";
    }
    return newErrors;
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    const formErrors = validateForm();
    if (Object.keys(formErrors).length > 0) {
      setErrors2(formErrors);
      return;
    }
    setErrors2({});
    await simulateDelay(1e3);
    setSubmitted(true);
    showSuccessToast("Password reset link sent to your email!");
  };
  if (submitted) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
      className: "text-center space-y-4",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
          className:
            "w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Check, {
            className: "w-8 h-8 text-green-600 dark:text-green-400",
          }),
        }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", {
              className:
                "text-lg font-semibold text-slate-900 dark:text-slate-100",
              children: "Check your email",
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", {
              className: "text-sm text-slate-600 dark:text-slate-400 mt-1",
              children: [
                "We've sent a password reset link to ",
                /* @__PURE__ */ jsxRuntimeExports.jsx("strong", {
                  children: email,
                }),
              ],
            }),
          ],
        }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
          onClick: onBack,
          variant: "outline",
          className: "w-full",
          children: "Back to login",
        }),
      ],
    });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("form", {
    onSubmit: handleSubmit,
    className: "space-y-4",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "space-y-1",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Label$1, {
            htmlFor: "email",
            className: "text-slate-700 dark:text-slate-300 text-sm",
            children: "Email address",
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Input, {
            id: "email",
            type: "email",
            value: email,
            onChange: (e) => {
              setEmail(e.target.value);
              if (errors.email)
                setErrors2((prev) => ({ ...prev, email: null }));
            },
            placeholder: "you@example.com",
            className: `h-10 border rounded transition-colors ${
              errors.email
                ? "border-red-300 focus:border-red-500"
                : "border-slate-300 focus:border-slate-500 dark:border-slate-600 dark:focus:border-slate-400"
            }`,
            disabled: isLoading,
          }),
          errors.email &&
            /* @__PURE__ */ jsxRuntimeExports.jsxs(motion.p, {
              initial: { opacity: 0, y: -10 },
              animate: { opacity: 1, y: 0 },
              className: "text-red-600 text-sm flex items-center gap-1",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(CircleAlert, {
                  className: "w-3 h-3",
                }),
                errors.email,
              ],
            }),
        ],
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "space-y-2",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
            type: "submit",
            className:
              "w-full h-10 bg-slate-800 hover:bg-slate-900 dark:bg-slate-200 dark:hover:bg-slate-100 text-white dark:text-slate-900 rounded disabled:opacity-50 transition-all duration-200",
            disabled: isLoading,
            children: isLoading
              ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  jsxRuntimeExports.Fragment,
                  {
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(LoaderCircle, {
                        className: "w-4 h-4 mr-2 animate-spin",
                      }),
                      "Sending reset link...",
                    ],
                  }
                )
              : "Send reset link",
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
            type: "button",
            onClick: onBack,
            variant: "ghost",
            className: "w-full",
            children: "Back to login",
          }),
        ],
      }),
    ],
  });
}
function FloatingActionButton({ onClick, currentUser }) {
  if (!currentUser) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(motion.div, {
    className: "fixed bottom-6 right-6 z-50",
    initial: { scale: 0 },
    animate: { scale: 1 },
    transition: { delay: 1, type: "spring", stiffness: 200, damping: 15 },
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, {
      onClick,
      className:
        "w-12 h-12 bg-slate-800 hover:bg-slate-900 dark:bg-slate-200 dark:hover:bg-slate-100 text-white dark:text-slate-900 rounded-full shadow-lg flex items-center justify-center transition-all duration-200",
      size: "icon",
      "aria-label": "Create new content",
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Plus, {
        className: "w-5 h-5",
      }),
    }),
  });
}
function AppContent() {
  const [items, setItems] = reactExports.useState(initialItems || []);
  const [activeCategory, setActiveCategory] = reactExports.useState("all");
  const [activeType, setActiveType] = reactExports.useState("all");
  const [currentPage, setCurrentPage] = reactExports.useState(1);
  const [isLoading, setIsLoading] = reactExports.useState(false);
  const [authOpen, setAuthOpen] = reactExports.useState(false);
  const [createOpen, setCreateOpen] = reactExports.useState(false);
  const [authMode, setAuthMode] = reactExports.useState("login");
  const [currentUser, setCurrentUser] = reactExports.useState(() => {
    try {
      return JSON.parse(localStorage.getItem("inspirelens_user") || "null");
    } catch {
      return null;
    }
  });
  reactExports.useEffect(() => {
    console.log("Items updated:", items);
  }, [items]);
  const filteredItems = reactExports.useMemo(() => {
    return items.filter((item) => {
      const categoryMatch =
        activeCategory === "all" ? true : item.category === activeCategory;
      const typeMatch = activeType === "all" ? true : item.type === activeType;
      return categoryMatch && typeMatch;
    });
  }, [items, activeCategory, activeType]);
  const totalPages = Math.ceil(filteredItems.length / ITEMS_PER_PAGE);
  const paginatedItems = reactExports.useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    return filteredItems.slice(startIndex, startIndex + ITEMS_PER_PAGE);
  }, [filteredItems, currentPage]);
  const handleCategoryChange = async (categoryId) => {
    const newCategory = String(categoryId) === "1" ? "all" : String(categoryId);
    if (newCategory === activeCategory) return;
    setIsLoading(true);
    setActiveCategory(newCategory);
    setCurrentPage(1);
    console.log("Changing category to:", newCategory);
    console.log("Current active type:", activeType);
    await simulateDelay(300);
    try {
      const response = await ApiService.getContentByCategory(
        newCategory,
        1,
        activeType
      );
      console.log("API response:", response.posts);
      console.log("Current before api:", items);
      if (response.posts && response.posts.length > 0) {
        setItems(response.posts);
        console.log("Setting items from API response:", response.posts);
        setItems(response.posts);
        console.log("New items set:", items);
      } else {
        console.log("No items in API response, using local filtering");
      }
      console.log(CATEGORIES.filter((c) => c));
      console.log(newCategory);
      const matchedCategory = CATEGORIES.filter(
        (c) => String(c.id) === newCategory
      )[0];
      showInfoToast(`Loaded ${matchedCategory?.name || "content"}`);
    } catch (error) {
      console.error("Failed to load category content:", error);
      showErrorToast();
    } finally {
      setIsLoading(false);
    }
  };
  const handleTypeChange = async (typeId) => {
    if (typeId === activeType) return;
    setIsLoading(true);
    setActiveType(typeId);
    setCurrentPage(1);
    try {
      const response = await ApiService.getContentByType(
        typeId,
        1,
        activeCategory
      );
      console.log("API response for type change:", response);
      if (response.items) {
        console.log("Setting items from API response:", response.items);
        setItems(response.items);
      } else {
        console.log("No items in API response, using local filtering");
      }
      const typeName =
        typeId === "all"
          ? "All Types"
          : TYPE_META[String(typeId)]?.label || String(typeId);
      showInfoToast(`Filtered by ${typeName}`);
    } catch (error) {
      console.error("Failed to load type content:", error);
      showErrorToast();
    } finally {
      setIsLoading(false);
    }
  };
  const handlePageChange = async (page) => {
    if (page === currentPage) return;
    setIsLoading(true);
    setCurrentPage(page);
    await simulateDelay(400);
    showInfoToast(`Page ${page}`);
    setIsLoading(false);
  };
  function openAuth(mode = "login") {
    if (mode === "logout") {
      setCurrentUser(null);
      localStorage.removeItem("inspirelens_user");
      showSuccessToast("You have been logged out successfully");
      return;
    }
    setAuthMode(mode);
    setAuthOpen(true);
  }
  function handleAuthSuccess(user) {
    setCurrentUser(user);
    localStorage.setItem("inspirelens_user", JSON.stringify(user));
    setAuthOpen(false);
  }
  function handleCreateContent(newItem) {
    setItems((prev) => [newItem, ...prev]);
    setCurrentPage(1);
    if (activeCategory !== "all" && activeCategory !== newItem.category) {
      setActiveCategory(newItem.category);
    }
  }
  function handleVote(id, delta) {
    setItems((prev) =>
      prev.map((it) =>
        it.id === id ? { ...it, points: Math.max(0, it.points + delta) } : it
      )
    );
  }
  async function handleAddComment(itemId, comment) {
    const optimisticComment = {
      ...comment,
      id: Date.now(),
      // temporary ID
    };
    setItems((prev) =>
      prev.map((it) =>
        it.id === itemId
          ? {
              ...it,
              comments: [
                ...(it.comments ?? []),
                {
                  id: optimisticComment.id,
                  text: optimisticComment.text,
                  user: optimisticComment.user,
                  createdAt: Date.now(),
                  createdBy: optimisticComment.createdBy,
                },
              ],
            }
          : it
      )
    );
    console.log("comment-->", comment);
    console.log("Adding comment:", comment.text);
    console.log("To item ID:", itemId);
    console.log("Optimistic comment:", optimisticComment);
    const response = await ApiService.addComment(
      itemId,
      comment.text,
      comment.userId
    );
    console.log("Add comment response:", response);
    setItems((prev) =>
      prev.map((it) => {
        if (it.id === itemId) {
          const updatedComments = Array.isArray(it.comments)
            ? it.comments.map((c) =>
                c.id === optimisticComment.id ? response.comment : c
              )
            : [];
          return { ...it, comments: updatedComments };
        }
        return it;
      })
    );
  }
  function handleDeleteComment(itemId, commentId) {
    setItems((prev) =>
      prev.map((it) => {
        if (it.id === itemId) {
          return {
            ...it,
            comments: it.comments.filter((c) => c.id !== commentId),
          };
        }
        return it;
      })
    );
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
    className: "min-h-screen bg-slate-50 dark:bg-slate-900 transition-colors",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Toaster, { position: "top-right" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        className: "max-w-6xl mx-auto px-4 py-6",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Header, {
            currentUser,
            onOpenAuth: openAuth,
            onOpenCreateModal: () => setCreateOpen(true),
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AuthModal, {
            open: authOpen,
            mode: authMode,
            onClose: () => setAuthOpen(false),
            onSuccess: handleAuthSuccess,
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(CreateContentModal, {
            open: createOpen,
            onClose: () => setCreateOpen(false),
            onSubmit: handleCreateContent,
            currentUser,
            onRequireAuth: () => openAuth("login"),
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            className: "mt-6 grid grid-cols-1 lg:grid-cols-4 gap-6",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("aside", {
                className: "hidden lg:block lg:col-span-1",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                  className: "sticky top-6",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Sidebar, {
                    activeCategory,
                    setActiveCategory,
                    onCategoryChange: handleCategoryChange,
                    isLoading,
                  }),
                }),
              }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("main", {
                className: "lg:col-span-3",
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                  className: "space-y-4",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                      className:
                        "flex flex-col sm:flex-row sm:items-center justify-between gap-3",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                          className: "flex items-center gap-3",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
                              className: "flex-1",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("h2", {
                                  className:
                                    "text-lg font-semibold text-slate-800 dark:text-slate-200",
                                  children: [
                                    CATEGORIES.find(
                                      (c) => c._id === activeCategory
                                    )?.icon,
                                    " ",
                                    " ",
                                    CATEGORIES.find(
                                      (c) => c._id === activeCategory
                                    )?.name || "All",
                                  ],
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", {
                                  className:
                                    "text-slate-600 dark:text-slate-400 mt-0.5 text-sm",
                                  children: [
                                    filteredItems.length,
                                    " inspirational ",
                                    filteredItems.length === 1
                                      ? "item"
                                      : "items",
                                  ],
                                }),
                              ],
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              MobileCategorySidebar,
                              {
                                activeCategory,
                                onCategoryChange: handleCategoryChange,
                                isLoading,
                              }
                            ),
                          ],
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
                          className:
                            "flex items-center gap-2 text-xs text-slate-500 dark:text-slate-400",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "span",
                            {
                              children: [
                                "Page ",
                                currentPage,
                                " of ",
                                totalPages || 1,
                              ],
                            }
                          ),
                        }),
                      ],
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(ContentTypeFilter, {
                      activeType,
                      onTypeChange: handleTypeChange,
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, {
                      mode: "wait",
                      children: isLoading
                        ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                            motion.div,
                            {
                              initial: { opacity: 0 },
                              animate: { opacity: 1 },
                              exit: { opacity: 0 },
                              className: "space-y-4",
                              children: Array.from({
                                length: ITEMS_PER_PAGE,
                              }).map((_, i) =>
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  SkeletonCard,
                                  {},
                                  i
                                )
                              ),
                            },
                            "loading"
                          )
                        : /* @__PURE__ */ jsxRuntimeExports.jsx(
                            motion.div,
                            {
                              initial: { opacity: 0 },
                              animate: { opacity: 1 },
                              exit: { opacity: 0 },
                              className: "space-y-4",
                              children:
                                paginatedItems.length === 0
                                  ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                      "div",
                                      {
                                        className: "text-center py-12",
                                        children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "div",
                                            {
                                              className: "text-4xl mb-3",
                                              children: "🔍",
                                            }
                                          ),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "h3",
                                            {
                                              className:
                                                "text-lg font-semibold text-slate-800 dark:text-slate-200 mb-2",
                                              children: "No content found",
                                            }
                                          ),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "p",
                                            {
                                              className:
                                                "text-slate-600 dark:text-slate-400 text-sm",
                                              children:
                                                "Try selecting a different category or content type.",
                                            }
                                          ),
                                        ],
                                      }
                                    )
                                  : paginatedItems.map((item, index) =>
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        ItemCard,
                                        {
                                          item,
                                          index,
                                          onVote: handleVote,
                                          onAddComment: handleAddComment,
                                          onDeleteComment: handleDeleteComment,
                                          onRequireAuth: () =>
                                            openAuth("login"),
                                          currentUser,
                                        },
                                        item.id
                                      )
                                    ),
                            },
                            `${activeCategory}-${activeType}-${currentPage}`
                          ),
                    }),
                    !isLoading &&
                      paginatedItems.length > 0 &&
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Pagination, {
                        currentPage,
                        totalPages,
                        onPageChange: handlePageChange,
                        isLoading,
                      }),
                  ],
                }),
              }),
            ],
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(FloatingActionButton, {
            onClick: () => setCreateOpen(true),
            currentUser,
          }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("footer", {
            className: "mt-16 text-center",
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
              className:
                "inline-flex items-center gap-2 text-slate-500 dark:text-slate-400 text-xs bg-white dark:bg-slate-800 px-4 py-2 rounded-full shadow-sm border border-slate-200 dark:border-slate-700",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", {
                  children: [
                    "© ",
                    /* @__PURE__ */ new Date().getFullYear(),
                    " InspireLens",
                  ],
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                  children: "•",
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                  children: "Built for growth-minded individuals",
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                  children: "•",
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", {
                  className: "flex items-center gap-1",
                  children: [
                    "Made with ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Star, {
                      className: "w-3 h-3 text-yellow-500 fill-current",
                    }),
                  ],
                }),
              ],
            }),
          }),
        ],
      }),
    ],
  });
}
function App() {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider, {
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(AppContent, {}),
  });
}
function showErrorToast(arg0) {
  throw new Error("Function not implemented.");
}

clientExports
  .createRoot(document.getElementById("root"))
  .render(/* @__PURE__ */ jsxRuntimeExports.jsx(App, {}));
//# sourceMappingURL=index-CsWfErO7.js.map
